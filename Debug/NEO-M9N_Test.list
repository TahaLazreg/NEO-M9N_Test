
NEO-M9N_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000706c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007210  08007210  00017210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  080075f8  080075f8  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075f8  080075f8  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000250  08007850  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08007850  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aebc  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4f  00000000  00000000  0002b13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002ce90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d27a  00000000  00000000  0002dea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008520  00000000  00000000  0004b122  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7ef8  00000000  00000000  00053642  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec4  00000000  00000000  000fb5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071f4 	.word	0x080071f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	080071f4 	.word	0x080071f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	GNSS->day = 0;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->hour = 0;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->min = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->sec = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->fixType = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->lon = 0;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->height = 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	GNSS->hMSL = 0;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	GNSS->hAcc = 0;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->vAcc = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->gSpeed = 0;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	GNSS->headMot = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e057      	b.n	8000d06 <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3309      	adds	r3, #9
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2bb5      	cmp	r3, #181	; 0xb5
 8000c62:	d14d      	bne.n	8000d00 <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	7a5b      	ldrb	r3, [r3, #9]
 8000c6e:	2b62      	cmp	r3, #98	; 0x62
 8000c70:	d146      	bne.n	8000d00 <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3302      	adds	r3, #2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	7a5b      	ldrb	r3, [r3, #9]
 8000c7c:	2b27      	cmp	r3, #39	; 0x27
 8000c7e:	d10a      	bne.n	8000c96 <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3303      	adds	r3, #3
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	7a5b      	ldrb	r3, [r3, #9]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d103      	bne.n	8000c96 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f874 	bl	8000d7c <GNSS_ParseUniqID>
 8000c94:	e034      	b.n	8000d00 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10a      	bne.n	8000cba <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	7a5b      	ldrb	r3, [r3, #9]
 8000cae:	2b21      	cmp	r3, #33	; 0x21
 8000cb0:	d103      	bne.n	8000cba <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f9ae 	bl	8001014 <GNSS_ParseNavigatorData>
 8000cb8:	e022      	b.n	8000d00 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	7a5b      	ldrb	r3, [r3, #9]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d10a      	bne.n	8000cde <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3303      	adds	r3, #3
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	7a5b      	ldrb	r3, [r3, #9]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	d103      	bne.n	8000cde <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f872 	bl	8000dc0 <GNSS_ParsePVTData>
 8000cdc:	e010      	b.n	8000d00 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	7a5b      	ldrb	r3, [r3, #9]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d109      	bne.n	8000d00 <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3303      	adds	r3, #3
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	7a5b      	ldrb	r3, [r3, #9]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d102      	bne.n	8000d00 <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f9c0 	bl	8001080 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	dda4      	ble.n	8000c56 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getDeviceID,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2208      	movs	r2, #8
 8000d22:	4907      	ldr	r1, [pc, #28]	; (8000d40 <GNSS_GetUniqID+0x2c>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 f81f 	bl	8003d68 <HAL_UART_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 17);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2211      	movs	r2, #17
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <GNSS_GetUniqID+0x30>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 ff76 	bl	8003c24 <HAL_UART_Receive_IT>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000064 	.word	0x20000064
 8000d44:	20000289 	.word	0x20000289

08000d48 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2208      	movs	r2, #8
 8000d56:	4907      	ldr	r1, [pc, #28]	; (8000d74 <GNSS_GetPVTData+0x2c>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 f805 	bl	8003d68 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2264      	movs	r2, #100	; 0x64
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <GNSS_GetPVTData+0x30>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 ff5c 	bl	8003c24 <HAL_UART_Receive_IT>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000006c 	.word	0x2000006c
 8000d78:	20000289 	.word	0x20000289

08000d7c <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	for (int var = 0; var <= 5; ++var) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e00d      	b.n	8000da6 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.uartWorkingBuffer[10 + var];
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	330a      	adds	r3, #10
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <GNSS_ParseUniqID+0x3c>)
 8000d90:	4413      	add	r3, r2
 8000d92:	7a59      	ldrb	r1, [r3, #9]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var <= 5; ++var) {
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	ddee      	ble.n	8000d8a <GNSS_ParseUniqID+0xe>
	}
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000280 	.word	0x20000280
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[10];
 8000dc8:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000dca:	7cda      	ldrb	r2, [r3, #19]
 8000dcc:	4b8d      	ldr	r3, [pc, #564]	; (8001004 <GNSS_ParsePVTData+0x244>)
 8000dce:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[11];
 8000dd0:	4b8b      	ldr	r3, [pc, #556]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000dd2:	7d1a      	ldrb	r2, [r3, #20]
 8000dd4:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <GNSS_ParsePVTData+0x244>)
 8000dd6:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8000dd8:	4b8a      	ldr	r3, [pc, #552]	; (8001004 <GNSS_ParsePVTData+0x244>)
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[12];
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000de4:	7d5a      	ldrb	r2, [r3, #21]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	GNSS->day = GNSS_Handle.uartWorkingBuffer[13];
 8000dec:	4b84      	ldr	r3, [pc, #528]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000dee:	7d9a      	ldrb	r2, [r3, #22]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[14];
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000df8:	7dda      	ldrb	r2, [r3, #23]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->min = GNSS_Handle.uartWorkingBuffer[15];
 8000e00:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000e02:	7e1a      	ldrb	r2, [r3, #24]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[16];
 8000e0a:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000e0c:	7e5a      	ldrb	r2, [r3, #25]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[26];
 8000e14:	4b7a      	ldr	r3, [pc, #488]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000e16:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	for (int var = 0; var < 4; ++var) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	e00c      	b.n	8000e40 <GNSS_ParsePVTData+0x80>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	331e      	adds	r3, #30
 8000e2a:	4a75      	ldr	r2, [pc, #468]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7a59      	ldrb	r1, [r3, #9]
 8000e30:	4a75      	ldr	r2, [pc, #468]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	4413      	add	r3, r2
 8000e36:	460a      	mov	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	ddef      	ble.n	8000e26 <GNSS_ParsePVTData+0x66>
	}
	GNSS->lon = iLong.iLong;
 8000e46:	4b70      	ldr	r3, [pc, #448]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8000e4e:	4b6e      	ldr	r3, [pc, #440]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800100c <GNSS_ParsePVTData+0x24c>
 8000e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	for (int var = 0; var < 4; ++var) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
 8000e6c:	e00c      	b.n	8000e88 <GNSS_ParsePVTData+0xc8>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 34];
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	3322      	adds	r3, #34	; 0x22
 8000e72:	4a63      	ldr	r2, [pc, #396]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000e74:	4413      	add	r3, r2
 8000e76:	7a59      	ldrb	r1, [r3, #9]
 8000e78:	4a63      	ldr	r2, [pc, #396]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	460a      	mov	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	3301      	adds	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	ddef      	ble.n	8000e6e <GNSS_ParsePVTData+0xae>
	}
	GNSS->lat = iLong.iLong;
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800100c <GNSS_ParsePVTData+0x24c>
 8000ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	for (int var = 0; var < 4; ++var) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	e00c      	b.n	8000ed0 <GNSS_ParsePVTData+0x110>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 38];
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3326      	adds	r3, #38	; 0x26
 8000eba:	4a51      	ldr	r2, [pc, #324]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000ebc:	4413      	add	r3, r2
 8000ebe:	7a59      	ldrb	r1, [r3, #9]
 8000ec0:	4a51      	ldr	r2, [pc, #324]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	ddef      	ble.n	8000eb6 <GNSS_ParsePVTData+0xf6>
	}
	GNSS->height = iLong.iLong;
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	for (int var = 0; var < 4; ++var) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	e00c      	b.n	8000f00 <GNSS_ParsePVTData+0x140>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	332a      	adds	r3, #42	; 0x2a
 8000eea:	4a45      	ldr	r2, [pc, #276]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000eec:	4413      	add	r3, r2
 8000eee:	7a59      	ldrb	r1, [r3, #9]
 8000ef0:	4a45      	ldr	r2, [pc, #276]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	ddef      	ble.n	8000ee6 <GNSS_ParsePVTData+0x126>
	}
	GNSS->hMSL = iLong.iLong;
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e00c      	b.n	8000f30 <GNSS_ParsePVTData+0x170>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 46];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	332e      	adds	r3, #46	; 0x2e
 8000f1a:	4a39      	ldr	r2, [pc, #228]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	7a59      	ldrb	r1, [r3, #9]
 8000f20:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <GNSS_ParsePVTData+0x250>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	ddef      	ble.n	8000f16 <GNSS_ParsePVTData+0x156>
	}
	GNSS->hAcc = uLong.uLong;
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <GNSS_ParsePVTData+0x250>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	e00c      	b.n	8000f60 <GNSS_ParsePVTData+0x1a0>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 50];
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3332      	adds	r3, #50	; 0x32
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	7a59      	ldrb	r1, [r3, #9]
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <GNSS_ParsePVTData+0x250>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	ddef      	ble.n	8000f46 <GNSS_ParsePVTData+0x186>
	}
	GNSS->vAcc = uLong.uLong;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <GNSS_ParsePVTData+0x250>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e00c      	b.n	8000f90 <GNSS_ParsePVTData+0x1d0>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3342      	adds	r3, #66	; 0x42
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	7a59      	ldrb	r1, [r3, #9]
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	460a      	mov	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	ddef      	ble.n	8000f76 <GNSS_ParsePVTData+0x1b6>
	}
	GNSS->gSpeed = iLong.iLong;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	for (int var = 0; var < 4; ++var) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	e00c      	b.n	8000fc0 <GNSS_ParsePVTData+0x200>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 70];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3346      	adds	r3, #70	; 0x46
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <GNSS_ParsePVTData+0x240>)
 8000fac:	4413      	add	r3, r2
 8000fae:	7a59      	ldrb	r1, [r3, #9]
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	ddef      	ble.n	8000fa6 <GNSS_ParsePVTData+0x1e6>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <GNSS_ParsePVTData+0x248>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fab2 	bl	8000534 <__aeabi_i2d>
 8000fd0:	a309      	add	r3, pc, #36	; (adr r3, 8000ff8 <GNSS_ParsePVTData+0x238>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fb17 	bl	8000608 <__aeabi_dmul>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fdc1 	bl	8000b68 <__aeabi_d2iz>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8000fee:	bf00      	nop
 8000ff0:	372c      	adds	r7, #44	; 0x2c
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	88e368f1 	.word	0x88e368f1
 8000ffc:	3ee4f8b5 	.word	0x3ee4f8b5
 8001000:	20000280 	.word	0x20000280
 8001004:	20000278 	.word	0x20000278
 8001008:	2000027c 	.word	0x2000027c
 800100c:	4b189680 	.word	0x4b189680
 8001010:	20000324 	.word	0x20000324

08001014 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[18];
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 800101e:	7eda      	ldrb	r2, [r3, #27]
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <GNSS_ParseNavigatorData+0x68>)
 8001022:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[19];
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 8001026:	7f1a      	ldrb	r2, [r3, #28]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <GNSS_ParseNavigatorData+0x68>)
 800102a:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <GNSS_ParseNavigatorData+0x68>)
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[20];
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 8001038:	7f5a      	ldrb	r2, [r3, #29]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	GNSS->day = GNSS_Handle.uartWorkingBuffer[21];
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 8001042:	7f9a      	ldrb	r2, [r3, #30]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[22];
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 800104c:	7fda      	ldrb	r2, [r3, #31]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->min = GNSS_Handle.uartWorkingBuffer[23];
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 8001056:	f893 2020 	ldrb.w	r2, [r3, #32]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[24];
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <GNSS_ParseNavigatorData+0x64>)
 8001062:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000280 	.word	0x20000280
 800107c:	20000278 	.word	0x20000278

08001080 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	e00c      	b.n	80010a8 <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 10];
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	330a      	adds	r3, #10
 8001092:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 8001094:	4413      	add	r3, r2
 8001096:	7a59      	ldrb	r1, [r3, #9]
 8001098:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	ddef      	ble.n	800108e <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 80010ae:	4b4e      	ldr	r3, [pc, #312]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80010b6:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80011ec <GNSS_ParsePOSLLHData+0x16c>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	for (int var = 0; var < 4; ++var) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	e00c      	b.n	80010f0 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 14];
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	330e      	adds	r3, #14
 80010da:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 80010dc:	4413      	add	r3, r2
 80010de:	7a59      	ldrb	r1, [r3, #9]
 80010e0:	4a41      	ldr	r2, [pc, #260]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4413      	add	r3, r2
 80010e6:	460a      	mov	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	ddef      	ble.n	80010d6 <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80011ec <GNSS_ParsePOSLLHData+0x16c>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	for (int var = 0; var < 4; ++var) {
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e00c      	b.n	8001138 <GNSS_ParsePOSLLHData+0xb8>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 18];
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3312      	adds	r3, #18
 8001122:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 8001124:	4413      	add	r3, r2
 8001126:	7a59      	ldrb	r1, [r3, #9]
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4413      	add	r3, r2
 800112e:	460a      	mov	r2, r1
 8001130:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b03      	cmp	r3, #3
 800113c:	ddef      	ble.n	800111e <GNSS_ParsePOSLLHData+0x9e>
	}
	GNSS->height = iLong.iLong;
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	for (int var = 0; var < 4; ++var) {
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e00c      	b.n	8001168 <GNSS_ParsePOSLLHData+0xe8>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 22];
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3316      	adds	r3, #22
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 8001154:	4413      	add	r3, r2
 8001156:	7a59      	ldrb	r1, [r3, #9]
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4413      	add	r3, r2
 800115e:	460a      	mov	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3301      	adds	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b03      	cmp	r3, #3
 800116c:	ddef      	ble.n	800114e <GNSS_ParsePOSLLHData+0xce>
	}
	GNSS->hMSL = iLong.iLong;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <GNSS_ParsePOSLLHData+0x168>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e00c      	b.n	8001198 <GNSS_ParsePOSLLHData+0x118>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 26];
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	331a      	adds	r3, #26
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 8001184:	4413      	add	r3, r2
 8001186:	7a59      	ldrb	r1, [r3, #9]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <GNSS_ParsePOSLLHData+0x170>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	460a      	mov	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b03      	cmp	r3, #3
 800119c:	ddef      	ble.n	800117e <GNSS_ParsePOSLLHData+0xfe>
	}
	GNSS->hAcc = uLong.uLong;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <GNSS_ParsePOSLLHData+0x170>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	e00c      	b.n	80011c8 <GNSS_ParsePOSLLHData+0x148>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	331e      	adds	r3, #30
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <GNSS_ParsePOSLLHData+0x164>)
 80011b4:	4413      	add	r3, r2
 80011b6:	7a59      	ldrb	r1, [r3, #9]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <GNSS_ParsePOSLLHData+0x170>)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	460a      	mov	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	ddef      	ble.n	80011ae <GNSS_ParsePOSLLHData+0x12e>
	}
	GNSS->vAcc = uLong.uLong;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <GNSS_ParsePOSLLHData+0x170>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80011d8:	bf00      	nop
 80011da:	3724      	adds	r7, #36	; 0x24
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	20000280 	.word	0x20000280
 80011e8:	2000027c 	.word	0x2000027c
 80011ec:	4b189680 	.word	0x4b189680
 80011f0:	20000324 	.word	0x20000324

080011f4 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	221c      	movs	r2, #28
 8001202:	490f      	ldr	r1, [pc, #60]	; (8001240 <GNSS_LoadConfig+0x4c>)
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fdaf 	bl	8003d68 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 800120a:	20fa      	movs	r0, #250	; 0xfa
 800120c:	f000 fca4 	bl	8001b58 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	221c      	movs	r2, #28
 8001216:	490b      	ldr	r1, [pc, #44]	; (8001244 <GNSS_LoadConfig+0x50>)
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fda5 	bl	8003d68 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 800121e:	20fa      	movs	r0, #250	; 0xfa
 8001220:	f000 fc9a 	bl	8001b58 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	222c      	movs	r2, #44	; 0x2c
 800122a:	4907      	ldr	r1, [pc, #28]	; (8001248 <GNSS_LoadConfig+0x54>)
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fd9b 	bl	8003d68 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 8001232:	20fa      	movs	r0, #250	; 0xfa
 8001234:	f000 fc90 	bl	8001b58 <HAL_Delay>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	2000001c 	.word	0x2000001c
 8001248:	20000038 	.word	0x20000038
 800124c:	00000000 	.word	0x00000000

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 fc19 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f8c3 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f000 f9a7 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001262:	f000 f97f 	bl	8001564 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001266:	f000 f91d 	bl	80014a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800126a:	f000 f94b 	bl	8001504 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GNSS_Init(&GNSS_Handle, &huart1);
 800126e:	4952      	ldr	r1, [pc, #328]	; (80013b8 <main+0x168>)
 8001270:	4852      	ldr	r0, [pc, #328]	; (80013bc <main+0x16c>)
 8001272:	f7ff fca1 	bl	8000bb8 <GNSS_Init>
  HAL_Delay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f000 fc6d 	bl	8001b58 <HAL_Delay>
  GNSS_LoadConfig(&GNSS_Handle);
 800127e:	484f      	ldr	r0, [pc, #316]	; (80013bc <main+0x16c>)
 8001280:	f7ff ffb8 	bl	80011f4 <GNSS_LoadConfig>
  uint32_t Timer = HAL_GetTick();
 8001284:	f000 fc5c 	bl	8001b40 <HAL_GetTick>
 8001288:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((HAL_GetTick() - Timer) > 1000) {
 800128a:	f000 fc59 	bl	8001b40 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001298:	d9f7      	bls.n	800128a <main+0x3a>
	  			GNSS_GetUniqID(&GNSS_Handle);
 800129a:	4848      	ldr	r0, [pc, #288]	; (80013bc <main+0x16c>)
 800129c:	f7ff fd3a 	bl	8000d14 <GNSS_GetUniqID>
	  			GNSS_ParseBuffer(&GNSS_Handle);
 80012a0:	4846      	ldr	r0, [pc, #280]	; (80013bc <main+0x16c>)
 80012a2:	f7ff fcd1 	bl	8000c48 <GNSS_ParseBuffer>
	  			HAL_Delay(250);
 80012a6:	20fa      	movs	r0, #250	; 0xfa
 80012a8:	f000 fc56 	bl	8001b58 <HAL_Delay>
	  			GNSS_GetPVTData(&GNSS_Handle);
 80012ac:	4843      	ldr	r0, [pc, #268]	; (80013bc <main+0x16c>)
 80012ae:	f7ff fd4b 	bl	8000d48 <GNSS_GetPVTData>
	  			GNSS_ParseBuffer(&GNSS_Handle);
 80012b2:	4842      	ldr	r0, [pc, #264]	; (80013bc <main+0x16c>)
 80012b4:	f7ff fcc8 	bl	8000c48 <GNSS_ParseBuffer>
	  			printf("Day: %d-%d-%d \r\n", GNSS_Handle.day, GNSS_Handle.month,GNSS_Handle.year);
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <main+0x16c>)
 80012ba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012be:	4619      	mov	r1, r3
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <main+0x16c>)
 80012c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <main+0x16c>)
 80012ca:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <main+0x170>)
 80012d0:	f004 f8c4 	bl	800545c <iprintf>
	  			printf("Time: %d:%d:%d \r\n", GNSS_Handle.hour, GNSS_Handle.min,GNSS_Handle.sec);
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <main+0x16c>)
 80012d6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80012da:	4619      	mov	r1, r3
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <main+0x16c>)
 80012de:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <main+0x16c>)
 80012e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012ea:	4836      	ldr	r0, [pc, #216]	; (80013c4 <main+0x174>)
 80012ec:	f004 f8b6 	bl	800545c <iprintf>
	  			printf("Status of fix: %d \r\n", GNSS_Handle.fixType);
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <main+0x16c>)
 80012f2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012f6:	4619      	mov	r1, r3
 80012f8:	4833      	ldr	r0, [pc, #204]	; (80013c8 <main+0x178>)
 80012fa:	f004 f8af 	bl	800545c <iprintf>
	  			printf("Latitude: %f \r\n", GNSS_Handle.fLat);
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <main+0x16c>)
 8001300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f927 	bl	8000558 <__aeabi_f2d>
 800130a:	4603      	mov	r3, r0
 800130c:	460c      	mov	r4, r1
 800130e:	461a      	mov	r2, r3
 8001310:	4623      	mov	r3, r4
 8001312:	482e      	ldr	r0, [pc, #184]	; (80013cc <main+0x17c>)
 8001314:	f004 f8a2 	bl	800545c <iprintf>
	  			printf("Longitude: %f \r\n",(float) GNSS_Handle.lon / 10000000.0);
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x16c>)
 800131a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	ee17 0a90 	vmov	r0, s15
 8001328:	f7ff f916 	bl	8000558 <__aeabi_f2d>
 800132c:	a320      	add	r3, pc, #128	; (adr r3, 80013b0 <main+0x160>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff fa93 	bl	800085c <__aeabi_ddiv>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	461a      	mov	r2, r3
 800133c:	4623      	mov	r3, r4
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <main+0x180>)
 8001340:	f004 f88c 	bl	800545c <iprintf>
	  			printf("Height above ellipsoid: %d \r\n", GNSS_Handle.height);
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <main+0x16c>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4619      	mov	r1, r3
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <main+0x184>)
 800134e:	f004 f885 	bl	800545c <iprintf>
	  			printf("Height above mean sea level: %d \r\n", GNSS_Handle.hMSL);
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <main+0x16c>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001358:	4619      	mov	r1, r3
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <main+0x188>)
 800135c:	f004 f87e 	bl	800545c <iprintf>
	  			printf("Ground Speed (2-D): %d \r\n", GNSS_Handle.gSpeed);
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <main+0x16c>)
 8001362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001366:	4619      	mov	r1, r3
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <main+0x18c>)
 800136a:	f004 f877 	bl	800545c <iprintf>
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
	  					GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <main+0x16c>)
 8001370:	791b      	ldrb	r3, [r3, #4]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 8001372:	4618      	mov	r0, r3
	  					GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <main+0x16c>)
 8001376:	795b      	ldrb	r3, [r3, #5]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 8001378:	461c      	mov	r4, r3
	  					GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <main+0x16c>)
 800137c:	799b      	ldrb	r3, [r3, #6]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 800137e:	461d      	mov	r5, r3
	  					GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <main+0x16c>)
 8001382:	79db      	ldrb	r3, [r3, #7]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 8001384:	461a      	mov	r2, r3
	  					GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <main+0x16c>)
 8001388:	7a1b      	ldrb	r3, [r3, #8]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 800138a:	4619      	mov	r1, r3
	  					GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <main+0x16c>)
 800138e:	7a5b      	ldrb	r3, [r3, #9]
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	9101      	str	r1, [sp, #4]
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	462b      	mov	r3, r5
 8001398:	4622      	mov	r2, r4
 800139a:	4601      	mov	r1, r0
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <main+0x190>)
 800139e:	f004 f85d 	bl	800545c <iprintf>
	  			Timer = HAL_GetTick();
 80013a2:	f000 fbcd 	bl	8001b40 <HAL_GetTick>
 80013a6:	6078      	str	r0, [r7, #4]
	  if ((HAL_GetTick() - Timer) > 1000) {
 80013a8:	e76f      	b.n	800128a <main+0x3a>
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	416312d0 	.word	0x416312d0
 80013b8:	200003b0 	.word	0x200003b0
 80013bc:	20000280 	.word	0x20000280
 80013c0:	08007210 	.word	0x08007210
 80013c4:	08007224 	.word	0x08007224
 80013c8:	08007238 	.word	0x08007238
 80013cc:	08007250 	.word	0x08007250
 80013d0:	08007260 	.word	0x08007260
 80013d4:	08007274 	.word	0x08007274
 80013d8:	08007294 	.word	0x08007294
 80013dc:	080072b8 	.word	0x080072b8
 80013e0:	080072d4 	.word	0x080072d4

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a6      	sub	sp, #152	; 0x98
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ee:	2228      	movs	r2, #40	; 0x28
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fbce 	bl	8004b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2258      	movs	r2, #88	; 0x58
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fbc0 	bl	8004b94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141c:	2310      	movs	r3, #16
 800141e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800142c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001430:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f836 	bl	80024b4 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800144e:	f000 f8df 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001462:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001468:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800146c:	2102      	movs	r1, #2
 800146e:	4618      	mov	r0, r3
 8001470:	f001 ff36 	bl	80032e0 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800147a:	f000 f8c9 	bl	8001610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800147e:	2303      	movs	r3, #3
 8001480:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f95d 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001498:	f000 f8ba 	bl	8001610 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3798      	adds	r7, #152	; 0x98
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_USART1_UART_Init+0x5c>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e8:	f002 fb4e 	bl	8003b88 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014f2:	f000 f88d 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003b0 	.word	0x200003b0
 8001500:	40013800 	.word	0x40013800

08001504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_USART2_UART_Init+0x58>)
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <MX_USART2_UART_Init+0x5c>)
 800150c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001510:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART2_UART_Init+0x58>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART2_UART_Init+0x58>)
 8001548:	f002 fb1e 	bl	8003b88 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001552:	f000 f85d 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000430 	.word	0x20000430
 8001560:	40004400 	.word	0x40004400

08001564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DMA_Init+0x48>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DMA_Init+0x48>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_DMA_Init+0x48>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	200e      	movs	r0, #14
 8001588:	f000 fbe3 	bl	8001d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800158c:	200e      	movs	r0, #14
 800158e:	f000 fbfc 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	200f      	movs	r0, #15
 8001598:	f000 fbdb 	bl	8001d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800159c:	200f      	movs	r0, #15
 800159e:	f000 fbf4 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_GPIO_Init+0x5c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <MX_GPIO_Init+0x5c>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_GPIO_Init+0x5c>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_GPIO_Init+0x5c>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <MX_GPIO_Init+0x5c>)
 80015d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_GPIO_Init+0x5c>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_GPIO_Init+0x5c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <MX_GPIO_Init+0x5c>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_GPIO_Init+0x5c>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x44>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x44>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x44>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x44>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x44>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x44>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001656:	2007      	movs	r0, #7
 8001658:	f000 fb70 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a5c      	ldr	r2, [pc, #368]	; (80017f8 <HAL_UART_MspInit+0x190>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d17c      	bne.n	8001784 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <HAL_UART_MspInit+0x194>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_UART_MspInit+0x194>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_UART_MspInit+0x194>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_UART_MspInit+0x194>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_UART_MspInit+0x194>)
 80016a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ac:	6153      	str	r3, [r2, #20]
 80016ae:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_UART_MspInit+0x194>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ba:	2330      	movs	r3, #48	; 0x30
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ca:	2307      	movs	r3, #7
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	484a      	ldr	r0, [pc, #296]	; (8001800 <HAL_UART_MspInit+0x198>)
 80016d6:	f000 fd63 	bl	80021a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <HAL_UART_MspInit+0x1a0>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_UART_MspInit+0x19c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_UART_MspInit+0x19c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_UART_MspInit+0x19c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800170a:	483e      	ldr	r0, [pc, #248]	; (8001804 <HAL_UART_MspInit+0x19c>)
 800170c:	f000 fb57 	bl	8001dbe <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001716:	f7ff ff7b 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a39      	ldr	r2, [pc, #228]	; (8001804 <HAL_UART_MspInit+0x19c>)
 800171e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001720:	4a38      	ldr	r2, [pc, #224]	; (8001804 <HAL_UART_MspInit+0x19c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001728:	4a39      	ldr	r2, [pc, #228]	; (8001810 <HAL_UART_MspInit+0x1a8>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_UART_MspInit+0x1a4>)
 800172e:	2210      	movs	r2, #16
 8001730:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_UART_MspInit+0x1a4>)
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_UART_MspInit+0x1a4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001756:	482d      	ldr	r0, [pc, #180]	; (800180c <HAL_UART_MspInit+0x1a4>)
 8001758:	f000 fb31 	bl	8001dbe <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001762:	f7ff ff55 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a28      	ldr	r2, [pc, #160]	; (800180c <HAL_UART_MspInit+0x1a4>)
 800176a:	669a      	str	r2, [r3, #104]	; 0x68
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <HAL_UART_MspInit+0x1a4>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2025      	movs	r0, #37	; 0x25
 8001778:	f000 faeb 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800177c:	2025      	movs	r0, #37	; 0x25
 800177e:	f000 fb04 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001782:	e035      	b.n	80017f0 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_UART_MspInit+0x1ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d130      	bne.n	80017f0 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_UART_MspInit+0x194>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_UART_MspInit+0x194>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x194>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x194>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_UART_MspInit+0x194>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_UART_MspInit+0x194>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017be:	230c      	movs	r3, #12
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ce:	2307      	movs	r3, #7
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f000 fce0 	bl	80021a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2026      	movs	r0, #38	; 0x26
 80017e6:	f000 fab4 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ea:	2026      	movs	r0, #38	; 0x26
 80017ec:	f000 facd 	bl	8001d8a <HAL_NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	3730      	adds	r7, #48	; 0x30
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000800 	.word	0x48000800
 8001804:	2000036c 	.word	0x2000036c
 8001808:	40020058 	.word	0x40020058
 800180c:	20000328 	.word	0x20000328
 8001810:	40020044 	.word	0x40020044
 8001814:	40004400 	.word	0x40004400

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 f954 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA1_Channel4_IRQHandler+0x10>)
 800187a:	f000 fb84 	bl	8001f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000328 	.word	0x20000328

08001888 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Channel5_IRQHandler+0x10>)
 800188e:	f000 fb7a 	bl	8001f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000036c 	.word	0x2000036c

0800189c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART1_IRQHandler+0x10>)
 80018a2:	f002 fadd 	bl	8003e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003b0 	.word	0x200003b0

080018b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <USART2_IRQHandler+0x10>)
 80018b6:	f002 fad3 	bl	8003e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000430 	.word	0x20000430

080018c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
	}

return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e009      	b.n	8001924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf1      	blt.n	8001910 <_write+0x12>
	}
	return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195e:	605a      	str	r2, [r3, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f003 f8b6 	bl	8004b40 <__errno>
 80019d4:	4602      	mov	r2, r0
 80019d6:	230c      	movs	r3, #12
 80019d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20010000 	.word	0x20010000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	2000026c 	.word	0x2000026c
 8001a08:	200004b8 	.word	0x200004b8

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <SystemInit+0x28>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <SystemInit+0x28>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SystemInit+0x28>)
 8001a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a26:	609a      	str	r2, [r3, #8]
#endif
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a3e:	e003      	b.n	8001a48 <LoopCopyDataInit>

08001a40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a46:	3104      	adds	r1, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a50:	d3f6      	bcc.n	8001a40 <CopyDataInit>
	ldr	r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a54:	e002      	b.n	8001a5c <LoopFillZerobss>

08001a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a58:	f842 3b04 	str.w	r3, [r2], #4

08001a5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <LoopForever+0x16>)
	cmp	r2, r3
 8001a5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a60:	d3f9      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a62:	f7ff ffd3 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f003 f871 	bl	8004b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6a:	f7ff fbf1 	bl	8001250 <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a70:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001a74:	08007600 	.word	0x08007600
	ldr	r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a7c:	20000250 	.word	0x20000250
	ldr	r2, =_sbss
 8001a80:	20000250 	.word	0x20000250
	ldr	r3, = _ebss
 8001a84:	200004b8 	.word	0x200004b8

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f94d 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fdba 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f965 	bl	8001da6 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f92d 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000074 	.word	0x20000074
 8001b10:	2000007c 	.word	0x2000007c
 8001b14:	20000078 	.word	0x20000078

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000007c 	.word	0x2000007c
 8001b3c:	200004b0 	.word	0x200004b0

08001b40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200004b0 	.word	0x200004b0

08001b58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_Delay+0x40>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000007c 	.word	0x2000007c

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff3e 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff31 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e037      	b.n	8001e44 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f97e 	bl	8002128 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}  
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Start_IT+0x20>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e04a      	b.n	8001f02 <HAL_DMA_Start_IT+0xb6>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d13a      	bne.n	8001ef4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f912 	bl	80020cc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 020e 	orr.w	r2, r2, #14
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e00f      	b.n	8001ee2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 020a 	orr.w	r2, r2, #10
 8001ed0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0204 	bic.w	r2, r2, #4
 8001ee0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e005      	b.n	8001f00 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d005      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e027      	b.n	8001f7c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 020e 	bic.w	r2, r2, #14
 8001f3a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
    } 
  }
  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d024      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x72>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0204 	bic.w	r2, r2, #4
 8001fd4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	2104      	movs	r1, #4
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d06a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	e065      	b.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02c      	beq.n	8002062 <HAL_DMA_IRQHandler+0xdc>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d027      	beq.n	8002062 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020a 	bic.w	r2, r2, #10
 800202e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	2102      	movs	r1, #2
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d035      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002060:	e030      	b.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2208      	movs	r2, #8
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d028      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020e 	bic.w	r2, r2, #14
 800208a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
    }
  }
}  
 80020c2:	e7ff      	b.n	80020c4 <HAL_DMA_IRQHandler+0x13e>
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d108      	bne.n	800210c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800210a:	e007      	b.n	800211c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <DMA_CalcBaseAndBitshift+0x60>)
 8002138:	429a      	cmp	r2, r3
 800213a:	d80f      	bhi.n	800215c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <DMA_CalcBaseAndBitshift+0x64>)
 8002144:	4413      	add	r3, r2
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <DMA_CalcBaseAndBitshift+0x68>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <DMA_CalcBaseAndBitshift+0x6c>)
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800215a:	e00e      	b.n	800217a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <DMA_CalcBaseAndBitshift+0x70>)
 8002164:	4413      	add	r3, r2
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <DMA_CalcBaseAndBitshift+0x68>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <DMA_CalcBaseAndBitshift+0x74>)
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40020407 	.word	0x40020407
 800218c:	bffdfff8 	.word	0xbffdfff8
 8002190:	cccccccd 	.word	0xcccccccd
 8002194:	40020000 	.word	0x40020000
 8002198:	bffdfbf8 	.word	0xbffdfbf8
 800219c:	40020400 	.word	0x40020400

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e160      	b.n	8002472 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8152 	beq.w	800246c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d00b      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	2b11      	cmp	r3, #17
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0201 	and.w	r2, r3, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0xea>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b12      	cmp	r3, #18
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	6939      	ldr	r1, [r7, #16]
 80022ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80ac 	beq.w	800246c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232c:	4a59      	ldr	r2, [pc, #356]	; (8002494 <HAL_GPIO_Init+0x2f4>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002356:	d025      	beq.n	80023a4 <HAL_GPIO_Init+0x204>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_GPIO_Init+0x2f8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01f      	beq.n	80023a0 <HAL_GPIO_Init+0x200>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a4e      	ldr	r2, [pc, #312]	; (800249c <HAL_GPIO_Init+0x2fc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d019      	beq.n	800239c <HAL_GPIO_Init+0x1fc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_GPIO_Init+0x300>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1f8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1f4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1f0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1ec>
 8002388:	2306      	movs	r3, #6
 800238a:	e00c      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 800238c:	2307      	movs	r3, #7
 800238e:	e00a      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 8002390:	2305      	movs	r3, #5
 8002392:	e008      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 8002394:	2304      	movs	r3, #4
 8002396:	e006      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 8002398:	2303      	movs	r3, #3
 800239a:	e004      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 800239c:	2302      	movs	r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_GPIO_Init+0x206>
 80023a4:	2300      	movs	r3, #0
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	4093      	lsls	r3, r2
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b6:	4937      	ldr	r1, [pc, #220]	; (8002494 <HAL_GPIO_Init+0x2f4>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_GPIO_Init+0x310>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023e8:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <HAL_GPIO_Init+0x310>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_GPIO_Init+0x310>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002412:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_GPIO_Init+0x310>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_GPIO_Init+0x310>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_GPIO_Init+0x310>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f47f ae97 	bne.w	80021b0 <HAL_GPIO_Init+0x10>
  }
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	48000c00 	.word	0x48000c00
 80024a4:	48001000 	.word	0x48001000
 80024a8:	48001400 	.word	0x48001400
 80024ac:	48001800 	.word	0x48001800
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f000 bf01 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8160 	beq.w	800279e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024de:	4bae      	ldr	r3, [pc, #696]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00c      	beq.n	8002504 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ea:	4bab      	ldr	r3, [pc, #684]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d159      	bne.n	80025aa <HAL_RCC_OscConfig+0xf6>
 80024f6:	4ba8      	ldr	r3, [pc, #672]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d152      	bne.n	80025aa <HAL_RCC_OscConfig+0xf6>
 8002504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002508:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002518:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_RCC_OscConfig+0x82>
 8002530:	4b99      	ldr	r3, [pc, #612]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0xae>
 8002536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800254a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002552:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800255e:	4b8e      	ldr	r3, [pc, #568]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002566:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800256a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002576:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8102 	beq.w	800279c <HAL_RCC_OscConfig+0x2e8>
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 80fc 	bne.w	800279c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f000 be93 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x110>
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e030      	b.n	8002626 <HAL_RCC_OscConfig+0x172>
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x134>
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01e      	b.n	8002626 <HAL_RCC_OscConfig+0x172>
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x15a>
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a64      	ldr	r2, [pc, #400]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e00b      	b.n	8002626 <HAL_RCC_OscConfig+0x172>
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a61      	ldr	r2, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5e      	ldr	r2, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d059      	beq.n	80026e4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fa86 	bl	8001b40 <HAL_GetTick>
 8002634:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263a:	f7ff fa81 	bl	8001b40 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d902      	bls.n	8002650 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	f000 be40 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002664:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x1ce>
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1fa>
 8002682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002686:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800269e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80026b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80026c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ab      	beq.n	800263a <HAL_RCC_OscConfig+0x186>
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fa2c 	bl	8001b40 <HAL_GetTick>
 80026e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7ff fa27 	bl	8001b40 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d902      	bls.n	8002704 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	f000 bde6 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002718:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0x282>
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x2ae>
 8002736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800274a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002752:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0x2e4>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002766:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800276a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002776:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ab      	bne.n	80026ee <HAL_RCC_OscConfig+0x23a>
 8002796:	e002      	b.n	800279e <HAL_RCC_OscConfig+0x2ea>
 8002798:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8170 	beq.w	8002a8e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027ae:	4bd0      	ldr	r3, [pc, #832]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027ba:	4bcd      	ldr	r3, [pc, #820]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d16d      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3ee>
 80027c6:	4bca      	ldr	r3, [pc, #808]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d2:	d166      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3ee>
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80027e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x350>
 80027fe:	4bbc      	ldr	r3, [pc, #752]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e013      	b.n	800282c <HAL_RCC_OscConfig+0x378>
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800281c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002828:	4bb1      	ldr	r3, [pc, #708]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002832:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800283e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x3ba>
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f000 bd31 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	21f8      	movs	r1, #248	; 0xf8
 800287e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002886:	fa91 f1a1 	rbit	r1, r1
 800288a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800288e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002892:	fab1 f181 	clz	r1, r1
 8002896:	b2c9      	uxtb	r1, r1
 8002898:	408b      	lsls	r3, r1
 800289a:	4995      	ldr	r1, [pc, #596]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a0:	e0f5      	b.n	8002a8e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8085 	beq.w	80029b8 <HAL_RCC_OscConfig+0x504>
 80028ae:	2301      	movs	r3, #1
 80028b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80028c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	461a      	mov	r2, r3
 80028d6:	2301      	movs	r3, #1
 80028d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7ff f931 	bl	8001b40 <HAL_GetTick>
 80028de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff f92c 	bl	8001b40 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f000 bceb 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800290c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_RCC_OscConfig+0x476>
 8002924:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	e013      	b.n	8002952 <HAL_RCC_OscConfig+0x49e>
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800293c:	2302      	movs	r3, #2
 800293e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002942:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800294e:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2202      	movs	r2, #2
 8002954:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002958:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800295c:	fa92 f2a2 	rbit	r2, r2
 8002960:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002964:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f042 0220 	orr.w	r2, r2, #32
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f002 021f 	and.w	r2, r2, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0af      	beq.n	80028e4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	21f8      	movs	r1, #248	; 0xf8
 8002994:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800299c:	fa91 f1a1 	rbit	r1, r1
 80029a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80029a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029a8:	fab1 f181 	clz	r1, r1
 80029ac:	b2c9      	uxtb	r1, r1
 80029ae:	408b      	lsls	r3, r1
 80029b0:	494f      	ldr	r1, [pc, #316]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
 80029b6:	e06a      	b.n	8002a8e <HAL_RCC_OscConfig+0x5da>
 80029b8:	2301      	movs	r3, #1
 80029ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80029ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff f8ac 	bl	8001b40 <HAL_GetTick>
 80029e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ee:	f7ff f8a7 	bl	8001b40 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	f000 bc66 	b.w	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x580>
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0x5a8>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a46:	2302      	movs	r3, #2
 8002a48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x63c>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a62:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002a6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1af      	bne.n	80029ee <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80da 	beq.w	8002c52 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d069      	beq.n	8002b7c <HAL_RCC_OscConfig+0x6c8>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002aba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x640>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f835 	bl	8001b40 <HAL_GetTick>
 8002ad6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e00d      	b.n	8002af8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff f830 	bl	8001b40 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d905      	bls.n	8002af8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e3ef      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	10908120 	.word	0x10908120
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3c:	4ba4      	ldr	r3, [pc, #656]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b44:	2102      	movs	r1, #2
 8002b46:	6019      	str	r1, [r3, #0]
 8002b48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f1a3 	rbit	r1, r3
 8002b52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b56:	6019      	str	r1, [r3, #0]
  return result;
 8002b58:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0b0      	beq.n	8002adc <HAL_RCC_OscConfig+0x628>
 8002b7a:	e06a      	b.n	8002c52 <HAL_RCC_OscConfig+0x79e>
 8002b7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b92:	601a      	str	r2, [r3, #0]
  return result;
 8002b94:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b8c      	ldr	r3, [pc, #560]	; (8002dd4 <HAL_RCC_OscConfig+0x920>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2300      	movs	r3, #0
 8002bac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe ffc7 	bl	8001b40 <HAL_GetTick>
 8002bb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	e009      	b.n	8002bcc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe ffc2 	bl	8001b40 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e381      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002bcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002be8:	2202      	movs	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b6e      	ldr	r3, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	6019      	str	r1, [r3, #0]
 8002c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f1a3 	rbit	r1, r3
 8002c2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c2e:	6019      	str	r1, [r3, #0]
  return result;
 8002c30:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1b2      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8157 	beq.w	8002f10 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c68:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d112      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a55      	ldr	r2, [pc, #340]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x924>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x924>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_RCC_OscConfig+0x924>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe ff45 	bl	8001b40 <HAL_GetTick>
 8002cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe ff40 	bl	8001b40 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e2ff      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x924>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x840>
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a39      	ldr	r2, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e02f      	b.n	8002d54 <HAL_RCC_OscConfig+0x8a0>
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x864>
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6213      	str	r3, [r2, #32]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0x8a0>
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x888>
 8002d22:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x8a0>
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06a      	beq.n	8002e34 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe feef 	bl	8001b40 <HAL_GetTick>
 8002d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe feea 	bl	8001b40 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e2a7      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002d80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002db4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x928>
 8002dca:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <HAL_RCC_OscConfig+0x91c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	e013      	b.n	8002df8 <HAL_RCC_OscConfig+0x944>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	10908120 	.word	0x10908120
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002de0:	2202      	movs	r2, #2
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	4bc0      	ldr	r3, [pc, #768]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	6011      	str	r1, [r2, #0]
 8002e00:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	fa92 f1a2 	rbit	r1, r2
 8002e0a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e0e:	6011      	str	r1, [r2, #0]
  return result;
 8002e10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d09a      	beq.n	8002d68 <HAL_RCC_OscConfig+0x8b4>
 8002e32:	e063      	b.n	8002efc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fe84 	bl	8001b40 <HAL_GetTick>
 8002e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe fe7f 	bl	8001b40 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e23c      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002e56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f2a3 	rbit	r2, r3
 8002e68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e84:	601a      	str	r2, [r3, #0]
  return result;
 8002e86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x9f2>
 8002ea0:	4b95      	ldr	r3, [pc, #596]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	e00d      	b.n	8002ec2 <HAL_RCC_OscConfig+0xa0e>
 8002ea6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4b8e      	ldr	r3, [pc, #568]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fa92 f1a2 	rbit	r1, r2
 8002ed4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ed8:	6011      	str	r1, [r2, #0]
  return result;
 8002eda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f002 021f 	and.w	r2, r2, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1a0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a7b      	ldr	r2, [pc, #492]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 81d9 	beq.w	80032ce <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1c:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f000 81a6 	beq.w	8003276 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	f040 811e 	bne.w	8003172 <HAL_RCC_OscConfig+0xcbe>
 8002f36:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f4e:	601a      	str	r2, [r3, #0]
  return result;
 8002f50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fde8 	bl	8001b40 <HAL_GetTick>
 8002f70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fde3 	bl	8001b40 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1a2      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 8002f8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xb10>
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0xb48>
 8002fc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003000:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003004:	6011      	str	r1, [r2, #0]
 8003006:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	fa92 f1a2 	rbit	r1, r2
 8003010:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003014:	6011      	str	r1, [r2, #0]
  return result;
 8003016:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f002 021f 	and.w	r2, r2, #31
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d19e      	bne.n	8002f76 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	f023 020f 	bic.w	r2, r3, #15
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	492c      	ldr	r1, [pc, #176]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8003048:	4313      	orrs	r3, r2
 800304a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a19      	ldr	r1, [r3, #32]
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	430b      	orrs	r3, r1
 8003062:	4925      	ldr	r1, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800306c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003080:	601a      	str	r2, [r3, #0]
  return result;
 8003082:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003086:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003092:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	461a      	mov	r2, r3
 800309a:	2301      	movs	r3, #1
 800309c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fd4f 	bl	8001b40 <HAL_GetTick>
 80030a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a6:	e009      	b.n	80030bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fd4a 	bl	8001b40 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e109      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 80030bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f2a3 	rbit	r2, r3
 80030d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030d4:	601a      	str	r2, [r3, #0]
  return result;
 80030d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0xc48>
 80030f0:	4b01      	ldr	r3, [pc, #4]	; (80030f8 <HAL_RCC_OscConfig+0xc44>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	e01e      	b.n	8003134 <HAL_RCC_OscConfig+0xc80>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800311a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_RCC_OscConfig+0xe28>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003138:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fa92 f1a2 	rbit	r1, r2
 8003148:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800314c:	6011      	str	r1, [r2, #0]
  return result;
 800314e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	f042 0220 	orr.w	r2, r2, #32
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	f002 021f 	and.w	r2, r2, #31
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d09b      	beq.n	80030a8 <HAL_RCC_OscConfig+0xbf4>
 8003170:	e0ad      	b.n	80032ce <HAL_RCC_OscConfig+0xe1a>
 8003172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003176:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800317a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800318a:	601a      	str	r2, [r3, #0]
  return result;
 800318c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003190:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800319c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	2300      	movs	r3, #0
 80031a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fcca 	bl	8001b40 <HAL_GetTick>
 80031ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b0:	e009      	b.n	80031c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe fcc5 	bl	8001b40 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e084      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
 80031c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0xd4c>
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <HAL_RCC_OscConfig+0xe28>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e01b      	b.n	8003238 <HAL_RCC_OscConfig+0xd84>
 8003200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f107 0320 	add.w	r3, r7, #32
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f107 031c 	add.w	r3, r7, #28
 800321e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_OscConfig+0xe28>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f107 0214 	add.w	r2, r7, #20
 800323c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	f107 0214 	add.w	r2, r7, #20
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fa92 f1a2 	rbit	r1, r2
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	6011      	str	r1, [r2, #0]
  return result;
 8003252:	f107 0210 	add.w	r2, r7, #16
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d19e      	bne.n	80031b2 <HAL_RCC_OscConfig+0xcfe>
 8003274:	e02b      	b.n	80032ce <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e025      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0xe28>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_OscConfig+0xe28>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003294:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003298:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d111      	bne.n	80032ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d108      	bne.n	80032ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80032b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b09e      	sub	sp, #120	; 0x78
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e162      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b90      	ldr	r3, [pc, #576]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d910      	bls.n	8003328 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	498b      	ldr	r1, [pc, #556]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b89      	ldr	r3, [pc, #548]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e14a      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	497f      	ldr	r1, [pc, #508]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80dc 	beq.w	800350c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d13c      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xf6>
 800335c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003360:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HAL_RCC_ClockConfig+0xa6>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	e00f      	b.n	80033a6 <HAL_RCC_ClockConfig+0xc6>
 8003386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	667b      	str	r3, [r7, #100]	; 0x64
 8003394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003398:	663b      	str	r3, [r7, #96]	; 0x60
 800339a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ae:	fa92 f2a2 	rbit	r2, r2
 80033b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033b6:	fab2 f282 	clz	r2, r2
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f042 0220 	orr.w	r2, r2, #32
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f002 021f 	and.w	r2, r2, #31
 80033c6:	2101      	movs	r1, #1
 80033c8:	fa01 f202 	lsl.w	r2, r1, r2
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d17b      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0f3      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d13c      	bne.n	8003458 <HAL_RCC_ClockConfig+0x178>
 80033de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_RCC_ClockConfig+0x128>
 8003402:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	e00f      	b.n	8003428 <HAL_RCC_ClockConfig+0x148>
 8003408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
 8003416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
 800341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342c:	63ba      	str	r2, [r7, #56]	; 0x38
 800342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003430:	fa92 f2a2 	rbit	r2, r2
 8003434:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f042 0220 	orr.w	r2, r2, #32
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f002 021f 	and.w	r2, r2, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f202 	lsl.w	r2, r1, r2
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d13a      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b2      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
 8003458:	2302      	movs	r3, #2
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1a0>
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e00d      	b.n	800349c <HAL_RCC_ClockConfig+0x1bc>
 8003480:	2302      	movs	r3, #2
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	2302      	movs	r3, #2
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2202      	movs	r2, #2
 800349e:	61ba      	str	r2, [r7, #24]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	fa92 f2a2 	rbit	r2, r2
 80034a6:	617a      	str	r2, [r7, #20]
  return result;
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	fab2 f282 	clz	r2, r2
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f042 0220 	orr.w	r2, r2, #32
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f002 021f 	and.w	r2, r2, #31
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e079      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	491a      	ldr	r1, [pc, #104]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fb30 	bl	8001b40 <HAL_GetTick>
 80034e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fe fb2c 	bl	8001b40 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e061      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d214      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4906      	ldr	r1, [pc, #24]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e040      	b.n	80035be <HAL_RCC_ClockConfig+0x2de>
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	491a      	ldr	r1, [pc, #104]	; (80035c8 <HAL_RCC_ClockConfig+0x2e8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356e:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4912      	ldr	r1, [pc, #72]	; (80035c8 <HAL_RCC_ClockConfig+0x2e8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003582:	f000 f829 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003586:	4601      	mov	r1, r0
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_RCC_ClockConfig+0x2e8>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003590:	22f0      	movs	r2, #240	; 0xf0
 8003592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	fa92 f2a2 	rbit	r2, r2
 800359a:	60fa      	str	r2, [r7, #12]
  return result;
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	40d3      	lsrs	r3, r2
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x2ec>)
 80035a8:	5cd3      	ldrb	r3, [r2, r3]
 80035aa:	fa21 f303 	lsr.w	r3, r1, r3
 80035ae:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <HAL_RCC_ClockConfig+0x2f0>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_RCC_ClockConfig+0x2f4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fa7e 	bl	8001ab8 <HAL_InitTick>
  
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3778      	adds	r7, #120	; 0x78
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	080072fc 	.word	0x080072fc
 80035d0:	20000074 	.word	0x20000074
 80035d4:	20000078 	.word	0x20000078

080035d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b08b      	sub	sp, #44	; 0x2c
 80035dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x30>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x36>
 8003606:	e03f      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800360a:	623b      	str	r3, [r7, #32]
      break;
 800360c:	e03f      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003614:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003618:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	fa92 f2a2 	rbit	r2, r2
 8003620:	607a      	str	r2, [r7, #4]
  return result;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fab2 f282 	clz	r2, r2
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	40d3      	lsrs	r3, r2
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	220f      	movs	r2, #15
 800363c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	fa92 f2a2 	rbit	r2, r2
 8003644:	60fa      	str	r2, [r7, #12]
  return result;
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	fab2 f282 	clz	r2, r2
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	40d3      	lsrs	r3, r2
 8003650:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003660:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	e007      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fbb2 f2f3 	udiv	r2, r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	623b      	str	r3, [r7, #32]
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800368a:	623b      	str	r3, [r7, #32]
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	6a3b      	ldr	r3, [r7, #32]
}
 8003690:	4618      	mov	r0, r3
 8003692:	372c      	adds	r7, #44	; 0x2c
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	08007314 	.word	0x08007314
 80036a8:	08007324 	.word	0x08007324

080036ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000074 	.word	0x20000074

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036ca:	f7ff ffef 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036ce:	4601      	mov	r1, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	603a      	str	r2, [r7, #0]
  return result;
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	0800730c 	.word	0x0800730c

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800370e:	f7ff ffcd 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 8003712:	4601      	mov	r1, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800371c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	603a      	str	r2, [r7, #0]
  return result;
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	40d3      	lsrs	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	0800730c 	.word	0x0800730c

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b092      	sub	sp, #72	; 0x48
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80d7 	beq.w	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003770:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10e      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4a4a      	ldr	r2, [pc, #296]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003786:	61d3      	str	r3, [r2, #28]
 8003788:	4b48      	ldr	r3, [pc, #288]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a41      	ldr	r2, [pc, #260]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe f9c5 	bl	8001b40 <HAL_GetTick>
 80037b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe f9c1 	bl	8001b40 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b64      	cmp	r3, #100	; 0x64
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1d6      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8084 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d07c      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	461a      	mov	r2, r3
 8003822:	2301      	movs	r3, #1
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04b      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f971 	bl	8001b40 <HAL_GetTick>
 800385e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe f96d 	bl	8001b40 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e180      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003878:	2302      	movs	r3, #2
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	2302      	movs	r3, #2
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	61fb      	str	r3, [r7, #28]
  return result;
 8003890:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d108      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038a6:	4b01      	ldr	r3, [pc, #4]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	e00d      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	10908100 	.word	0x10908100
 80038b8:	2302      	movs	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	4ba0      	ldr	r3, [pc, #640]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2202      	movs	r2, #2
 80038ca:	613a      	str	r2, [r7, #16]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	fa92 f2a2 	rbit	r2, r2
 80038d2:	60fa      	str	r2, [r7, #12]
  return result;
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	fab2 f282 	clz	r2, r2
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	f002 021f 	and.w	r2, r2, #31
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0b7      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038f2:	4b95      	ldr	r3, [pc, #596]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4992      	ldr	r1, [pc, #584]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4b8e      	ldr	r3, [pc, #568]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4a8d      	ldr	r2, [pc, #564]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003924:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	f023 0203 	bic.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4985      	ldr	r1, [pc, #532]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003942:	4b81      	ldr	r3, [pc, #516]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	497e      	ldr	r1, [pc, #504]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003960:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	4976      	ldr	r1, [pc, #472]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b72      	ldr	r3, [pc, #456]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	496f      	ldr	r1, [pc, #444]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	4967      	ldr	r1, [pc, #412]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f023 0220 	bic.w	r2, r3, #32
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4960      	ldr	r1, [pc, #384]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d8:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	4958      	ldr	r1, [pc, #352]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f6:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4951      	ldr	r1, [pc, #324]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	4949      	ldr	r1, [pc, #292]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a32:	4b45      	ldr	r3, [pc, #276]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4942      	ldr	r1, [pc, #264]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a50:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	493a      	ldr	r1, [pc, #232]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4933      	ldr	r1, [pc, #204]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	492b      	ldr	r1, [pc, #172]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4924      	ldr	r1, [pc, #144]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	491c      	ldr	r1, [pc, #112]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	4915      	ldr	r1, [pc, #84]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	490d      	ldr	r1, [pc, #52]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	4906      	ldr	r1, [pc, #24]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b40:	4b01      	ldr	r3, [pc, #4]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	490b      	ldr	r1, [pc, #44]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	4904      	ldr	r1, [pc, #16]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3748      	adds	r7, #72	; 0x48
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e040      	b.n	8003c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fd5c 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fab8 	bl	800413c <UART_SetConfig>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e022      	b.n	8003c1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fcc6 	bl	8004570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd4d 	bl	80046b4 <UART_CheckIdleState>
 8003c1a:	4603      	mov	r3, r0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	f040 808a 	bne.w	8003d50 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Receive_IT+0x24>
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e082      	b.n	8003d52 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Receive_IT+0x36>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e07b      	b.n	8003d52 <HAL_UART_Receive_IT+0x12e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d10e      	bne.n	8003ca6 <HAL_UART_Receive_IT+0x82>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_UART_Receive_IT+0x78>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c9a:	e02d      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca4:	e028      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_UART_Receive_IT+0xa6>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Receive_IT+0x9c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbe:	e01b      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	227f      	movs	r2, #127	; 0x7f
 8003cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc8:	e016      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_UART_Receive_IT+0xcc>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_UART_Receive_IT+0xc2>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	227f      	movs	r2, #127	; 0x7f
 8003ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce4:	e008      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	223f      	movs	r2, #63	; 0x3f
 8003cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cee:	e003      	b.n	8003cf8 <HAL_UART_Receive_IT+0xd4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2222      	movs	r2, #34	; 0x22
 8003d02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d107      	bne.n	8003d2e <HAL_UART_Receive_IT+0x10a>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_UART_Receive_IT+0x13c>)
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d2c:	e002      	b.n	8003d34 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <HAL_UART_Receive_IT+0x140>)
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	08004a85 	.word	0x08004a85
 8003d64:	080049df 	.word	0x080049df

08003d68 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d164      	bne.n	8003e48 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit_DMA+0x22>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e05d      	b.n	8003e4a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Transmit_DMA+0x34>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e056      	b.n	8003e4a <HAL_UART_Transmit_DMA+0xe2>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02a      	beq.n	8003e24 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd2:	4a20      	ldr	r2, [pc, #128]	; (8003e54 <HAL_UART_Transmit_DMA+0xec>)
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_UART_Transmit_DMA+0xf0>)
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de2:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_UART_Transmit_DMA+0xf4>)
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dea:	2200      	movs	r2, #0
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4619      	mov	r1, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3328      	adds	r3, #40	; 0x28
 8003dfe:	461a      	mov	r2, r3
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	f7fe f823 	bl	8001e4c <HAL_DMA_Start_IT>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2210      	movs	r2, #16
 8003e10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e012      	b.n	8003e4a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e42:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	0800489f 	.word	0x0800489f
 8003e58:	080048ed 	.word	0x080048ed
 8003e5c:	08004909 	.word	0x08004909

08003e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d113      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00e      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8114 	beq.w	80040d6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      }
      return;
 8003eb6:	e10e      	b.n	80040d6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80d6 	beq.w	800406c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80cb 	beq.w	800406c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <HAL_UART_IRQHandler+0x9e>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00e      	beq.n	8003f26 <HAL_UART_IRQHandler+0xc6>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2202      	movs	r2, #2
 8003f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1e:	f043 0204 	orr.w	r2, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <HAL_UART_IRQHandler+0xee>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f46:	f043 0202 	orr.w	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f78:	f043 0208 	orr.w	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <HAL_UART_IRQHandler+0x14a>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8093 	beq.w	80040da <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fdc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d004      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d031      	beq.n	800405a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fc31 	bl	800485e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d123      	bne.n	8004052 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d013      	beq.n	800404a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004026:	4a30      	ldr	r2, [pc, #192]	; (80040e8 <HAL_UART_IRQHandler+0x288>)
 8004028:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd ff6b 	bl	8001f0a <HAL_DMA_Abort_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00e      	b.n	8004068 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f86c 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00a      	b.n	8004068 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f868 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e006      	b.n	8004068 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f864 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004066:	e038      	b.n	80040da <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	bf00      	nop
    return;
 800406a:	e036      	b.n	80040da <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_UART_IRQHandler+0x232>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fd4d 	bl	8004b2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004090:	e026      	b.n	80040e0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00d      	beq.n	80040b8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d017      	beq.n	80040de <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
    }
    return;
 80040b6:	e012      	b.n	80040de <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00e      	beq.n	80040e0 <HAL_UART_IRQHandler+0x280>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fc6d 	bl	80049ac <UART_EndTransmit_IT>
    return;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_UART_IRQHandler+0x280>
      return;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_UART_IRQHandler+0x280>
    return;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_UART_IRQHandler+0x280>
    return;
 80040de:	bf00      	nop
  }

}
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08004981 	.word	0x08004981

080040ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4bac      	ldr	r3, [pc, #688]	; (800441c <UART_SetConfig+0x2e0>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	430b      	orrs	r3, r1
 8004176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a9a      	ldr	r2, [pc, #616]	; (8004420 <UART_SetConfig+0x2e4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d121      	bne.n	8004200 <UART_SetConfig+0xc4>
 80041bc:	4b99      	ldr	r3, [pc, #612]	; (8004424 <UART_SetConfig+0x2e8>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d817      	bhi.n	80041f8 <UART_SetConfig+0xbc>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <UART_SetConfig+0x94>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041ed 	.word	0x080041ed
 80041d8:	080041f3 	.word	0x080041f3
 80041dc:	080041e7 	.word	0x080041e7
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0b2      	b.n	800434c <UART_SetConfig+0x210>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e0af      	b.n	800434c <UART_SetConfig+0x210>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e0ac      	b.n	800434c <UART_SetConfig+0x210>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e0a9      	b.n	800434c <UART_SetConfig+0x210>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	bf00      	nop
 80041fe:	e0a5      	b.n	800434c <UART_SetConfig+0x210>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a88      	ldr	r2, [pc, #544]	; (8004428 <UART_SetConfig+0x2ec>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d123      	bne.n	8004252 <UART_SetConfig+0x116>
 800420a:	4b86      	ldr	r3, [pc, #536]	; (8004424 <UART_SetConfig+0x2e8>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004216:	d012      	beq.n	800423e <UART_SetConfig+0x102>
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d802      	bhi.n	8004224 <UART_SetConfig+0xe8>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <UART_SetConfig+0xf6>
 8004222:	e012      	b.n	800424a <UART_SetConfig+0x10e>
 8004224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004228:	d00c      	beq.n	8004244 <UART_SetConfig+0x108>
 800422a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0xfc>
 8004230:	e00b      	b.n	800424a <UART_SetConfig+0x10e>
 8004232:	2300      	movs	r3, #0
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e089      	b.n	800434c <UART_SetConfig+0x210>
 8004238:	2302      	movs	r3, #2
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e086      	b.n	800434c <UART_SetConfig+0x210>
 800423e:	2304      	movs	r3, #4
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e083      	b.n	800434c <UART_SetConfig+0x210>
 8004244:	2308      	movs	r3, #8
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e080      	b.n	800434c <UART_SetConfig+0x210>
 800424a:	2310      	movs	r3, #16
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	bf00      	nop
 8004250:	e07c      	b.n	800434c <UART_SetConfig+0x210>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a75      	ldr	r2, [pc, #468]	; (800442c <UART_SetConfig+0x2f0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d123      	bne.n	80042a4 <UART_SetConfig+0x168>
 800425c:	4b71      	ldr	r3, [pc, #452]	; (8004424 <UART_SetConfig+0x2e8>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004268:	d012      	beq.n	8004290 <UART_SetConfig+0x154>
 800426a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426e:	d802      	bhi.n	8004276 <UART_SetConfig+0x13a>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <UART_SetConfig+0x148>
 8004274:	e012      	b.n	800429c <UART_SetConfig+0x160>
 8004276:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800427a:	d00c      	beq.n	8004296 <UART_SetConfig+0x15a>
 800427c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004280:	d003      	beq.n	800428a <UART_SetConfig+0x14e>
 8004282:	e00b      	b.n	800429c <UART_SetConfig+0x160>
 8004284:	2300      	movs	r3, #0
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e060      	b.n	800434c <UART_SetConfig+0x210>
 800428a:	2302      	movs	r3, #2
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e05d      	b.n	800434c <UART_SetConfig+0x210>
 8004290:	2304      	movs	r3, #4
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e05a      	b.n	800434c <UART_SetConfig+0x210>
 8004296:	2308      	movs	r3, #8
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e057      	b.n	800434c <UART_SetConfig+0x210>
 800429c:	2310      	movs	r3, #16
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	bf00      	nop
 80042a2:	e053      	b.n	800434c <UART_SetConfig+0x210>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a61      	ldr	r2, [pc, #388]	; (8004430 <UART_SetConfig+0x2f4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d123      	bne.n	80042f6 <UART_SetConfig+0x1ba>
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <UART_SetConfig+0x2e8>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ba:	d012      	beq.n	80042e2 <UART_SetConfig+0x1a6>
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d802      	bhi.n	80042c8 <UART_SetConfig+0x18c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <UART_SetConfig+0x19a>
 80042c6:	e012      	b.n	80042ee <UART_SetConfig+0x1b2>
 80042c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042cc:	d00c      	beq.n	80042e8 <UART_SetConfig+0x1ac>
 80042ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x1a0>
 80042d4:	e00b      	b.n	80042ee <UART_SetConfig+0x1b2>
 80042d6:	2300      	movs	r3, #0
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e037      	b.n	800434c <UART_SetConfig+0x210>
 80042dc:	2302      	movs	r3, #2
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e034      	b.n	800434c <UART_SetConfig+0x210>
 80042e2:	2304      	movs	r3, #4
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e031      	b.n	800434c <UART_SetConfig+0x210>
 80042e8:	2308      	movs	r3, #8
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e02e      	b.n	800434c <UART_SetConfig+0x210>
 80042ee:	2310      	movs	r3, #16
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	bf00      	nop
 80042f4:	e02a      	b.n	800434c <UART_SetConfig+0x210>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4e      	ldr	r2, [pc, #312]	; (8004434 <UART_SetConfig+0x2f8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d123      	bne.n	8004348 <UART_SetConfig+0x20c>
 8004300:	4b48      	ldr	r3, [pc, #288]	; (8004424 <UART_SetConfig+0x2e8>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430c:	d012      	beq.n	8004334 <UART_SetConfig+0x1f8>
 800430e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004312:	d802      	bhi.n	800431a <UART_SetConfig+0x1de>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <UART_SetConfig+0x1ec>
 8004318:	e012      	b.n	8004340 <UART_SetConfig+0x204>
 800431a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800431e:	d00c      	beq.n	800433a <UART_SetConfig+0x1fe>
 8004320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004324:	d003      	beq.n	800432e <UART_SetConfig+0x1f2>
 8004326:	e00b      	b.n	8004340 <UART_SetConfig+0x204>
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e00e      	b.n	800434c <UART_SetConfig+0x210>
 800432e:	2302      	movs	r3, #2
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x210>
 8004334:	2304      	movs	r3, #4
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x210>
 800433a:	2308      	movs	r3, #8
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e005      	b.n	800434c <UART_SetConfig+0x210>
 8004340:	2310      	movs	r3, #16
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	bf00      	nop
 8004346:	e001      	b.n	800434c <UART_SetConfig+0x210>
 8004348:	2310      	movs	r3, #16
 800434a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004354:	f040 8090 	bne.w	8004478 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004358:	7ffb      	ldrb	r3, [r7, #31]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d86c      	bhi.n	8004438 <UART_SetConfig+0x2fc>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0x228>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004389 	.word	0x08004389
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043c9 	.word	0x080043c9
 8004370:	08004439 	.word	0x08004439
 8004374:	080043e5 	.word	0x080043e5
 8004378:	08004439 	.word	0x08004439
 800437c:	08004439 	.word	0x08004439
 8004380:	08004439 	.word	0x08004439
 8004384:	08004405 	.word	0x08004405
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7ff f99c 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 800438c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	005a      	lsls	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	61bb      	str	r3, [r7, #24]
        break;
 80043a6:	e04a      	b.n	800443e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7ff f9ae 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 80043ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	005a      	lsls	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	61bb      	str	r3, [r7, #24]
        break;
 80043c6:	e03a      	b.n	800443e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6852      	ldr	r2, [r2, #4]
 80043da:	fbb3 f3f2 	udiv	r3, r3, r2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	61bb      	str	r3, [r7, #24]
        break;
 80043e2:	e02c      	b.n	800443e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e4:	f7ff f8f8 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 80043e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
        break;
 8004402:	e01c      	b.n	800443e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	61bb      	str	r3, [r7, #24]
        break;
 800441a:	e010      	b.n	800443e <UART_SetConfig+0x302>
 800441c:	efff69f3 	.word	0xefff69f3
 8004420:	40013800 	.word	0x40013800
 8004424:	40021000 	.word	0x40021000
 8004428:	40004400 	.word	0x40004400
 800442c:	40004800 	.word	0x40004800
 8004430:	40004c00 	.word	0x40004c00
 8004434:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
        break;
 800443c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d916      	bls.n	8004472 <UART_SetConfig+0x336>
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d212      	bcs.n	8004472 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f023 030f 	bic.w	r3, r3, #15
 8004454:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	b29a      	uxth	r2, r3
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	4313      	orrs	r3, r2
 8004466:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	897a      	ldrh	r2, [r7, #10]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e072      	b.n	8004558 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
 8004476:	e06f      	b.n	8004558 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d85b      	bhi.n	8004536 <UART_SetConfig+0x3fa>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x348>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044e5 	.word	0x080044e5
 8004490:	08004537 	.word	0x08004537
 8004494:	08004501 	.word	0x08004501
 8004498:	08004537 	.word	0x08004537
 800449c:	08004537 	.word	0x08004537
 80044a0:	08004537 	.word	0x08004537
 80044a4:	0800451f 	.word	0x0800451f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7ff f90c 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 80044ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085a      	lsrs	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e03a      	b.n	800453c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c6:	f7ff f91f 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 80044ca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085a      	lsrs	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	61bb      	str	r3, [r7, #24]
        break;
 80044e2:	e02b      	b.n	800453c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80044ee:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6852      	ldr	r2, [r2, #4]
 80044f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	61bb      	str	r3, [r7, #24]
        break;
 80044fe:	e01d      	b.n	800453c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004500:	f7ff f86a 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8004504:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085a      	lsrs	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	61bb      	str	r3, [r7, #24]
        break;
 800451c:	e00e      	b.n	800453c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	b29b      	uxth	r3, r3
 8004532:	61bb      	str	r3, [r7, #24]
        break;
 8004534:	e002      	b.n	800453c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
        break;
 800453a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d908      	bls.n	8004554 <UART_SetConfig+0x418>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d204      	bcs.n	8004554 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	e001      	b.n	8004558 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop

08004570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01a      	beq.n	8004686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d10a      	bne.n	8004686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046c2:	f7fd fa3d 	bl	8001b40 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d10e      	bne.n	80046f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f82a 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e020      	b.n	8004736 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d10e      	bne.n	8004720 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f814 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e00a      	b.n	8004736 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	e05d      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d059      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fd f9f2 	bl	8001b40 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <UART_WaitOnFlagUntilTimeout+0x30>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d11b      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800477c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e042      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02b      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d123      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d092      	beq.n	8004750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800484a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004874:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d014      	beq.n	80048de <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ca:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048da:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048dc:	e002      	b.n	80048e4 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fc04 	bl	80040ec <HAL_UART_TxCpltCallback>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fc00 	bl	8004100 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004920:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d109      	bne.n	8004944 <UART_DMAError+0x3c>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b21      	cmp	r3, #33	; 0x21
 8004934:	d106      	bne.n	8004944 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f7ff ff78 	bl	8004834 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d109      	bne.n	8004966 <UART_DMAError+0x5e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b22      	cmp	r3, #34	; 0x22
 8004956:	d106      	bne.n	8004966 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f7ff ff7c 	bl	800485e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	f7ff fbd8 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fbc2 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fb8b 	bl	80040ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f2:	2b22      	cmp	r3, #34	; 0x22
 80049f4:	d13a      	bne.n	8004a6c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049fc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049fe:	89bb      	ldrh	r3, [r7, #12]
 8004a00:	b2d9      	uxtb	r1, r3
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d121      	bne.n	8004a7c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fb55 	bl	8004114 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a6a:	e007      	b.n	8004a7c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	619a      	str	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a92:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a98:	2b22      	cmp	r3, #34	; 0x22
 8004a9a:	d13a      	bne.n	8004b12 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aa2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004aaa:	89ba      	ldrh	r2, [r7, #12]
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d121      	bne.n	8004b22 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fb02 	bl	8004114 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b10:	e007      	b.n	8004b22 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0208 	orr.w	r2, r2, #8
 8004b20:	619a      	str	r2, [r3, #24]
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <__errno>:
 8004b40:	4b01      	ldr	r3, [pc, #4]	; (8004b48 <__errno+0x8>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000080 	.word	0x20000080

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4e0d      	ldr	r6, [pc, #52]	; (8004b84 <__libc_init_array+0x38>)
 8004b50:	4c0d      	ldr	r4, [pc, #52]	; (8004b88 <__libc_init_array+0x3c>)
 8004b52:	1ba4      	subs	r4, r4, r6
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	2500      	movs	r5, #0
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	4e0b      	ldr	r6, [pc, #44]	; (8004b8c <__libc_init_array+0x40>)
 8004b5e:	4c0c      	ldr	r4, [pc, #48]	; (8004b90 <__libc_init_array+0x44>)
 8004b60:	f002 fb48 	bl	80071f4 <_init>
 8004b64:	1ba4      	subs	r4, r4, r6
 8004b66:	10a4      	asrs	r4, r4, #2
 8004b68:	2500      	movs	r5, #0
 8004b6a:	42a5      	cmp	r5, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b74:	4798      	blx	r3
 8004b76:	3501      	adds	r5, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7e:	4798      	blx	r3
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	080075f8 	.word	0x080075f8
 8004b88:	080075f8 	.word	0x080075f8
 8004b8c:	080075f8 	.word	0x080075f8
 8004b90:	080075fc 	.word	0x080075fc

08004b94 <memset>:
 8004b94:	4402      	add	r2, r0
 8004b96:	4603      	mov	r3, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <__cvt>:
 8004ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	ec55 4b10 	vmov	r4, r5, d0
 8004bac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004bae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	460e      	mov	r6, r1
 8004bb6:	4691      	mov	r9, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	bfb8      	it	lt
 8004bbc:	4622      	movlt	r2, r4
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	f027 0720 	bic.w	r7, r7, #32
 8004bc4:	bfbb      	ittet	lt
 8004bc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bca:	461d      	movlt	r5, r3
 8004bcc:	2300      	movge	r3, #0
 8004bce:	232d      	movlt	r3, #45	; 0x2d
 8004bd0:	bfb8      	it	lt
 8004bd2:	4614      	movlt	r4, r2
 8004bd4:	2f46      	cmp	r7, #70	; 0x46
 8004bd6:	700b      	strb	r3, [r1, #0]
 8004bd8:	d004      	beq.n	8004be4 <__cvt+0x40>
 8004bda:	2f45      	cmp	r7, #69	; 0x45
 8004bdc:	d100      	bne.n	8004be0 <__cvt+0x3c>
 8004bde:	3601      	adds	r6, #1
 8004be0:	2102      	movs	r1, #2
 8004be2:	e000      	b.n	8004be6 <__cvt+0x42>
 8004be4:	2103      	movs	r1, #3
 8004be6:	ab03      	add	r3, sp, #12
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	ab02      	add	r3, sp, #8
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4632      	mov	r2, r6
 8004bf0:	4653      	mov	r3, sl
 8004bf2:	ec45 4b10 	vmov	d0, r4, r5
 8004bf6:	f000 fcd7 	bl	80055a8 <_dtoa_r>
 8004bfa:	2f47      	cmp	r7, #71	; 0x47
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	d102      	bne.n	8004c06 <__cvt+0x62>
 8004c00:	f019 0f01 	tst.w	r9, #1
 8004c04:	d026      	beq.n	8004c54 <__cvt+0xb0>
 8004c06:	2f46      	cmp	r7, #70	; 0x46
 8004c08:	eb08 0906 	add.w	r9, r8, r6
 8004c0c:	d111      	bne.n	8004c32 <__cvt+0x8e>
 8004c0e:	f898 3000 	ldrb.w	r3, [r8]
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d10a      	bne.n	8004c2c <__cvt+0x88>
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	f7fb ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c22:	b918      	cbnz	r0, 8004c2c <__cvt+0x88>
 8004c24:	f1c6 0601 	rsb	r6, r6, #1
 8004c28:	f8ca 6000 	str.w	r6, [sl]
 8004c2c:	f8da 3000 	ldr.w	r3, [sl]
 8004c30:	4499      	add	r9, r3
 8004c32:	2200      	movs	r2, #0
 8004c34:	2300      	movs	r3, #0
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3e:	b938      	cbnz	r0, 8004c50 <__cvt+0xac>
 8004c40:	2230      	movs	r2, #48	; 0x30
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	454b      	cmp	r3, r9
 8004c46:	d205      	bcs.n	8004c54 <__cvt+0xb0>
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	9103      	str	r1, [sp, #12]
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e7f8      	b.n	8004c42 <__cvt+0x9e>
 8004c50:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c58:	eba3 0308 	sub.w	r3, r3, r8
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	b004      	add	sp, #16
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c66 <__exponent>:
 8004c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	bfba      	itte	lt
 8004c6e:	4249      	neglt	r1, r1
 8004c70:	232d      	movlt	r3, #45	; 0x2d
 8004c72:	232b      	movge	r3, #43	; 0x2b
 8004c74:	2909      	cmp	r1, #9
 8004c76:	f804 2b02 	strb.w	r2, [r4], #2
 8004c7a:	7043      	strb	r3, [r0, #1]
 8004c7c:	dd20      	ble.n	8004cc0 <__exponent+0x5a>
 8004c7e:	f10d 0307 	add.w	r3, sp, #7
 8004c82:	461f      	mov	r7, r3
 8004c84:	260a      	movs	r6, #10
 8004c86:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c8a:	fb06 1115 	mls	r1, r6, r5, r1
 8004c8e:	3130      	adds	r1, #48	; 0x30
 8004c90:	2d09      	cmp	r5, #9
 8004c92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c96:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	dc09      	bgt.n	8004cb2 <__exponent+0x4c>
 8004c9e:	3130      	adds	r1, #48	; 0x30
 8004ca0:	3b02      	subs	r3, #2
 8004ca2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ca6:	42bb      	cmp	r3, r7
 8004ca8:	4622      	mov	r2, r4
 8004caa:	d304      	bcc.n	8004cb6 <__exponent+0x50>
 8004cac:	1a10      	subs	r0, r2, r0
 8004cae:	b003      	add	sp, #12
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	e7e7      	b.n	8004c86 <__exponent+0x20>
 8004cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cba:	f804 2b01 	strb.w	r2, [r4], #1
 8004cbe:	e7f2      	b.n	8004ca6 <__exponent+0x40>
 8004cc0:	2330      	movs	r3, #48	; 0x30
 8004cc2:	4419      	add	r1, r3
 8004cc4:	7083      	strb	r3, [r0, #2]
 8004cc6:	1d02      	adds	r2, r0, #4
 8004cc8:	70c1      	strb	r1, [r0, #3]
 8004cca:	e7ef      	b.n	8004cac <__exponent+0x46>

08004ccc <_printf_float>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b08d      	sub	sp, #52	; 0x34
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004cd8:	4616      	mov	r6, r2
 8004cda:	461f      	mov	r7, r3
 8004cdc:	4605      	mov	r5, r0
 8004cde:	f001 fae5 	bl	80062ac <_localeconv_r>
 8004ce2:	6803      	ldr	r3, [r0, #0]
 8004ce4:	9304      	str	r3, [sp, #16]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fa7a 	bl	80001e0 <strlen>
 8004cec:	2300      	movs	r3, #0
 8004cee:	930a      	str	r3, [sp, #40]	; 0x28
 8004cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf4:	9005      	str	r0, [sp, #20]
 8004cf6:	3307      	adds	r3, #7
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	f103 0208 	add.w	r2, r3, #8
 8004d00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d04:	f8d4 b000 	ldr.w	fp, [r4]
 8004d08:	f8c8 2000 	str.w	r2, [r8]
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d14:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d1c:	9307      	str	r3, [sp, #28]
 8004d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	4ba7      	ldr	r3, [pc, #668]	; (8004fc4 <_printf_float+0x2f8>)
 8004d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2c:	f7fb ff06 	bl	8000b3c <__aeabi_dcmpun>
 8004d30:	bb70      	cbnz	r0, 8004d90 <_printf_float+0xc4>
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	4ba3      	ldr	r3, [pc, #652]	; (8004fc4 <_printf_float+0x2f8>)
 8004d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d3c:	f7fb fee0 	bl	8000b00 <__aeabi_dcmple>
 8004d40:	bb30      	cbnz	r0, 8004d90 <_printf_float+0xc4>
 8004d42:	2200      	movs	r2, #0
 8004d44:	2300      	movs	r3, #0
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fecf 	bl	8000aec <__aeabi_dcmplt>
 8004d4e:	b110      	cbz	r0, 8004d56 <_printf_float+0x8a>
 8004d50:	232d      	movs	r3, #45	; 0x2d
 8004d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d56:	4a9c      	ldr	r2, [pc, #624]	; (8004fc8 <_printf_float+0x2fc>)
 8004d58:	4b9c      	ldr	r3, [pc, #624]	; (8004fcc <_printf_float+0x300>)
 8004d5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d5e:	bf8c      	ite	hi
 8004d60:	4690      	movhi	r8, r2
 8004d62:	4698      	movls	r8, r3
 8004d64:	2303      	movs	r3, #3
 8004d66:	f02b 0204 	bic.w	r2, fp, #4
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	f04f 0900 	mov.w	r9, #0
 8004d72:	9700      	str	r7, [sp, #0]
 8004d74:	4633      	mov	r3, r6
 8004d76:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 f9e6 	bl	800514c <_printf_common>
 8004d80:	3001      	adds	r0, #1
 8004d82:	f040 808d 	bne.w	8004ea0 <_printf_float+0x1d4>
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	b00d      	add	sp, #52	; 0x34
 8004d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d90:	4642      	mov	r2, r8
 8004d92:	464b      	mov	r3, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fed0 	bl	8000b3c <__aeabi_dcmpun>
 8004d9c:	b110      	cbz	r0, 8004da4 <_printf_float+0xd8>
 8004d9e:	4a8c      	ldr	r2, [pc, #560]	; (8004fd0 <_printf_float+0x304>)
 8004da0:	4b8c      	ldr	r3, [pc, #560]	; (8004fd4 <_printf_float+0x308>)
 8004da2:	e7da      	b.n	8004d5a <_printf_float+0x8e>
 8004da4:	6861      	ldr	r1, [r4, #4]
 8004da6:	1c4b      	adds	r3, r1, #1
 8004da8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004dac:	a80a      	add	r0, sp, #40	; 0x28
 8004dae:	d13e      	bne.n	8004e2e <_printf_float+0x162>
 8004db0:	2306      	movs	r3, #6
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	2300      	movs	r3, #0
 8004db6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004dba:	ab09      	add	r3, sp, #36	; 0x24
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	ec49 8b10 	vmov	d0, r8, r9
 8004dc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	f8cd a004 	str.w	sl, [sp, #4]
 8004dcc:	6861      	ldr	r1, [r4, #4]
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f7ff fee8 	bl	8004ba4 <__cvt>
 8004dd4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004dd8:	2b47      	cmp	r3, #71	; 0x47
 8004dda:	4680      	mov	r8, r0
 8004ddc:	d109      	bne.n	8004df2 <_printf_float+0x126>
 8004dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de0:	1cd8      	adds	r0, r3, #3
 8004de2:	db02      	blt.n	8004dea <_printf_float+0x11e>
 8004de4:	6862      	ldr	r2, [r4, #4]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	dd47      	ble.n	8004e7a <_printf_float+0x1ae>
 8004dea:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dee:	fa5f fa8a 	uxtb.w	sl, sl
 8004df2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004df8:	d824      	bhi.n	8004e44 <_printf_float+0x178>
 8004dfa:	3901      	subs	r1, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e02:	9109      	str	r1, [sp, #36]	; 0x24
 8004e04:	f7ff ff2f 	bl	8004c66 <__exponent>
 8004e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e0a:	1813      	adds	r3, r2, r0
 8004e0c:	2a01      	cmp	r2, #1
 8004e0e:	4681      	mov	r9, r0
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	dc02      	bgt.n	8004e1a <_printf_float+0x14e>
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	07d1      	lsls	r1, r2, #31
 8004e18:	d501      	bpl.n	8004e1e <_printf_float+0x152>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0a5      	beq.n	8004d72 <_printf_float+0xa6>
 8004e26:	232d      	movs	r3, #45	; 0x2d
 8004e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2c:	e7a1      	b.n	8004d72 <_printf_float+0xa6>
 8004e2e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e32:	f000 8177 	beq.w	8005124 <_printf_float+0x458>
 8004e36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e3a:	d1bb      	bne.n	8004db4 <_printf_float+0xe8>
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d1b9      	bne.n	8004db4 <_printf_float+0xe8>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e7b6      	b.n	8004db2 <_printf_float+0xe6>
 8004e44:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e48:	d119      	bne.n	8004e7e <_printf_float+0x1b2>
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	dd0c      	ble.n	8004e6a <_printf_float+0x19e>
 8004e50:	6121      	str	r1, [r4, #16]
 8004e52:	b913      	cbnz	r3, 8004e5a <_printf_float+0x18e>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	07d2      	lsls	r2, r2, #31
 8004e58:	d502      	bpl.n	8004e60 <_printf_float+0x194>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	440b      	add	r3, r1
 8004e5e:	6123      	str	r3, [r4, #16]
 8004e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e62:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e64:	f04f 0900 	mov.w	r9, #0
 8004e68:	e7d9      	b.n	8004e1e <_printf_float+0x152>
 8004e6a:	b913      	cbnz	r3, 8004e72 <_printf_float+0x1a6>
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	07d0      	lsls	r0, r2, #31
 8004e70:	d501      	bpl.n	8004e76 <_printf_float+0x1aa>
 8004e72:	3302      	adds	r3, #2
 8004e74:	e7f3      	b.n	8004e5e <_printf_float+0x192>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e7f1      	b.n	8004e5e <_printf_float+0x192>
 8004e7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e82:	4293      	cmp	r3, r2
 8004e84:	db05      	blt.n	8004e92 <_printf_float+0x1c6>
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	07d1      	lsls	r1, r2, #31
 8004e8c:	d5e8      	bpl.n	8004e60 <_printf_float+0x194>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	e7e5      	b.n	8004e5e <_printf_float+0x192>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfd4      	ite	le
 8004e96:	f1c3 0302 	rsble	r3, r3, #2
 8004e9a:	2301      	movgt	r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	e7de      	b.n	8004e5e <_printf_float+0x192>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	055a      	lsls	r2, r3, #21
 8004ea4:	d407      	bmi.n	8004eb6 <_printf_float+0x1ea>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d12b      	bne.n	8004f0c <_printf_float+0x240>
 8004eb4:	e767      	b.n	8004d86 <_printf_float+0xba>
 8004eb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004eba:	f240 80dc 	bls.w	8005076 <_printf_float+0x3aa>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec6:	f7fb fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d033      	beq.n	8004f36 <_printf_float+0x26a>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4a41      	ldr	r2, [pc, #260]	; (8004fd8 <_printf_float+0x30c>)
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f af54 	beq.w	8004d86 <_printf_float+0xba>
 8004ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	db02      	blt.n	8004eec <_printf_float+0x220>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	07d8      	lsls	r0, r3, #31
 8004eea:	d50f      	bpl.n	8004f0c <_printf_float+0x240>
 8004eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f af45 	beq.w	8004d86 <_printf_float+0xba>
 8004efc:	f04f 0800 	mov.w	r8, #0
 8004f00:	f104 091a 	add.w	r9, r4, #26
 8004f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	4543      	cmp	r3, r8
 8004f0a:	dc09      	bgt.n	8004f20 <_printf_float+0x254>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	079b      	lsls	r3, r3, #30
 8004f10:	f100 8103 	bmi.w	800511a <_printf_float+0x44e>
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	bfb8      	it	lt
 8004f1c:	4618      	movlt	r0, r3
 8004f1e:	e734      	b.n	8004d8a <_printf_float+0xbe>
 8004f20:	2301      	movs	r3, #1
 8004f22:	464a      	mov	r2, r9
 8004f24:	4631      	mov	r1, r6
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b8      	blx	r7
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	f43f af2b 	beq.w	8004d86 <_printf_float+0xba>
 8004f30:	f108 0801 	add.w	r8, r8, #1
 8004f34:	e7e6      	b.n	8004f04 <_printf_float+0x238>
 8004f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dc2b      	bgt.n	8004f94 <_printf_float+0x2c8>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <_printf_float+0x30c>)
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f af1d 	beq.w	8004d86 <_printf_float+0xba>
 8004f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4e:	b923      	cbnz	r3, 8004f5a <_printf_float+0x28e>
 8004f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f52:	b913      	cbnz	r3, 8004f5a <_printf_float+0x28e>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07d9      	lsls	r1, r3, #31
 8004f58:	d5d8      	bpl.n	8004f0c <_printf_float+0x240>
 8004f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f af0e 	beq.w	8004d86 <_printf_float+0xba>
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	f104 0a1a 	add.w	sl, r4, #26
 8004f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f74:	425b      	negs	r3, r3
 8004f76:	454b      	cmp	r3, r9
 8004f78:	dc01      	bgt.n	8004f7e <_printf_float+0x2b2>
 8004f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7c:	e794      	b.n	8004ea8 <_printf_float+0x1dc>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4652      	mov	r2, sl
 8004f82:	4631      	mov	r1, r6
 8004f84:	4628      	mov	r0, r5
 8004f86:	47b8      	blx	r7
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f43f aefc 	beq.w	8004d86 <_printf_float+0xba>
 8004f8e:	f109 0901 	add.w	r9, r9, #1
 8004f92:	e7ee      	b.n	8004f72 <_printf_float+0x2a6>
 8004f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bfa8      	it	ge
 8004f9c:	461a      	movge	r2, r3
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	4691      	mov	r9, r2
 8004fa2:	dd07      	ble.n	8004fb4 <_printf_float+0x2e8>
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4642      	mov	r2, r8
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f aee9 	beq.w	8004d86 <_printf_float+0xba>
 8004fb4:	f104 031a 	add.w	r3, r4, #26
 8004fb8:	f04f 0b00 	mov.w	fp, #0
 8004fbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc0:	9306      	str	r3, [sp, #24]
 8004fc2:	e015      	b.n	8004ff0 <_printf_float+0x324>
 8004fc4:	7fefffff 	.word	0x7fefffff
 8004fc8:	0800733c 	.word	0x0800733c
 8004fcc:	08007338 	.word	0x08007338
 8004fd0:	08007344 	.word	0x08007344
 8004fd4:	08007340 	.word	0x08007340
 8004fd8:	08007348 	.word	0x08007348
 8004fdc:	2301      	movs	r3, #1
 8004fde:	9a06      	ldr	r2, [sp, #24]
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f aecd 	beq.w	8004d86 <_printf_float+0xba>
 8004fec:	f10b 0b01 	add.w	fp, fp, #1
 8004ff0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ff4:	ebaa 0309 	sub.w	r3, sl, r9
 8004ff8:	455b      	cmp	r3, fp
 8004ffa:	dcef      	bgt.n	8004fdc <_printf_float+0x310>
 8004ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005000:	429a      	cmp	r2, r3
 8005002:	44d0      	add	r8, sl
 8005004:	db15      	blt.n	8005032 <_printf_float+0x366>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	07da      	lsls	r2, r3, #31
 800500a:	d412      	bmi.n	8005032 <_printf_float+0x366>
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005010:	eba3 020a 	sub.w	r2, r3, sl
 8005014:	eba3 0a01 	sub.w	sl, r3, r1
 8005018:	4592      	cmp	sl, r2
 800501a:	bfa8      	it	ge
 800501c:	4692      	movge	sl, r2
 800501e:	f1ba 0f00 	cmp.w	sl, #0
 8005022:	dc0e      	bgt.n	8005042 <_printf_float+0x376>
 8005024:	f04f 0800 	mov.w	r8, #0
 8005028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800502c:	f104 091a 	add.w	r9, r4, #26
 8005030:	e019      	b.n	8005066 <_printf_float+0x39a>
 8005032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	d1e5      	bne.n	800500c <_printf_float+0x340>
 8005040:	e6a1      	b.n	8004d86 <_printf_float+0xba>
 8005042:	4653      	mov	r3, sl
 8005044:	4642      	mov	r2, r8
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	d1e9      	bne.n	8005024 <_printf_float+0x358>
 8005050:	e699      	b.n	8004d86 <_printf_float+0xba>
 8005052:	2301      	movs	r3, #1
 8005054:	464a      	mov	r2, r9
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	f43f ae92 	beq.w	8004d86 <_printf_float+0xba>
 8005062:	f108 0801 	add.w	r8, r8, #1
 8005066:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	eba3 030a 	sub.w	r3, r3, sl
 8005070:	4543      	cmp	r3, r8
 8005072:	dcee      	bgt.n	8005052 <_printf_float+0x386>
 8005074:	e74a      	b.n	8004f0c <_printf_float+0x240>
 8005076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005078:	2a01      	cmp	r2, #1
 800507a:	dc01      	bgt.n	8005080 <_printf_float+0x3b4>
 800507c:	07db      	lsls	r3, r3, #31
 800507e:	d53a      	bpl.n	80050f6 <_printf_float+0x42a>
 8005080:	2301      	movs	r3, #1
 8005082:	4642      	mov	r2, r8
 8005084:	4631      	mov	r1, r6
 8005086:	4628      	mov	r0, r5
 8005088:	47b8      	blx	r7
 800508a:	3001      	adds	r0, #1
 800508c:	f43f ae7b 	beq.w	8004d86 <_printf_float+0xba>
 8005090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f108 0801 	add.w	r8, r8, #1
 80050a0:	f43f ae71 	beq.w	8004d86 <_printf_float+0xba>
 80050a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a6:	2200      	movs	r2, #0
 80050a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80050ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050b0:	2300      	movs	r3, #0
 80050b2:	f7fb fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80050b6:	b9c8      	cbnz	r0, 80050ec <_printf_float+0x420>
 80050b8:	4653      	mov	r3, sl
 80050ba:	4642      	mov	r2, r8
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	d10e      	bne.n	80050e4 <_printf_float+0x418>
 80050c6:	e65e      	b.n	8004d86 <_printf_float+0xba>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4652      	mov	r2, sl
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f ae57 	beq.w	8004d86 <_printf_float+0xba>
 80050d8:	f108 0801 	add.w	r8, r8, #1
 80050dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	4543      	cmp	r3, r8
 80050e2:	dcf1      	bgt.n	80050c8 <_printf_float+0x3fc>
 80050e4:	464b      	mov	r3, r9
 80050e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050ea:	e6de      	b.n	8004eaa <_printf_float+0x1de>
 80050ec:	f04f 0800 	mov.w	r8, #0
 80050f0:	f104 0a1a 	add.w	sl, r4, #26
 80050f4:	e7f2      	b.n	80050dc <_printf_float+0x410>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7df      	b.n	80050ba <_printf_float+0x3ee>
 80050fa:	2301      	movs	r3, #1
 80050fc:	464a      	mov	r2, r9
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	f43f ae3e 	beq.w	8004d86 <_printf_float+0xba>
 800510a:	f108 0801 	add.w	r8, r8, #1
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	4543      	cmp	r3, r8
 8005116:	dcf0      	bgt.n	80050fa <_printf_float+0x42e>
 8005118:	e6fc      	b.n	8004f14 <_printf_float+0x248>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	f104 0919 	add.w	r9, r4, #25
 8005122:	e7f4      	b.n	800510e <_printf_float+0x442>
 8005124:	2900      	cmp	r1, #0
 8005126:	f43f ae8b 	beq.w	8004e40 <_printf_float+0x174>
 800512a:	2300      	movs	r3, #0
 800512c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005130:	ab09      	add	r3, sp, #36	; 0x24
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	ec49 8b10 	vmov	d0, r8, r9
 8005138:	6022      	str	r2, [r4, #0]
 800513a:	f8cd a004 	str.w	sl, [sp, #4]
 800513e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff fd2e 	bl	8004ba4 <__cvt>
 8005148:	4680      	mov	r8, r0
 800514a:	e648      	b.n	8004dde <_printf_float+0x112>

0800514c <_printf_common>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	4691      	mov	r9, r2
 8005152:	461f      	mov	r7, r3
 8005154:	688a      	ldr	r2, [r1, #8]
 8005156:	690b      	ldr	r3, [r1, #16]
 8005158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800515c:	4293      	cmp	r3, r2
 800515e:	bfb8      	it	lt
 8005160:	4613      	movlt	r3, r2
 8005162:	f8c9 3000 	str.w	r3, [r9]
 8005166:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	b112      	cbz	r2, 8005176 <_printf_common+0x2a>
 8005170:	3301      	adds	r3, #1
 8005172:	f8c9 3000 	str.w	r3, [r9]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	0699      	lsls	r1, r3, #26
 800517a:	bf42      	ittt	mi
 800517c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005180:	3302      	addmi	r3, #2
 8005182:	f8c9 3000 	strmi.w	r3, [r9]
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	f015 0506 	ands.w	r5, r5, #6
 800518c:	d107      	bne.n	800519e <_printf_common+0x52>
 800518e:	f104 0a19 	add.w	sl, r4, #25
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	f8d9 2000 	ldr.w	r2, [r9]
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	42ab      	cmp	r3, r5
 800519c:	dc28      	bgt.n	80051f0 <_printf_common+0xa4>
 800519e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	3300      	adds	r3, #0
 80051a6:	bf18      	it	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	0692      	lsls	r2, r2, #26
 80051ac:	d42d      	bmi.n	800520a <_printf_common+0xbe>
 80051ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b2:	4639      	mov	r1, r7
 80051b4:	4630      	mov	r0, r6
 80051b6:	47c0      	blx	r8
 80051b8:	3001      	adds	r0, #1
 80051ba:	d020      	beq.n	80051fe <_printf_common+0xb2>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	68e5      	ldr	r5, [r4, #12]
 80051c0:	f8d9 2000 	ldr.w	r2, [r9]
 80051c4:	f003 0306 	and.w	r3, r3, #6
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	bf08      	it	eq
 80051cc:	1aad      	subeq	r5, r5, r2
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	6922      	ldr	r2, [r4, #16]
 80051d2:	bf0c      	ite	eq
 80051d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d8:	2500      	movne	r5, #0
 80051da:	4293      	cmp	r3, r2
 80051dc:	bfc4      	itt	gt
 80051de:	1a9b      	subgt	r3, r3, r2
 80051e0:	18ed      	addgt	r5, r5, r3
 80051e2:	f04f 0900 	mov.w	r9, #0
 80051e6:	341a      	adds	r4, #26
 80051e8:	454d      	cmp	r5, r9
 80051ea:	d11a      	bne.n	8005222 <_printf_common+0xd6>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e008      	b.n	8005202 <_printf_common+0xb6>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4652      	mov	r2, sl
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d103      	bne.n	8005206 <_printf_common+0xba>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005206:	3501      	adds	r5, #1
 8005208:	e7c3      	b.n	8005192 <_printf_common+0x46>
 800520a:	18e1      	adds	r1, r4, r3
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	2030      	movs	r0, #48	; 0x30
 8005210:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005214:	4422      	add	r2, r4
 8005216:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800521a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800521e:	3302      	adds	r3, #2
 8005220:	e7c5      	b.n	80051ae <_printf_common+0x62>
 8005222:	2301      	movs	r3, #1
 8005224:	4622      	mov	r2, r4
 8005226:	4639      	mov	r1, r7
 8005228:	4630      	mov	r0, r6
 800522a:	47c0      	blx	r8
 800522c:	3001      	adds	r0, #1
 800522e:	d0e6      	beq.n	80051fe <_printf_common+0xb2>
 8005230:	f109 0901 	add.w	r9, r9, #1
 8005234:	e7d8      	b.n	80051e8 <_printf_common+0x9c>
	...

08005238 <_printf_i>:
 8005238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800523c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005240:	460c      	mov	r4, r1
 8005242:	7e09      	ldrb	r1, [r1, #24]
 8005244:	b085      	sub	sp, #20
 8005246:	296e      	cmp	r1, #110	; 0x6e
 8005248:	4617      	mov	r7, r2
 800524a:	4606      	mov	r6, r0
 800524c:	4698      	mov	r8, r3
 800524e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005250:	f000 80b3 	beq.w	80053ba <_printf_i+0x182>
 8005254:	d822      	bhi.n	800529c <_printf_i+0x64>
 8005256:	2963      	cmp	r1, #99	; 0x63
 8005258:	d036      	beq.n	80052c8 <_printf_i+0x90>
 800525a:	d80a      	bhi.n	8005272 <_printf_i+0x3a>
 800525c:	2900      	cmp	r1, #0
 800525e:	f000 80b9 	beq.w	80053d4 <_printf_i+0x19c>
 8005262:	2958      	cmp	r1, #88	; 0x58
 8005264:	f000 8083 	beq.w	800536e <_printf_i+0x136>
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005270:	e032      	b.n	80052d8 <_printf_i+0xa0>
 8005272:	2964      	cmp	r1, #100	; 0x64
 8005274:	d001      	beq.n	800527a <_printf_i+0x42>
 8005276:	2969      	cmp	r1, #105	; 0x69
 8005278:	d1f6      	bne.n	8005268 <_printf_i+0x30>
 800527a:	6820      	ldr	r0, [r4, #0]
 800527c:	6813      	ldr	r3, [r2, #0]
 800527e:	0605      	lsls	r5, r0, #24
 8005280:	f103 0104 	add.w	r1, r3, #4
 8005284:	d52a      	bpl.n	80052dc <_printf_i+0xa4>
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6011      	str	r1, [r2, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	da03      	bge.n	8005296 <_printf_i+0x5e>
 800528e:	222d      	movs	r2, #45	; 0x2d
 8005290:	425b      	negs	r3, r3
 8005292:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005296:	486f      	ldr	r0, [pc, #444]	; (8005454 <_printf_i+0x21c>)
 8005298:	220a      	movs	r2, #10
 800529a:	e039      	b.n	8005310 <_printf_i+0xd8>
 800529c:	2973      	cmp	r1, #115	; 0x73
 800529e:	f000 809d 	beq.w	80053dc <_printf_i+0x1a4>
 80052a2:	d808      	bhi.n	80052b6 <_printf_i+0x7e>
 80052a4:	296f      	cmp	r1, #111	; 0x6f
 80052a6:	d020      	beq.n	80052ea <_printf_i+0xb2>
 80052a8:	2970      	cmp	r1, #112	; 0x70
 80052aa:	d1dd      	bne.n	8005268 <_printf_i+0x30>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	f043 0320 	orr.w	r3, r3, #32
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	e003      	b.n	80052be <_printf_i+0x86>
 80052b6:	2975      	cmp	r1, #117	; 0x75
 80052b8:	d017      	beq.n	80052ea <_printf_i+0xb2>
 80052ba:	2978      	cmp	r1, #120	; 0x78
 80052bc:	d1d4      	bne.n	8005268 <_printf_i+0x30>
 80052be:	2378      	movs	r3, #120	; 0x78
 80052c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052c4:	4864      	ldr	r0, [pc, #400]	; (8005458 <_printf_i+0x220>)
 80052c6:	e055      	b.n	8005374 <_printf_i+0x13c>
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	1d19      	adds	r1, r3, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d8:	2301      	movs	r3, #1
 80052da:	e08c      	b.n	80053f6 <_printf_i+0x1be>
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6011      	str	r1, [r2, #0]
 80052e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e4:	bf18      	it	ne
 80052e6:	b21b      	sxthne	r3, r3
 80052e8:	e7cf      	b.n	800528a <_printf_i+0x52>
 80052ea:	6813      	ldr	r3, [r2, #0]
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	1d18      	adds	r0, r3, #4
 80052f0:	6010      	str	r0, [r2, #0]
 80052f2:	0628      	lsls	r0, r5, #24
 80052f4:	d501      	bpl.n	80052fa <_printf_i+0xc2>
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	e002      	b.n	8005300 <_printf_i+0xc8>
 80052fa:	0668      	lsls	r0, r5, #25
 80052fc:	d5fb      	bpl.n	80052f6 <_printf_i+0xbe>
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x21c>)
 8005302:	296f      	cmp	r1, #111	; 0x6f
 8005304:	bf14      	ite	ne
 8005306:	220a      	movne	r2, #10
 8005308:	2208      	moveq	r2, #8
 800530a:	2100      	movs	r1, #0
 800530c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005310:	6865      	ldr	r5, [r4, #4]
 8005312:	60a5      	str	r5, [r4, #8]
 8005314:	2d00      	cmp	r5, #0
 8005316:	f2c0 8095 	blt.w	8005444 <_printf_i+0x20c>
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	f021 0104 	bic.w	r1, r1, #4
 8005320:	6021      	str	r1, [r4, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d13d      	bne.n	80053a2 <_printf_i+0x16a>
 8005326:	2d00      	cmp	r5, #0
 8005328:	f040 808e 	bne.w	8005448 <_printf_i+0x210>
 800532c:	4665      	mov	r5, ip
 800532e:	2a08      	cmp	r2, #8
 8005330:	d10b      	bne.n	800534a <_printf_i+0x112>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d508      	bpl.n	800534a <_printf_i+0x112>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	bfde      	ittt	le
 8005340:	2330      	movle	r3, #48	; 0x30
 8005342:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005346:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534a:	ebac 0305 	sub.w	r3, ip, r5
 800534e:	6123      	str	r3, [r4, #16]
 8005350:	f8cd 8000 	str.w	r8, [sp]
 8005354:	463b      	mov	r3, r7
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff fef6 	bl	800514c <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14d      	bne.n	8005400 <_printf_i+0x1c8>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	b005      	add	sp, #20
 800536a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800536e:	4839      	ldr	r0, [pc, #228]	; (8005454 <_printf_i+0x21c>)
 8005370:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005374:	6813      	ldr	r3, [r2, #0]
 8005376:	6821      	ldr	r1, [r4, #0]
 8005378:	1d1d      	adds	r5, r3, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6015      	str	r5, [r2, #0]
 800537e:	060a      	lsls	r2, r1, #24
 8005380:	d50b      	bpl.n	800539a <_printf_i+0x162>
 8005382:	07ca      	lsls	r2, r1, #31
 8005384:	bf44      	itt	mi
 8005386:	f041 0120 	orrmi.w	r1, r1, #32
 800538a:	6021      	strmi	r1, [r4, #0]
 800538c:	b91b      	cbnz	r3, 8005396 <_printf_i+0x15e>
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	f022 0220 	bic.w	r2, r2, #32
 8005394:	6022      	str	r2, [r4, #0]
 8005396:	2210      	movs	r2, #16
 8005398:	e7b7      	b.n	800530a <_printf_i+0xd2>
 800539a:	064d      	lsls	r5, r1, #25
 800539c:	bf48      	it	mi
 800539e:	b29b      	uxthmi	r3, r3
 80053a0:	e7ef      	b.n	8005382 <_printf_i+0x14a>
 80053a2:	4665      	mov	r5, ip
 80053a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80053a8:	fb02 3311 	mls	r3, r2, r1, r3
 80053ac:	5cc3      	ldrb	r3, [r0, r3]
 80053ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053b2:	460b      	mov	r3, r1
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d1f5      	bne.n	80053a4 <_printf_i+0x16c>
 80053b8:	e7b9      	b.n	800532e <_printf_i+0xf6>
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	6825      	ldr	r5, [r4, #0]
 80053be:	6961      	ldr	r1, [r4, #20]
 80053c0:	1d18      	adds	r0, r3, #4
 80053c2:	6010      	str	r0, [r2, #0]
 80053c4:	0628      	lsls	r0, r5, #24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	d501      	bpl.n	80053ce <_printf_i+0x196>
 80053ca:	6019      	str	r1, [r3, #0]
 80053cc:	e002      	b.n	80053d4 <_printf_i+0x19c>
 80053ce:	066a      	lsls	r2, r5, #25
 80053d0:	d5fb      	bpl.n	80053ca <_printf_i+0x192>
 80053d2:	8019      	strh	r1, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	4665      	mov	r5, ip
 80053da:	e7b9      	b.n	8005350 <_printf_i+0x118>
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	1d19      	adds	r1, r3, #4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	681d      	ldr	r5, [r3, #0]
 80053e4:	6862      	ldr	r2, [r4, #4]
 80053e6:	2100      	movs	r1, #0
 80053e8:	4628      	mov	r0, r5
 80053ea:	f7fa ff01 	bl	80001f0 <memchr>
 80053ee:	b108      	cbz	r0, 80053f4 <_printf_i+0x1bc>
 80053f0:	1b40      	subs	r0, r0, r5
 80053f2:	6060      	str	r0, [r4, #4]
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	6123      	str	r3, [r4, #16]
 80053f8:	2300      	movs	r3, #0
 80053fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fe:	e7a7      	b.n	8005350 <_printf_i+0x118>
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	462a      	mov	r2, r5
 8005404:	4639      	mov	r1, r7
 8005406:	4630      	mov	r0, r6
 8005408:	47c0      	blx	r8
 800540a:	3001      	adds	r0, #1
 800540c:	d0aa      	beq.n	8005364 <_printf_i+0x12c>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	079b      	lsls	r3, r3, #30
 8005412:	d413      	bmi.n	800543c <_printf_i+0x204>
 8005414:	68e0      	ldr	r0, [r4, #12]
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	4298      	cmp	r0, r3
 800541a:	bfb8      	it	lt
 800541c:	4618      	movlt	r0, r3
 800541e:	e7a3      	b.n	8005368 <_printf_i+0x130>
 8005420:	2301      	movs	r3, #1
 8005422:	464a      	mov	r2, r9
 8005424:	4639      	mov	r1, r7
 8005426:	4630      	mov	r0, r6
 8005428:	47c0      	blx	r8
 800542a:	3001      	adds	r0, #1
 800542c:	d09a      	beq.n	8005364 <_printf_i+0x12c>
 800542e:	3501      	adds	r5, #1
 8005430:	68e3      	ldr	r3, [r4, #12]
 8005432:	9a03      	ldr	r2, [sp, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	42ab      	cmp	r3, r5
 8005438:	dcf2      	bgt.n	8005420 <_printf_i+0x1e8>
 800543a:	e7eb      	b.n	8005414 <_printf_i+0x1dc>
 800543c:	2500      	movs	r5, #0
 800543e:	f104 0919 	add.w	r9, r4, #25
 8005442:	e7f5      	b.n	8005430 <_printf_i+0x1f8>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ac      	bne.n	80053a2 <_printf_i+0x16a>
 8005448:	7803      	ldrb	r3, [r0, #0]
 800544a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800544e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005452:	e76c      	b.n	800532e <_printf_i+0xf6>
 8005454:	0800734a 	.word	0x0800734a
 8005458:	0800735b 	.word	0x0800735b

0800545c <iprintf>:
 800545c:	b40f      	push	{r0, r1, r2, r3}
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <iprintf+0x2c>)
 8005460:	b513      	push	{r0, r1, r4, lr}
 8005462:	681c      	ldr	r4, [r3, #0]
 8005464:	b124      	cbz	r4, 8005470 <iprintf+0x14>
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	b913      	cbnz	r3, 8005470 <iprintf+0x14>
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fe94 	bl	8006198 <__sinit>
 8005470:	ab05      	add	r3, sp, #20
 8005472:	9a04      	ldr	r2, [sp, #16]
 8005474:	68a1      	ldr	r1, [r4, #8]
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	4620      	mov	r0, r4
 800547a:	f001 faf3 	bl	8006a64 <_vfiprintf_r>
 800547e:	b002      	add	sp, #8
 8005480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005484:	b004      	add	sp, #16
 8005486:	4770      	bx	lr
 8005488:	20000080 	.word	0x20000080

0800548c <quorem>:
 800548c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	6903      	ldr	r3, [r0, #16]
 8005492:	690c      	ldr	r4, [r1, #16]
 8005494:	42a3      	cmp	r3, r4
 8005496:	4680      	mov	r8, r0
 8005498:	f2c0 8082 	blt.w	80055a0 <quorem+0x114>
 800549c:	3c01      	subs	r4, #1
 800549e:	f101 0714 	add.w	r7, r1, #20
 80054a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80054a6:	f100 0614 	add.w	r6, r0, #20
 80054aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80054b2:	eb06 030c 	add.w	r3, r6, ip
 80054b6:	3501      	adds	r5, #1
 80054b8:	eb07 090c 	add.w	r9, r7, ip
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	fbb0 f5f5 	udiv	r5, r0, r5
 80054c2:	b395      	cbz	r5, 800552a <quorem+0x9e>
 80054c4:	f04f 0a00 	mov.w	sl, #0
 80054c8:	4638      	mov	r0, r7
 80054ca:	46b6      	mov	lr, r6
 80054cc:	46d3      	mov	fp, sl
 80054ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80054d2:	b293      	uxth	r3, r2
 80054d4:	fb05 a303 	mla	r3, r5, r3, sl
 80054d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ebab 0303 	sub.w	r3, fp, r3
 80054e2:	0c12      	lsrs	r2, r2, #16
 80054e4:	f8de b000 	ldr.w	fp, [lr]
 80054e8:	fb05 a202 	mla	r2, r5, r2, sl
 80054ec:	fa13 f38b 	uxtah	r3, r3, fp
 80054f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80054f4:	fa1f fb82 	uxth.w	fp, r2
 80054f8:	f8de 2000 	ldr.w	r2, [lr]
 80054fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800550a:	4581      	cmp	r9, r0
 800550c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005510:	f84e 3b04 	str.w	r3, [lr], #4
 8005514:	d2db      	bcs.n	80054ce <quorem+0x42>
 8005516:	f856 300c 	ldr.w	r3, [r6, ip]
 800551a:	b933      	cbnz	r3, 800552a <quorem+0x9e>
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	3b04      	subs	r3, #4
 8005520:	429e      	cmp	r6, r3
 8005522:	461a      	mov	r2, r3
 8005524:	d330      	bcc.n	8005588 <quorem+0xfc>
 8005526:	f8c8 4010 	str.w	r4, [r8, #16]
 800552a:	4640      	mov	r0, r8
 800552c:	f001 f8f4 	bl	8006718 <__mcmp>
 8005530:	2800      	cmp	r0, #0
 8005532:	db25      	blt.n	8005580 <quorem+0xf4>
 8005534:	3501      	adds	r5, #1
 8005536:	4630      	mov	r0, r6
 8005538:	f04f 0c00 	mov.w	ip, #0
 800553c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005540:	f8d0 e000 	ldr.w	lr, [r0]
 8005544:	b293      	uxth	r3, r2
 8005546:	ebac 0303 	sub.w	r3, ip, r3
 800554a:	0c12      	lsrs	r2, r2, #16
 800554c:	fa13 f38e 	uxtah	r3, r3, lr
 8005550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005558:	b29b      	uxth	r3, r3
 800555a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800555e:	45b9      	cmp	r9, r7
 8005560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005564:	f840 3b04 	str.w	r3, [r0], #4
 8005568:	d2e8      	bcs.n	800553c <quorem+0xb0>
 800556a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800556e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005572:	b92a      	cbnz	r2, 8005580 <quorem+0xf4>
 8005574:	3b04      	subs	r3, #4
 8005576:	429e      	cmp	r6, r3
 8005578:	461a      	mov	r2, r3
 800557a:	d30b      	bcc.n	8005594 <quorem+0x108>
 800557c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005580:	4628      	mov	r0, r5
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	3b04      	subs	r3, #4
 800558c:	2a00      	cmp	r2, #0
 800558e:	d1ca      	bne.n	8005526 <quorem+0x9a>
 8005590:	3c01      	subs	r4, #1
 8005592:	e7c5      	b.n	8005520 <quorem+0x94>
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	3b04      	subs	r3, #4
 8005598:	2a00      	cmp	r2, #0
 800559a:	d1ef      	bne.n	800557c <quorem+0xf0>
 800559c:	3c01      	subs	r4, #1
 800559e:	e7ea      	b.n	8005576 <quorem+0xea>
 80055a0:	2000      	movs	r0, #0
 80055a2:	e7ee      	b.n	8005582 <quorem+0xf6>
 80055a4:	0000      	movs	r0, r0
	...

080055a8 <_dtoa_r>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	ec57 6b10 	vmov	r6, r7, d0
 80055b0:	b097      	sub	sp, #92	; 0x5c
 80055b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055b4:	9106      	str	r1, [sp, #24]
 80055b6:	4604      	mov	r4, r0
 80055b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80055ba:	9312      	str	r3, [sp, #72]	; 0x48
 80055bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055c0:	e9cd 6700 	strd	r6, r7, [sp]
 80055c4:	b93d      	cbnz	r5, 80055d6 <_dtoa_r+0x2e>
 80055c6:	2010      	movs	r0, #16
 80055c8:	f000 fe7e 	bl	80062c8 <malloc>
 80055cc:	6260      	str	r0, [r4, #36]	; 0x24
 80055ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055d2:	6005      	str	r5, [r0, #0]
 80055d4:	60c5      	str	r5, [r0, #12]
 80055d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	b151      	cbz	r1, 80055f2 <_dtoa_r+0x4a>
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	604a      	str	r2, [r1, #4]
 80055e0:	2301      	movs	r3, #1
 80055e2:	4093      	lsls	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 feb5 	bl	8006356 <_Bfree>
 80055ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	1e3b      	subs	r3, r7, #0
 80055f4:	bfbb      	ittet	lt
 80055f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055fa:	9301      	strlt	r3, [sp, #4]
 80055fc:	2300      	movge	r3, #0
 80055fe:	2201      	movlt	r2, #1
 8005600:	bfac      	ite	ge
 8005602:	f8c8 3000 	strge.w	r3, [r8]
 8005606:	f8c8 2000 	strlt.w	r2, [r8]
 800560a:	4baf      	ldr	r3, [pc, #700]	; (80058c8 <_dtoa_r+0x320>)
 800560c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005610:	ea33 0308 	bics.w	r3, r3, r8
 8005614:	d114      	bne.n	8005640 <_dtoa_r+0x98>
 8005616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005618:	f242 730f 	movw	r3, #9999	; 0x270f
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	9b00      	ldr	r3, [sp, #0]
 8005620:	b923      	cbnz	r3, 800562c <_dtoa_r+0x84>
 8005622:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005626:	2800      	cmp	r0, #0
 8005628:	f000 8542 	beq.w	80060b0 <_dtoa_r+0xb08>
 800562c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800562e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80058dc <_dtoa_r+0x334>
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8544 	beq.w	80060c0 <_dtoa_r+0xb18>
 8005638:	f10b 0303 	add.w	r3, fp, #3
 800563c:	f000 bd3e 	b.w	80060bc <_dtoa_r+0xb14>
 8005640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	4630      	mov	r0, r6
 800564a:	4639      	mov	r1, r7
 800564c:	f7fb fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005650:	4681      	mov	r9, r0
 8005652:	b168      	cbz	r0, 8005670 <_dtoa_r+0xc8>
 8005654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005656:	2301      	movs	r3, #1
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8524 	beq.w	80060aa <_dtoa_r+0xb02>
 8005662:	4b9a      	ldr	r3, [pc, #616]	; (80058cc <_dtoa_r+0x324>)
 8005664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005666:	f103 3bff 	add.w	fp, r3, #4294967295
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	f000 bd28 	b.w	80060c0 <_dtoa_r+0xb18>
 8005670:	aa14      	add	r2, sp, #80	; 0x50
 8005672:	a915      	add	r1, sp, #84	; 0x54
 8005674:	ec47 6b10 	vmov	d0, r6, r7
 8005678:	4620      	mov	r0, r4
 800567a:	f001 f8c4 	bl	8006806 <__d2b>
 800567e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005682:	9004      	str	r0, [sp, #16]
 8005684:	2d00      	cmp	r5, #0
 8005686:	d07c      	beq.n	8005782 <_dtoa_r+0x1da>
 8005688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800568c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005690:	46b2      	mov	sl, r6
 8005692:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800569a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800569e:	2200      	movs	r2, #0
 80056a0:	4b8b      	ldr	r3, [pc, #556]	; (80058d0 <_dtoa_r+0x328>)
 80056a2:	4650      	mov	r0, sl
 80056a4:	4659      	mov	r1, fp
 80056a6:	f7fa fdf7 	bl	8000298 <__aeabi_dsub>
 80056aa:	a381      	add	r3, pc, #516	; (adr r3, 80058b0 <_dtoa_r+0x308>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa ffaa 	bl	8000608 <__aeabi_dmul>
 80056b4:	a380      	add	r3, pc, #512	; (adr r3, 80058b8 <_dtoa_r+0x310>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fdef 	bl	800029c <__adddf3>
 80056be:	4606      	mov	r6, r0
 80056c0:	4628      	mov	r0, r5
 80056c2:	460f      	mov	r7, r1
 80056c4:	f7fa ff36 	bl	8000534 <__aeabi_i2d>
 80056c8:	a37d      	add	r3, pc, #500	; (adr r3, 80058c0 <_dtoa_r+0x318>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa ff9b 	bl	8000608 <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	f7fa fddf 	bl	800029c <__adddf3>
 80056de:	4606      	mov	r6, r0
 80056e0:	460f      	mov	r7, r1
 80056e2:	f7fb fa41 	bl	8000b68 <__aeabi_d2iz>
 80056e6:	2200      	movs	r2, #0
 80056e8:	4682      	mov	sl, r0
 80056ea:	2300      	movs	r3, #0
 80056ec:	4630      	mov	r0, r6
 80056ee:	4639      	mov	r1, r7
 80056f0:	f7fb f9fc 	bl	8000aec <__aeabi_dcmplt>
 80056f4:	b148      	cbz	r0, 800570a <_dtoa_r+0x162>
 80056f6:	4650      	mov	r0, sl
 80056f8:	f7fa ff1c 	bl	8000534 <__aeabi_i2d>
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	f7fb f9ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8005704:	b908      	cbnz	r0, 800570a <_dtoa_r+0x162>
 8005706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570a:	f1ba 0f16 	cmp.w	sl, #22
 800570e:	d859      	bhi.n	80057c4 <_dtoa_r+0x21c>
 8005710:	4970      	ldr	r1, [pc, #448]	; (80058d4 <_dtoa_r+0x32c>)
 8005712:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800571a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800571e:	f7fb fa03 	bl	8000b28 <__aeabi_dcmpgt>
 8005722:	2800      	cmp	r0, #0
 8005724:	d050      	beq.n	80057c8 <_dtoa_r+0x220>
 8005726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800572a:	2300      	movs	r3, #0
 800572c:	930f      	str	r3, [sp, #60]	; 0x3c
 800572e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005730:	1b5d      	subs	r5, r3, r5
 8005732:	f1b5 0801 	subs.w	r8, r5, #1
 8005736:	bf49      	itett	mi
 8005738:	f1c5 0301 	rsbmi	r3, r5, #1
 800573c:	2300      	movpl	r3, #0
 800573e:	9305      	strmi	r3, [sp, #20]
 8005740:	f04f 0800 	movmi.w	r8, #0
 8005744:	bf58      	it	pl
 8005746:	9305      	strpl	r3, [sp, #20]
 8005748:	f1ba 0f00 	cmp.w	sl, #0
 800574c:	db3e      	blt.n	80057cc <_dtoa_r+0x224>
 800574e:	2300      	movs	r3, #0
 8005750:	44d0      	add	r8, sl
 8005752:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005756:	9307      	str	r3, [sp, #28]
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	2b09      	cmp	r3, #9
 800575c:	f200 8090 	bhi.w	8005880 <_dtoa_r+0x2d8>
 8005760:	2b05      	cmp	r3, #5
 8005762:	bfc4      	itt	gt
 8005764:	3b04      	subgt	r3, #4
 8005766:	9306      	strgt	r3, [sp, #24]
 8005768:	9b06      	ldr	r3, [sp, #24]
 800576a:	f1a3 0302 	sub.w	r3, r3, #2
 800576e:	bfcc      	ite	gt
 8005770:	2500      	movgt	r5, #0
 8005772:	2501      	movle	r5, #1
 8005774:	2b03      	cmp	r3, #3
 8005776:	f200 808f 	bhi.w	8005898 <_dtoa_r+0x2f0>
 800577a:	e8df f003 	tbb	[pc, r3]
 800577e:	7f7d      	.short	0x7f7d
 8005780:	7131      	.short	0x7131
 8005782:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005786:	441d      	add	r5, r3
 8005788:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800578c:	2820      	cmp	r0, #32
 800578e:	dd13      	ble.n	80057b8 <_dtoa_r+0x210>
 8005790:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	fa08 f800 	lsl.w	r8, r8, r0
 800579a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800579e:	fa23 f000 	lsr.w	r0, r3, r0
 80057a2:	ea48 0000 	orr.w	r0, r8, r0
 80057a6:	f7fa feb5 	bl	8000514 <__aeabi_ui2d>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4682      	mov	sl, r0
 80057ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80057b2:	3d01      	subs	r5, #1
 80057b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80057b6:	e772      	b.n	800569e <_dtoa_r+0xf6>
 80057b8:	9b00      	ldr	r3, [sp, #0]
 80057ba:	f1c0 0020 	rsb	r0, r0, #32
 80057be:	fa03 f000 	lsl.w	r0, r3, r0
 80057c2:	e7f0      	b.n	80057a6 <_dtoa_r+0x1fe>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e7b1      	b.n	800572c <_dtoa_r+0x184>
 80057c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80057ca:	e7b0      	b.n	800572e <_dtoa_r+0x186>
 80057cc:	9b05      	ldr	r3, [sp, #20]
 80057ce:	eba3 030a 	sub.w	r3, r3, sl
 80057d2:	9305      	str	r3, [sp, #20]
 80057d4:	f1ca 0300 	rsb	r3, sl, #0
 80057d8:	9307      	str	r3, [sp, #28]
 80057da:	2300      	movs	r3, #0
 80057dc:	930e      	str	r3, [sp, #56]	; 0x38
 80057de:	e7bb      	b.n	8005758 <_dtoa_r+0x1b0>
 80057e0:	2301      	movs	r3, #1
 80057e2:	930a      	str	r3, [sp, #40]	; 0x28
 80057e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dd59      	ble.n	800589e <_dtoa_r+0x2f6>
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	4699      	mov	r9, r3
 80057ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057f0:	2200      	movs	r2, #0
 80057f2:	6072      	str	r2, [r6, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	f102 0014 	add.w	r0, r2, #20
 80057fa:	4298      	cmp	r0, r3
 80057fc:	6871      	ldr	r1, [r6, #4]
 80057fe:	d953      	bls.n	80058a8 <_dtoa_r+0x300>
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fd74 	bl	80062ee <_Balloc>
 8005806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005808:	6030      	str	r0, [r6, #0]
 800580a:	f1b9 0f0e 	cmp.w	r9, #14
 800580e:	f8d3 b000 	ldr.w	fp, [r3]
 8005812:	f200 80e6 	bhi.w	80059e2 <_dtoa_r+0x43a>
 8005816:	2d00      	cmp	r5, #0
 8005818:	f000 80e3 	beq.w	80059e2 <_dtoa_r+0x43a>
 800581c:	ed9d 7b00 	vldr	d7, [sp]
 8005820:	f1ba 0f00 	cmp.w	sl, #0
 8005824:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005828:	dd74      	ble.n	8005914 <_dtoa_r+0x36c>
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <_dtoa_r+0x32c>)
 800582c:	f00a 030f 	and.w	r3, sl, #15
 8005830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005834:	ed93 7b00 	vldr	d7, [r3]
 8005838:	ea4f 162a 	mov.w	r6, sl, asr #4
 800583c:	06f0      	lsls	r0, r6, #27
 800583e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005842:	d565      	bpl.n	8005910 <_dtoa_r+0x368>
 8005844:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <_dtoa_r+0x330>)
 8005846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800584e:	f7fb f805 	bl	800085c <__aeabi_ddiv>
 8005852:	e9cd 0100 	strd	r0, r1, [sp]
 8005856:	f006 060f 	and.w	r6, r6, #15
 800585a:	2503      	movs	r5, #3
 800585c:	4f1e      	ldr	r7, [pc, #120]	; (80058d8 <_dtoa_r+0x330>)
 800585e:	e04c      	b.n	80058fa <_dtoa_r+0x352>
 8005860:	2301      	movs	r3, #1
 8005862:	930a      	str	r3, [sp, #40]	; 0x28
 8005864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005866:	4453      	add	r3, sl
 8005868:	f103 0901 	add.w	r9, r3, #1
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	464b      	mov	r3, r9
 8005870:	2b01      	cmp	r3, #1
 8005872:	bfb8      	it	lt
 8005874:	2301      	movlt	r3, #1
 8005876:	e7ba      	b.n	80057ee <_dtoa_r+0x246>
 8005878:	2300      	movs	r3, #0
 800587a:	e7b2      	b.n	80057e2 <_dtoa_r+0x23a>
 800587c:	2300      	movs	r3, #0
 800587e:	e7f0      	b.n	8005862 <_dtoa_r+0x2ba>
 8005880:	2501      	movs	r5, #1
 8005882:	2300      	movs	r3, #0
 8005884:	9306      	str	r3, [sp, #24]
 8005886:	950a      	str	r5, [sp, #40]	; 0x28
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	4699      	mov	r9, r3
 8005890:	2200      	movs	r2, #0
 8005892:	2312      	movs	r3, #18
 8005894:	920b      	str	r2, [sp, #44]	; 0x2c
 8005896:	e7aa      	b.n	80057ee <_dtoa_r+0x246>
 8005898:	2301      	movs	r3, #1
 800589a:	930a      	str	r3, [sp, #40]	; 0x28
 800589c:	e7f4      	b.n	8005888 <_dtoa_r+0x2e0>
 800589e:	2301      	movs	r3, #1
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	4699      	mov	r9, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	e7f5      	b.n	8005894 <_dtoa_r+0x2ec>
 80058a8:	3101      	adds	r1, #1
 80058aa:	6071      	str	r1, [r6, #4]
 80058ac:	0052      	lsls	r2, r2, #1
 80058ae:	e7a2      	b.n	80057f6 <_dtoa_r+0x24e>
 80058b0:	636f4361 	.word	0x636f4361
 80058b4:	3fd287a7 	.word	0x3fd287a7
 80058b8:	8b60c8b3 	.word	0x8b60c8b3
 80058bc:	3fc68a28 	.word	0x3fc68a28
 80058c0:	509f79fb 	.word	0x509f79fb
 80058c4:	3fd34413 	.word	0x3fd34413
 80058c8:	7ff00000 	.word	0x7ff00000
 80058cc:	08007349 	.word	0x08007349
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	08007408 	.word	0x08007408
 80058d8:	080073e0 	.word	0x080073e0
 80058dc:	08007375 	.word	0x08007375
 80058e0:	07f1      	lsls	r1, r6, #31
 80058e2:	d508      	bpl.n	80058f6 <_dtoa_r+0x34e>
 80058e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ec:	f7fa fe8c 	bl	8000608 <__aeabi_dmul>
 80058f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058f4:	3501      	adds	r5, #1
 80058f6:	1076      	asrs	r6, r6, #1
 80058f8:	3708      	adds	r7, #8
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d1f0      	bne.n	80058e0 <_dtoa_r+0x338>
 80058fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005906:	f7fa ffa9 	bl	800085c <__aeabi_ddiv>
 800590a:	e9cd 0100 	strd	r0, r1, [sp]
 800590e:	e01a      	b.n	8005946 <_dtoa_r+0x39e>
 8005910:	2502      	movs	r5, #2
 8005912:	e7a3      	b.n	800585c <_dtoa_r+0x2b4>
 8005914:	f000 80a0 	beq.w	8005a58 <_dtoa_r+0x4b0>
 8005918:	f1ca 0600 	rsb	r6, sl, #0
 800591c:	4b9f      	ldr	r3, [pc, #636]	; (8005b9c <_dtoa_r+0x5f4>)
 800591e:	4fa0      	ldr	r7, [pc, #640]	; (8005ba0 <_dtoa_r+0x5f8>)
 8005920:	f006 020f 	and.w	r2, r6, #15
 8005924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005930:	f7fa fe6a 	bl	8000608 <__aeabi_dmul>
 8005934:	e9cd 0100 	strd	r0, r1, [sp]
 8005938:	1136      	asrs	r6, r6, #4
 800593a:	2300      	movs	r3, #0
 800593c:	2502      	movs	r5, #2
 800593e:	2e00      	cmp	r6, #0
 8005940:	d17f      	bne.n	8005a42 <_dtoa_r+0x49a>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e1      	bne.n	800590a <_dtoa_r+0x362>
 8005946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8087 	beq.w	8005a5c <_dtoa_r+0x4b4>
 800594e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005952:	2200      	movs	r2, #0
 8005954:	4b93      	ldr	r3, [pc, #588]	; (8005ba4 <_dtoa_r+0x5fc>)
 8005956:	4630      	mov	r0, r6
 8005958:	4639      	mov	r1, r7
 800595a:	f7fb f8c7 	bl	8000aec <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	d07c      	beq.n	8005a5c <_dtoa_r+0x4b4>
 8005962:	f1b9 0f00 	cmp.w	r9, #0
 8005966:	d079      	beq.n	8005a5c <_dtoa_r+0x4b4>
 8005968:	9b02      	ldr	r3, [sp, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dd35      	ble.n	80059da <_dtoa_r+0x432>
 800596e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005972:	9308      	str	r3, [sp, #32]
 8005974:	4639      	mov	r1, r7
 8005976:	2200      	movs	r2, #0
 8005978:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <_dtoa_r+0x600>)
 800597a:	4630      	mov	r0, r6
 800597c:	f7fa fe44 	bl	8000608 <__aeabi_dmul>
 8005980:	e9cd 0100 	strd	r0, r1, [sp]
 8005984:	9f02      	ldr	r7, [sp, #8]
 8005986:	3501      	adds	r5, #1
 8005988:	4628      	mov	r0, r5
 800598a:	f7fa fdd3 	bl	8000534 <__aeabi_i2d>
 800598e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005992:	f7fa fe39 	bl	8000608 <__aeabi_dmul>
 8005996:	2200      	movs	r2, #0
 8005998:	4b84      	ldr	r3, [pc, #528]	; (8005bac <_dtoa_r+0x604>)
 800599a:	f7fa fc7f 	bl	800029c <__adddf3>
 800599e:	4605      	mov	r5, r0
 80059a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059a4:	2f00      	cmp	r7, #0
 80059a6:	d15d      	bne.n	8005a64 <_dtoa_r+0x4bc>
 80059a8:	2200      	movs	r2, #0
 80059aa:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <_dtoa_r+0x608>)
 80059ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b0:	f7fa fc72 	bl	8000298 <__aeabi_dsub>
 80059b4:	462a      	mov	r2, r5
 80059b6:	4633      	mov	r3, r6
 80059b8:	e9cd 0100 	strd	r0, r1, [sp]
 80059bc:	f7fb f8b4 	bl	8000b28 <__aeabi_dcmpgt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f040 8288 	bne.w	8005ed6 <_dtoa_r+0x92e>
 80059c6:	462a      	mov	r2, r5
 80059c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d0:	f7fb f88c 	bl	8000aec <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f040 827c 	bne.w	8005ed2 <_dtoa_r+0x92a>
 80059da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059de:	e9cd 2300 	strd	r2, r3, [sp]
 80059e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f2c0 8150 	blt.w	8005c8a <_dtoa_r+0x6e2>
 80059ea:	f1ba 0f0e 	cmp.w	sl, #14
 80059ee:	f300 814c 	bgt.w	8005c8a <_dtoa_r+0x6e2>
 80059f2:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <_dtoa_r+0x5f4>)
 80059f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80059f8:	ed93 7b00 	vldr	d7, [r3]
 80059fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a04:	f280 80d8 	bge.w	8005bb8 <_dtoa_r+0x610>
 8005a08:	f1b9 0f00 	cmp.w	r9, #0
 8005a0c:	f300 80d4 	bgt.w	8005bb8 <_dtoa_r+0x610>
 8005a10:	f040 825e 	bne.w	8005ed0 <_dtoa_r+0x928>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4b66      	ldr	r3, [pc, #408]	; (8005bb0 <_dtoa_r+0x608>)
 8005a18:	ec51 0b17 	vmov	r0, r1, d7
 8005a1c:	f7fa fdf4 	bl	8000608 <__aeabi_dmul>
 8005a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a24:	f7fb f876 	bl	8000b14 <__aeabi_dcmpge>
 8005a28:	464f      	mov	r7, r9
 8005a2a:	464e      	mov	r6, r9
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f040 8234 	bne.w	8005e9a <_dtoa_r+0x8f2>
 8005a32:	2331      	movs	r3, #49	; 0x31
 8005a34:	f10b 0501 	add.w	r5, fp, #1
 8005a38:	f88b 3000 	strb.w	r3, [fp]
 8005a3c:	f10a 0a01 	add.w	sl, sl, #1
 8005a40:	e22f      	b.n	8005ea2 <_dtoa_r+0x8fa>
 8005a42:	07f2      	lsls	r2, r6, #31
 8005a44:	d505      	bpl.n	8005a52 <_dtoa_r+0x4aa>
 8005a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a4a:	f7fa fddd 	bl	8000608 <__aeabi_dmul>
 8005a4e:	3501      	adds	r5, #1
 8005a50:	2301      	movs	r3, #1
 8005a52:	1076      	asrs	r6, r6, #1
 8005a54:	3708      	adds	r7, #8
 8005a56:	e772      	b.n	800593e <_dtoa_r+0x396>
 8005a58:	2502      	movs	r5, #2
 8005a5a:	e774      	b.n	8005946 <_dtoa_r+0x39e>
 8005a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8005a60:	464f      	mov	r7, r9
 8005a62:	e791      	b.n	8005988 <_dtoa_r+0x3e0>
 8005a64:	4b4d      	ldr	r3, [pc, #308]	; (8005b9c <_dtoa_r+0x5f4>)
 8005a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d047      	beq.n	8005b04 <_dtoa_r+0x55c>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	2000      	movs	r0, #0
 8005a7a:	494e      	ldr	r1, [pc, #312]	; (8005bb4 <_dtoa_r+0x60c>)
 8005a7c:	f7fa feee 	bl	800085c <__aeabi_ddiv>
 8005a80:	462a      	mov	r2, r5
 8005a82:	4633      	mov	r3, r6
 8005a84:	f7fa fc08 	bl	8000298 <__aeabi_dsub>
 8005a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a8c:	465d      	mov	r5, fp
 8005a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a92:	f7fb f869 	bl	8000b68 <__aeabi_d2iz>
 8005a96:	4606      	mov	r6, r0
 8005a98:	f7fa fd4c 	bl	8000534 <__aeabi_i2d>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aa4:	f7fa fbf8 	bl	8000298 <__aeabi_dsub>
 8005aa8:	3630      	adds	r6, #48	; 0x30
 8005aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8005aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ab6:	f7fb f819 	bl	8000aec <__aeabi_dcmplt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d163      	bne.n	8005b86 <_dtoa_r+0x5de>
 8005abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	4937      	ldr	r1, [pc, #220]	; (8005ba4 <_dtoa_r+0x5fc>)
 8005ac6:	f7fa fbe7 	bl	8000298 <__aeabi_dsub>
 8005aca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ace:	f7fb f80d 	bl	8000aec <__aeabi_dcmplt>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f040 80b7 	bne.w	8005c46 <_dtoa_r+0x69e>
 8005ad8:	eba5 030b 	sub.w	r3, r5, fp
 8005adc:	429f      	cmp	r7, r3
 8005ade:	f77f af7c 	ble.w	80059da <_dtoa_r+0x432>
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <_dtoa_r+0x600>)
 8005ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aea:	f7fa fd8d 	bl	8000608 <__aeabi_dmul>
 8005aee:	2200      	movs	r2, #0
 8005af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005af4:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <_dtoa_r+0x600>)
 8005af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005afa:	f7fa fd85 	bl	8000608 <__aeabi_dmul>
 8005afe:	e9cd 0100 	strd	r0, r1, [sp]
 8005b02:	e7c4      	b.n	8005a8e <_dtoa_r+0x4e6>
 8005b04:	462a      	mov	r2, r5
 8005b06:	4633      	mov	r3, r6
 8005b08:	f7fa fd7e 	bl	8000608 <__aeabi_dmul>
 8005b0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b10:	eb0b 0507 	add.w	r5, fp, r7
 8005b14:	465e      	mov	r6, fp
 8005b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b1a:	f7fb f825 	bl	8000b68 <__aeabi_d2iz>
 8005b1e:	4607      	mov	r7, r0
 8005b20:	f7fa fd08 	bl	8000534 <__aeabi_i2d>
 8005b24:	3730      	adds	r7, #48	; 0x30
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b2e:	f7fa fbb3 	bl	8000298 <__aeabi_dsub>
 8005b32:	f806 7b01 	strb.w	r7, [r6], #1
 8005b36:	42ae      	cmp	r6, r5
 8005b38:	e9cd 0100 	strd	r0, r1, [sp]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	d126      	bne.n	8005b90 <_dtoa_r+0x5e8>
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <_dtoa_r+0x60c>)
 8005b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b48:	f7fa fba8 	bl	800029c <__adddf3>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b54:	f7fa ffe8 	bl	8000b28 <__aeabi_dcmpgt>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d174      	bne.n	8005c46 <_dtoa_r+0x69e>
 8005b5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b60:	2000      	movs	r0, #0
 8005b62:	4914      	ldr	r1, [pc, #80]	; (8005bb4 <_dtoa_r+0x60c>)
 8005b64:	f7fa fb98 	bl	8000298 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b70:	f7fa ffbc 	bl	8000aec <__aeabi_dcmplt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f43f af30 	beq.w	80059da <_dtoa_r+0x432>
 8005b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b7e:	2b30      	cmp	r3, #48	; 0x30
 8005b80:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b84:	d002      	beq.n	8005b8c <_dtoa_r+0x5e4>
 8005b86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b8a:	e04a      	b.n	8005c22 <_dtoa_r+0x67a>
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	e7f4      	b.n	8005b7a <_dtoa_r+0x5d2>
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <_dtoa_r+0x600>)
 8005b92:	f7fa fd39 	bl	8000608 <__aeabi_dmul>
 8005b96:	e9cd 0100 	strd	r0, r1, [sp]
 8005b9a:	e7bc      	b.n	8005b16 <_dtoa_r+0x56e>
 8005b9c:	08007408 	.word	0x08007408
 8005ba0:	080073e0 	.word	0x080073e0
 8005ba4:	3ff00000 	.word	0x3ff00000
 8005ba8:	40240000 	.word	0x40240000
 8005bac:	401c0000 	.word	0x401c0000
 8005bb0:	40140000 	.word	0x40140000
 8005bb4:	3fe00000 	.word	0x3fe00000
 8005bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bbc:	465d      	mov	r5, fp
 8005bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa fe49 	bl	800085c <__aeabi_ddiv>
 8005bca:	f7fa ffcd 	bl	8000b68 <__aeabi_d2iz>
 8005bce:	4680      	mov	r8, r0
 8005bd0:	f7fa fcb0 	bl	8000534 <__aeabi_i2d>
 8005bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd8:	f7fa fd16 	bl	8000608 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4630      	mov	r0, r6
 8005be2:	4639      	mov	r1, r7
 8005be4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005be8:	f7fa fb56 	bl	8000298 <__aeabi_dsub>
 8005bec:	f805 6b01 	strb.w	r6, [r5], #1
 8005bf0:	eba5 060b 	sub.w	r6, r5, fp
 8005bf4:	45b1      	cmp	r9, r6
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	d139      	bne.n	8005c70 <_dtoa_r+0x6c8>
 8005bfc:	f7fa fb4e 	bl	800029c <__adddf3>
 8005c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	f7fa ff8e 	bl	8000b28 <__aeabi_dcmpgt>
 8005c0c:	b9c8      	cbnz	r0, 8005c42 <_dtoa_r+0x69a>
 8005c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c1a:	b110      	cbz	r0, 8005c22 <_dtoa_r+0x67a>
 8005c1c:	f018 0f01 	tst.w	r8, #1
 8005c20:	d10f      	bne.n	8005c42 <_dtoa_r+0x69a>
 8005c22:	9904      	ldr	r1, [sp, #16]
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fb96 	bl	8006356 <_Bfree>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c2e:	702b      	strb	r3, [r5, #0]
 8005c30:	f10a 0301 	add.w	r3, sl, #1
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8241 	beq.w	80060c0 <_dtoa_r+0xb18>
 8005c3e:	601d      	str	r5, [r3, #0]
 8005c40:	e23e      	b.n	80060c0 <_dtoa_r+0xb18>
 8005c42:	f8cd a020 	str.w	sl, [sp, #32]
 8005c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c4a:	2a39      	cmp	r2, #57	; 0x39
 8005c4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005c50:	d108      	bne.n	8005c64 <_dtoa_r+0x6bc>
 8005c52:	459b      	cmp	fp, r3
 8005c54:	d10a      	bne.n	8005c6c <_dtoa_r+0x6c4>
 8005c56:	9b08      	ldr	r3, [sp, #32]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	2330      	movs	r3, #48	; 0x30
 8005c5e:	f88b 3000 	strb.w	r3, [fp]
 8005c62:	465b      	mov	r3, fp
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	3201      	adds	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e78c      	b.n	8005b86 <_dtoa_r+0x5de>
 8005c6c:	461d      	mov	r5, r3
 8005c6e:	e7ea      	b.n	8005c46 <_dtoa_r+0x69e>
 8005c70:	2200      	movs	r2, #0
 8005c72:	4b9b      	ldr	r3, [pc, #620]	; (8005ee0 <_dtoa_r+0x938>)
 8005c74:	f7fa fcc8 	bl	8000608 <__aeabi_dmul>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	f7fa ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d09a      	beq.n	8005bbe <_dtoa_r+0x616>
 8005c88:	e7cb      	b.n	8005c22 <_dtoa_r+0x67a>
 8005c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	f000 808b 	beq.w	8005da8 <_dtoa_r+0x800>
 8005c92:	9a06      	ldr	r2, [sp, #24]
 8005c94:	2a01      	cmp	r2, #1
 8005c96:	dc6e      	bgt.n	8005d76 <_dtoa_r+0x7ce>
 8005c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d067      	beq.n	8005d6e <_dtoa_r+0x7c6>
 8005c9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ca2:	9f07      	ldr	r7, [sp, #28]
 8005ca4:	9d05      	ldr	r5, [sp, #20]
 8005ca6:	9a05      	ldr	r2, [sp, #20]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	441a      	add	r2, r3
 8005cac:	4620      	mov	r0, r4
 8005cae:	9205      	str	r2, [sp, #20]
 8005cb0:	4498      	add	r8, r3
 8005cb2:	f000 fbf0 	bl	8006496 <__i2b>
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	dd0c      	ble.n	8005cd6 <_dtoa_r+0x72e>
 8005cbc:	f1b8 0f00 	cmp.w	r8, #0
 8005cc0:	dd09      	ble.n	8005cd6 <_dtoa_r+0x72e>
 8005cc2:	4545      	cmp	r5, r8
 8005cc4:	9a05      	ldr	r2, [sp, #20]
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	bfa8      	it	ge
 8005cca:	4643      	movge	r3, r8
 8005ccc:	1ad2      	subs	r2, r2, r3
 8005cce:	9205      	str	r2, [sp, #20]
 8005cd0:	1aed      	subs	r5, r5, r3
 8005cd2:	eba8 0803 	sub.w	r8, r8, r3
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	b1eb      	cbz	r3, 8005d16 <_dtoa_r+0x76e>
 8005cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d067      	beq.n	8005db0 <_dtoa_r+0x808>
 8005ce0:	b18f      	cbz	r7, 8005d06 <_dtoa_r+0x75e>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f000 fc74 	bl	80065d4 <__pow5mult>
 8005cec:	9a04      	ldr	r2, [sp, #16]
 8005cee:	4601      	mov	r1, r0
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fbd8 	bl	80064a8 <__multiply>
 8005cf8:	9904      	ldr	r1, [sp, #16]
 8005cfa:	9008      	str	r0, [sp, #32]
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fb2a 	bl	8006356 <_Bfree>
 8005d02:	9b08      	ldr	r3, [sp, #32]
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	1bda      	subs	r2, r3, r7
 8005d0a:	d004      	beq.n	8005d16 <_dtoa_r+0x76e>
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 fc60 	bl	80065d4 <__pow5mult>
 8005d14:	9004      	str	r0, [sp, #16]
 8005d16:	2101      	movs	r1, #1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fbbc 	bl	8006496 <__i2b>
 8005d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d20:	4607      	mov	r7, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 81d0 	beq.w	80060c8 <_dtoa_r+0xb20>
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fc51 	bl	80065d4 <__pow5mult>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	4607      	mov	r7, r0
 8005d38:	dc40      	bgt.n	8005dbc <_dtoa_r+0x814>
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d139      	bne.n	8005db4 <_dtoa_r+0x80c>
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d136      	bne.n	8005db8 <_dtoa_r+0x810>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d50:	0d1b      	lsrs	r3, r3, #20
 8005d52:	051b      	lsls	r3, r3, #20
 8005d54:	b12b      	cbz	r3, 8005d62 <_dtoa_r+0x7ba>
 8005d56:	9b05      	ldr	r3, [sp, #20]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	9305      	str	r3, [sp, #20]
 8005d5c:	f108 0801 	add.w	r8, r8, #1
 8005d60:	2301      	movs	r3, #1
 8005d62:	9307      	str	r3, [sp, #28]
 8005d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d12a      	bne.n	8005dc0 <_dtoa_r+0x818>
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	e030      	b.n	8005dd0 <_dtoa_r+0x828>
 8005d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d74:	e795      	b.n	8005ca2 <_dtoa_r+0x6fa>
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	f109 37ff 	add.w	r7, r9, #4294967295
 8005d7c:	42bb      	cmp	r3, r7
 8005d7e:	bfbf      	itttt	lt
 8005d80:	9b07      	ldrlt	r3, [sp, #28]
 8005d82:	9707      	strlt	r7, [sp, #28]
 8005d84:	1afa      	sublt	r2, r7, r3
 8005d86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d88:	bfbb      	ittet	lt
 8005d8a:	189b      	addlt	r3, r3, r2
 8005d8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d8e:	1bdf      	subge	r7, r3, r7
 8005d90:	2700      	movlt	r7, #0
 8005d92:	f1b9 0f00 	cmp.w	r9, #0
 8005d96:	bfb5      	itete	lt
 8005d98:	9b05      	ldrlt	r3, [sp, #20]
 8005d9a:	9d05      	ldrge	r5, [sp, #20]
 8005d9c:	eba3 0509 	sublt.w	r5, r3, r9
 8005da0:	464b      	movge	r3, r9
 8005da2:	bfb8      	it	lt
 8005da4:	2300      	movlt	r3, #0
 8005da6:	e77e      	b.n	8005ca6 <_dtoa_r+0x6fe>
 8005da8:	9f07      	ldr	r7, [sp, #28]
 8005daa:	9d05      	ldr	r5, [sp, #20]
 8005dac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005dae:	e783      	b.n	8005cb8 <_dtoa_r+0x710>
 8005db0:	9a07      	ldr	r2, [sp, #28]
 8005db2:	e7ab      	b.n	8005d0c <_dtoa_r+0x764>
 8005db4:	2300      	movs	r3, #0
 8005db6:	e7d4      	b.n	8005d62 <_dtoa_r+0x7ba>
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	e7d2      	b.n	8005d62 <_dtoa_r+0x7ba>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005dc6:	6918      	ldr	r0, [r3, #16]
 8005dc8:	f000 fb17 	bl	80063fa <__hi0bits>
 8005dcc:	f1c0 0020 	rsb	r0, r0, #32
 8005dd0:	4440      	add	r0, r8
 8005dd2:	f010 001f 	ands.w	r0, r0, #31
 8005dd6:	d047      	beq.n	8005e68 <_dtoa_r+0x8c0>
 8005dd8:	f1c0 0320 	rsb	r3, r0, #32
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	dd3b      	ble.n	8005e58 <_dtoa_r+0x8b0>
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	f1c0 001c 	rsb	r0, r0, #28
 8005de6:	4403      	add	r3, r0
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	4405      	add	r5, r0
 8005dec:	4480      	add	r8, r0
 8005dee:	9b05      	ldr	r3, [sp, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dd05      	ble.n	8005e00 <_dtoa_r+0x858>
 8005df4:	461a      	mov	r2, r3
 8005df6:	9904      	ldr	r1, [sp, #16]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fc39 	bl	8006670 <__lshift>
 8005dfe:	9004      	str	r0, [sp, #16]
 8005e00:	f1b8 0f00 	cmp.w	r8, #0
 8005e04:	dd05      	ble.n	8005e12 <_dtoa_r+0x86a>
 8005e06:	4639      	mov	r1, r7
 8005e08:	4642      	mov	r2, r8
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f000 fc30 	bl	8006670 <__lshift>
 8005e10:	4607      	mov	r7, r0
 8005e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e14:	b353      	cbz	r3, 8005e6c <_dtoa_r+0x8c4>
 8005e16:	4639      	mov	r1, r7
 8005e18:	9804      	ldr	r0, [sp, #16]
 8005e1a:	f000 fc7d 	bl	8006718 <__mcmp>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	da24      	bge.n	8005e6c <_dtoa_r+0x8c4>
 8005e22:	2300      	movs	r3, #0
 8005e24:	220a      	movs	r2, #10
 8005e26:	9904      	ldr	r1, [sp, #16]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 faab 	bl	8006384 <__multadd>
 8005e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e30:	9004      	str	r0, [sp, #16]
 8005e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 814d 	beq.w	80060d6 <_dtoa_r+0xb2e>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4631      	mov	r1, r6
 8005e40:	220a      	movs	r2, #10
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fa9e 	bl	8006384 <__multadd>
 8005e48:	9b02      	ldr	r3, [sp, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	dc4f      	bgt.n	8005ef0 <_dtoa_r+0x948>
 8005e50:	9b06      	ldr	r3, [sp, #24]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	dd4c      	ble.n	8005ef0 <_dtoa_r+0x948>
 8005e56:	e011      	b.n	8005e7c <_dtoa_r+0x8d4>
 8005e58:	d0c9      	beq.n	8005dee <_dtoa_r+0x846>
 8005e5a:	9a05      	ldr	r2, [sp, #20]
 8005e5c:	331c      	adds	r3, #28
 8005e5e:	441a      	add	r2, r3
 8005e60:	9205      	str	r2, [sp, #20]
 8005e62:	441d      	add	r5, r3
 8005e64:	4498      	add	r8, r3
 8005e66:	e7c2      	b.n	8005dee <_dtoa_r+0x846>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	e7f6      	b.n	8005e5a <_dtoa_r+0x8b2>
 8005e6c:	f1b9 0f00 	cmp.w	r9, #0
 8005e70:	dc38      	bgt.n	8005ee4 <_dtoa_r+0x93c>
 8005e72:	9b06      	ldr	r3, [sp, #24]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	dd35      	ble.n	8005ee4 <_dtoa_r+0x93c>
 8005e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	b963      	cbnz	r3, 8005e9a <_dtoa_r+0x8f2>
 8005e80:	4639      	mov	r1, r7
 8005e82:	2205      	movs	r2, #5
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fa7d 	bl	8006384 <__multadd>
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	9804      	ldr	r0, [sp, #16]
 8005e90:	f000 fc42 	bl	8006718 <__mcmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f73f adcc 	bgt.w	8005a32 <_dtoa_r+0x48a>
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9c:	465d      	mov	r5, fp
 8005e9e:	ea6f 0a03 	mvn.w	sl, r3
 8005ea2:	f04f 0900 	mov.w	r9, #0
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fa54 	bl	8006356 <_Bfree>
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	f43f aeb7 	beq.w	8005c22 <_dtoa_r+0x67a>
 8005eb4:	f1b9 0f00 	cmp.w	r9, #0
 8005eb8:	d005      	beq.n	8005ec6 <_dtoa_r+0x91e>
 8005eba:	45b1      	cmp	r9, r6
 8005ebc:	d003      	beq.n	8005ec6 <_dtoa_r+0x91e>
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 fa48 	bl	8006356 <_Bfree>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fa44 	bl	8006356 <_Bfree>
 8005ece:	e6a8      	b.n	8005c22 <_dtoa_r+0x67a>
 8005ed0:	2700      	movs	r7, #0
 8005ed2:	463e      	mov	r6, r7
 8005ed4:	e7e1      	b.n	8005e9a <_dtoa_r+0x8f2>
 8005ed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005eda:	463e      	mov	r6, r7
 8005edc:	e5a9      	b.n	8005a32 <_dtoa_r+0x48a>
 8005ede:	bf00      	nop
 8005ee0:	40240000 	.word	0x40240000
 8005ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80fa 	beq.w	80060e4 <_dtoa_r+0xb3c>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	dd05      	ble.n	8005f00 <_dtoa_r+0x958>
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	462a      	mov	r2, r5
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fbb9 	bl	8006670 <__lshift>
 8005efe:	4606      	mov	r6, r0
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d04c      	beq.n	8005fa0 <_dtoa_r+0x9f8>
 8005f06:	6871      	ldr	r1, [r6, #4]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 f9f0 	bl	80062ee <_Balloc>
 8005f0e:	6932      	ldr	r2, [r6, #16]
 8005f10:	3202      	adds	r2, #2
 8005f12:	4605      	mov	r5, r0
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	f106 010c 	add.w	r1, r6, #12
 8005f1a:	300c      	adds	r0, #12
 8005f1c:	f000 f9dc 	bl	80062d8 <memcpy>
 8005f20:	2201      	movs	r2, #1
 8005f22:	4629      	mov	r1, r5
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fba3 	bl	8006670 <__lshift>
 8005f2a:	9b00      	ldr	r3, [sp, #0]
 8005f2c:	f8cd b014 	str.w	fp, [sp, #20]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	46b1      	mov	r9, r6
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	4606      	mov	r6, r0
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	9804      	ldr	r0, [sp, #16]
 8005f3e:	f7ff faa5 	bl	800548c <quorem>
 8005f42:	4649      	mov	r1, r9
 8005f44:	4605      	mov	r5, r0
 8005f46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f4a:	9804      	ldr	r0, [sp, #16]
 8005f4c:	f000 fbe4 	bl	8006718 <__mcmp>
 8005f50:	4632      	mov	r2, r6
 8005f52:	9000      	str	r0, [sp, #0]
 8005f54:	4639      	mov	r1, r7
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 fbf8 	bl	800674c <__mdiff>
 8005f5c:	68c3      	ldr	r3, [r0, #12]
 8005f5e:	4602      	mov	r2, r0
 8005f60:	bb03      	cbnz	r3, 8005fa4 <_dtoa_r+0x9fc>
 8005f62:	4601      	mov	r1, r0
 8005f64:	9008      	str	r0, [sp, #32]
 8005f66:	9804      	ldr	r0, [sp, #16]
 8005f68:	f000 fbd6 	bl	8006718 <__mcmp>
 8005f6c:	9a08      	ldr	r2, [sp, #32]
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4611      	mov	r1, r2
 8005f72:	4620      	mov	r0, r4
 8005f74:	9308      	str	r3, [sp, #32]
 8005f76:	f000 f9ee 	bl	8006356 <_Bfree>
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	b9a3      	cbnz	r3, 8005fa8 <_dtoa_r+0xa00>
 8005f7e:	9a06      	ldr	r2, [sp, #24]
 8005f80:	b992      	cbnz	r2, 8005fa8 <_dtoa_r+0xa00>
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	b982      	cbnz	r2, 8005fa8 <_dtoa_r+0xa00>
 8005f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f8a:	d029      	beq.n	8005fe0 <_dtoa_r+0xa38>
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd01      	ble.n	8005f96 <_dtoa_r+0x9ee>
 8005f92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	1c5d      	adds	r5, r3, #1
 8005f9a:	f883 8000 	strb.w	r8, [r3]
 8005f9e:	e782      	b.n	8005ea6 <_dtoa_r+0x8fe>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	e7c2      	b.n	8005f2a <_dtoa_r+0x982>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e7e3      	b.n	8005f70 <_dtoa_r+0x9c8>
 8005fa8:	9a00      	ldr	r2, [sp, #0]
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	db04      	blt.n	8005fb8 <_dtoa_r+0xa10>
 8005fae:	d125      	bne.n	8005ffc <_dtoa_r+0xa54>
 8005fb0:	9a06      	ldr	r2, [sp, #24]
 8005fb2:	bb1a      	cbnz	r2, 8005ffc <_dtoa_r+0xa54>
 8005fb4:	9a07      	ldr	r2, [sp, #28]
 8005fb6:	bb0a      	cbnz	r2, 8005ffc <_dtoa_r+0xa54>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	ddec      	ble.n	8005f96 <_dtoa_r+0x9ee>
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	9904      	ldr	r1, [sp, #16]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 fb55 	bl	8006670 <__lshift>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	9004      	str	r0, [sp, #16]
 8005fca:	f000 fba5 	bl	8006718 <__mcmp>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	dc03      	bgt.n	8005fda <_dtoa_r+0xa32>
 8005fd2:	d1e0      	bne.n	8005f96 <_dtoa_r+0x9ee>
 8005fd4:	f018 0f01 	tst.w	r8, #1
 8005fd8:	d0dd      	beq.n	8005f96 <_dtoa_r+0x9ee>
 8005fda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fde:	d1d8      	bne.n	8005f92 <_dtoa_r+0x9ea>
 8005fe0:	9b05      	ldr	r3, [sp, #20]
 8005fe2:	9a05      	ldr	r2, [sp, #20]
 8005fe4:	1c5d      	adds	r5, r3, #1
 8005fe6:	2339      	movs	r3, #57	; 0x39
 8005fe8:	7013      	strb	r3, [r2, #0]
 8005fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fee:	2b39      	cmp	r3, #57	; 0x39
 8005ff0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ff4:	d04f      	beq.n	8006096 <_dtoa_r+0xaee>
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	e754      	b.n	8005ea6 <_dtoa_r+0x8fe>
 8005ffc:	9a05      	ldr	r2, [sp, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f102 0501 	add.w	r5, r2, #1
 8006004:	dd06      	ble.n	8006014 <_dtoa_r+0xa6c>
 8006006:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800600a:	d0e9      	beq.n	8005fe0 <_dtoa_r+0xa38>
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	9b05      	ldr	r3, [sp, #20]
 8006012:	e7c2      	b.n	8005f9a <_dtoa_r+0x9f2>
 8006014:	9a02      	ldr	r2, [sp, #8]
 8006016:	f805 8c01 	strb.w	r8, [r5, #-1]
 800601a:	eba5 030b 	sub.w	r3, r5, fp
 800601e:	4293      	cmp	r3, r2
 8006020:	d021      	beq.n	8006066 <_dtoa_r+0xabe>
 8006022:	2300      	movs	r3, #0
 8006024:	220a      	movs	r2, #10
 8006026:	9904      	ldr	r1, [sp, #16]
 8006028:	4620      	mov	r0, r4
 800602a:	f000 f9ab 	bl	8006384 <__multadd>
 800602e:	45b1      	cmp	r9, r6
 8006030:	9004      	str	r0, [sp, #16]
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f04f 020a 	mov.w	r2, #10
 800603a:	4649      	mov	r1, r9
 800603c:	4620      	mov	r0, r4
 800603e:	d105      	bne.n	800604c <_dtoa_r+0xaa4>
 8006040:	f000 f9a0 	bl	8006384 <__multadd>
 8006044:	4681      	mov	r9, r0
 8006046:	4606      	mov	r6, r0
 8006048:	9505      	str	r5, [sp, #20]
 800604a:	e776      	b.n	8005f3a <_dtoa_r+0x992>
 800604c:	f000 f99a 	bl	8006384 <__multadd>
 8006050:	4631      	mov	r1, r6
 8006052:	4681      	mov	r9, r0
 8006054:	2300      	movs	r3, #0
 8006056:	220a      	movs	r2, #10
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f993 	bl	8006384 <__multadd>
 800605e:	4606      	mov	r6, r0
 8006060:	e7f2      	b.n	8006048 <_dtoa_r+0xaa0>
 8006062:	f04f 0900 	mov.w	r9, #0
 8006066:	2201      	movs	r2, #1
 8006068:	9904      	ldr	r1, [sp, #16]
 800606a:	4620      	mov	r0, r4
 800606c:	f000 fb00 	bl	8006670 <__lshift>
 8006070:	4639      	mov	r1, r7
 8006072:	9004      	str	r0, [sp, #16]
 8006074:	f000 fb50 	bl	8006718 <__mcmp>
 8006078:	2800      	cmp	r0, #0
 800607a:	dcb6      	bgt.n	8005fea <_dtoa_r+0xa42>
 800607c:	d102      	bne.n	8006084 <_dtoa_r+0xadc>
 800607e:	f018 0f01 	tst.w	r8, #1
 8006082:	d1b2      	bne.n	8005fea <_dtoa_r+0xa42>
 8006084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006088:	2b30      	cmp	r3, #48	; 0x30
 800608a:	f105 32ff 	add.w	r2, r5, #4294967295
 800608e:	f47f af0a 	bne.w	8005ea6 <_dtoa_r+0x8fe>
 8006092:	4615      	mov	r5, r2
 8006094:	e7f6      	b.n	8006084 <_dtoa_r+0xadc>
 8006096:	4593      	cmp	fp, r2
 8006098:	d105      	bne.n	80060a6 <_dtoa_r+0xafe>
 800609a:	2331      	movs	r3, #49	; 0x31
 800609c:	f10a 0a01 	add.w	sl, sl, #1
 80060a0:	f88b 3000 	strb.w	r3, [fp]
 80060a4:	e6ff      	b.n	8005ea6 <_dtoa_r+0x8fe>
 80060a6:	4615      	mov	r5, r2
 80060a8:	e79f      	b.n	8005fea <_dtoa_r+0xa42>
 80060aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006110 <_dtoa_r+0xb68>
 80060ae:	e007      	b.n	80060c0 <_dtoa_r+0xb18>
 80060b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006114 <_dtoa_r+0xb6c>
 80060b6:	b11b      	cbz	r3, 80060c0 <_dtoa_r+0xb18>
 80060b8:	f10b 0308 	add.w	r3, fp, #8
 80060bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	4658      	mov	r0, fp
 80060c2:	b017      	add	sp, #92	; 0x5c
 80060c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	9b06      	ldr	r3, [sp, #24]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f77f ae35 	ble.w	8005d3a <_dtoa_r+0x792>
 80060d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d2:	9307      	str	r3, [sp, #28]
 80060d4:	e649      	b.n	8005d6a <_dtoa_r+0x7c2>
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc03      	bgt.n	80060e4 <_dtoa_r+0xb3c>
 80060dc:	9b06      	ldr	r3, [sp, #24]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	f73f aecc 	bgt.w	8005e7c <_dtoa_r+0x8d4>
 80060e4:	465d      	mov	r5, fp
 80060e6:	4639      	mov	r1, r7
 80060e8:	9804      	ldr	r0, [sp, #16]
 80060ea:	f7ff f9cf 	bl	800548c <quorem>
 80060ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060f2:	f805 8b01 	strb.w	r8, [r5], #1
 80060f6:	9a02      	ldr	r2, [sp, #8]
 80060f8:	eba5 030b 	sub.w	r3, r5, fp
 80060fc:	429a      	cmp	r2, r3
 80060fe:	ddb0      	ble.n	8006062 <_dtoa_r+0xaba>
 8006100:	2300      	movs	r3, #0
 8006102:	220a      	movs	r2, #10
 8006104:	9904      	ldr	r1, [sp, #16]
 8006106:	4620      	mov	r0, r4
 8006108:	f000 f93c 	bl	8006384 <__multadd>
 800610c:	9004      	str	r0, [sp, #16]
 800610e:	e7ea      	b.n	80060e6 <_dtoa_r+0xb3e>
 8006110:	08007348 	.word	0x08007348
 8006114:	0800736c 	.word	0x0800736c

08006118 <std>:
 8006118:	2300      	movs	r3, #0
 800611a:	b510      	push	{r4, lr}
 800611c:	4604      	mov	r4, r0
 800611e:	e9c0 3300 	strd	r3, r3, [r0]
 8006122:	6083      	str	r3, [r0, #8]
 8006124:	8181      	strh	r1, [r0, #12]
 8006126:	6643      	str	r3, [r0, #100]	; 0x64
 8006128:	81c2      	strh	r2, [r0, #14]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6183      	str	r3, [r0, #24]
 8006130:	4619      	mov	r1, r3
 8006132:	2208      	movs	r2, #8
 8006134:	305c      	adds	r0, #92	; 0x5c
 8006136:	f7fe fd2d 	bl	8004b94 <memset>
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <std+0x38>)
 800613c:	6263      	str	r3, [r4, #36]	; 0x24
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <std+0x3c>)
 8006140:	62a3      	str	r3, [r4, #40]	; 0x28
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <std+0x40>)
 8006144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <std+0x44>)
 8006148:	6224      	str	r4, [r4, #32]
 800614a:	6323      	str	r3, [r4, #48]	; 0x30
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop
 8006150:	08006cb1 	.word	0x08006cb1
 8006154:	08006cd3 	.word	0x08006cd3
 8006158:	08006d0b 	.word	0x08006d0b
 800615c:	08006d2f 	.word	0x08006d2f

08006160 <_cleanup_r>:
 8006160:	4901      	ldr	r1, [pc, #4]	; (8006168 <_cleanup_r+0x8>)
 8006162:	f000 b885 	b.w	8006270 <_fwalk_reent>
 8006166:	bf00      	nop
 8006168:	08007009 	.word	0x08007009

0800616c <__sfmoreglue>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	1e4a      	subs	r2, r1, #1
 8006170:	2568      	movs	r5, #104	; 0x68
 8006172:	4355      	muls	r5, r2
 8006174:	460e      	mov	r6, r1
 8006176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800617a:	f000 fbef 	bl	800695c <_malloc_r>
 800617e:	4604      	mov	r4, r0
 8006180:	b140      	cbz	r0, 8006194 <__sfmoreglue+0x28>
 8006182:	2100      	movs	r1, #0
 8006184:	e9c0 1600 	strd	r1, r6, [r0]
 8006188:	300c      	adds	r0, #12
 800618a:	60a0      	str	r0, [r4, #8]
 800618c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006190:	f7fe fd00 	bl	8004b94 <memset>
 8006194:	4620      	mov	r0, r4
 8006196:	bd70      	pop	{r4, r5, r6, pc}

08006198 <__sinit>:
 8006198:	6983      	ldr	r3, [r0, #24]
 800619a:	b510      	push	{r4, lr}
 800619c:	4604      	mov	r4, r0
 800619e:	bb33      	cbnz	r3, 80061ee <__sinit+0x56>
 80061a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061a4:	6503      	str	r3, [r0, #80]	; 0x50
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <__sinit+0x58>)
 80061a8:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <__sinit+0x5c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6282      	str	r2, [r0, #40]	; 0x28
 80061ae:	4298      	cmp	r0, r3
 80061b0:	bf04      	itt	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	6183      	streq	r3, [r0, #24]
 80061b6:	f000 f81f 	bl	80061f8 <__sfp>
 80061ba:	6060      	str	r0, [r4, #4]
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f81b 	bl	80061f8 <__sfp>
 80061c2:	60a0      	str	r0, [r4, #8]
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f817 	bl	80061f8 <__sfp>
 80061ca:	2200      	movs	r2, #0
 80061cc:	60e0      	str	r0, [r4, #12]
 80061ce:	2104      	movs	r1, #4
 80061d0:	6860      	ldr	r0, [r4, #4]
 80061d2:	f7ff ffa1 	bl	8006118 <std>
 80061d6:	2201      	movs	r2, #1
 80061d8:	2109      	movs	r1, #9
 80061da:	68a0      	ldr	r0, [r4, #8]
 80061dc:	f7ff ff9c 	bl	8006118 <std>
 80061e0:	2202      	movs	r2, #2
 80061e2:	2112      	movs	r1, #18
 80061e4:	68e0      	ldr	r0, [r4, #12]
 80061e6:	f7ff ff97 	bl	8006118 <std>
 80061ea:	2301      	movs	r3, #1
 80061ec:	61a3      	str	r3, [r4, #24]
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	08007334 	.word	0x08007334
 80061f4:	08006161 	.word	0x08006161

080061f8 <__sfp>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <__sfp+0x70>)
 80061fc:	681e      	ldr	r6, [r3, #0]
 80061fe:	69b3      	ldr	r3, [r6, #24]
 8006200:	4607      	mov	r7, r0
 8006202:	b913      	cbnz	r3, 800620a <__sfp+0x12>
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ffc7 	bl	8006198 <__sinit>
 800620a:	3648      	adds	r6, #72	; 0x48
 800620c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006210:	3b01      	subs	r3, #1
 8006212:	d503      	bpl.n	800621c <__sfp+0x24>
 8006214:	6833      	ldr	r3, [r6, #0]
 8006216:	b133      	cbz	r3, 8006226 <__sfp+0x2e>
 8006218:	6836      	ldr	r6, [r6, #0]
 800621a:	e7f7      	b.n	800620c <__sfp+0x14>
 800621c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006220:	b16d      	cbz	r5, 800623e <__sfp+0x46>
 8006222:	3468      	adds	r4, #104	; 0x68
 8006224:	e7f4      	b.n	8006210 <__sfp+0x18>
 8006226:	2104      	movs	r1, #4
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ff9f 	bl	800616c <__sfmoreglue>
 800622e:	6030      	str	r0, [r6, #0]
 8006230:	2800      	cmp	r0, #0
 8006232:	d1f1      	bne.n	8006218 <__sfp+0x20>
 8006234:	230c      	movs	r3, #12
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4604      	mov	r4, r0
 800623a:	4620      	mov	r0, r4
 800623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <__sfp+0x74>)
 8006240:	6665      	str	r5, [r4, #100]	; 0x64
 8006242:	e9c4 5500 	strd	r5, r5, [r4]
 8006246:	60a5      	str	r5, [r4, #8]
 8006248:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800624c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006250:	2208      	movs	r2, #8
 8006252:	4629      	mov	r1, r5
 8006254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006258:	f7fe fc9c 	bl	8004b94 <memset>
 800625c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006264:	e7e9      	b.n	800623a <__sfp+0x42>
 8006266:	bf00      	nop
 8006268:	08007334 	.word	0x08007334
 800626c:	ffff0001 	.word	0xffff0001

08006270 <_fwalk_reent>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4680      	mov	r8, r0
 8006276:	4689      	mov	r9, r1
 8006278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800627c:	2600      	movs	r6, #0
 800627e:	b914      	cbnz	r4, 8006286 <_fwalk_reent+0x16>
 8006280:	4630      	mov	r0, r6
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006286:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800628a:	3f01      	subs	r7, #1
 800628c:	d501      	bpl.n	8006292 <_fwalk_reent+0x22>
 800628e:	6824      	ldr	r4, [r4, #0]
 8006290:	e7f5      	b.n	800627e <_fwalk_reent+0xe>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <_fwalk_reent+0x38>
 8006298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	d003      	beq.n	80062a8 <_fwalk_reent+0x38>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4640      	mov	r0, r8
 80062a4:	47c8      	blx	r9
 80062a6:	4306      	orrs	r6, r0
 80062a8:	3568      	adds	r5, #104	; 0x68
 80062aa:	e7ee      	b.n	800628a <_fwalk_reent+0x1a>

080062ac <_localeconv_r>:
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <_localeconv_r+0x14>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a18      	ldr	r0, [r3, #32]
 80062b2:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <_localeconv_r+0x18>)
 80062b4:	2800      	cmp	r0, #0
 80062b6:	bf08      	it	eq
 80062b8:	4618      	moveq	r0, r3
 80062ba:	30f0      	adds	r0, #240	; 0xf0
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000080 	.word	0x20000080
 80062c4:	200000e4 	.word	0x200000e4

080062c8 <malloc>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <malloc+0xc>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f000 bb45 	b.w	800695c <_malloc_r>
 80062d2:	bf00      	nop
 80062d4:	20000080 	.word	0x20000080

080062d8 <memcpy>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	1e43      	subs	r3, r0, #1
 80062dc:	440a      	add	r2, r1
 80062de:	4291      	cmp	r1, r2
 80062e0:	d100      	bne.n	80062e4 <memcpy+0xc>
 80062e2:	bd10      	pop	{r4, pc}
 80062e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ec:	e7f7      	b.n	80062de <memcpy+0x6>

080062ee <_Balloc>:
 80062ee:	b570      	push	{r4, r5, r6, lr}
 80062f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062f2:	4604      	mov	r4, r0
 80062f4:	460e      	mov	r6, r1
 80062f6:	b93d      	cbnz	r5, 8006308 <_Balloc+0x1a>
 80062f8:	2010      	movs	r0, #16
 80062fa:	f7ff ffe5 	bl	80062c8 <malloc>
 80062fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006304:	6005      	str	r5, [r0, #0]
 8006306:	60c5      	str	r5, [r0, #12]
 8006308:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800630a:	68eb      	ldr	r3, [r5, #12]
 800630c:	b183      	cbz	r3, 8006330 <_Balloc+0x42>
 800630e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006316:	b9b8      	cbnz	r0, 8006348 <_Balloc+0x5a>
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f506 	lsl.w	r5, r1, r6
 800631e:	1d6a      	adds	r2, r5, #5
 8006320:	0092      	lsls	r2, r2, #2
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fabe 	bl	80068a4 <_calloc_r>
 8006328:	b160      	cbz	r0, 8006344 <_Balloc+0x56>
 800632a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800632e:	e00e      	b.n	800634e <_Balloc+0x60>
 8006330:	2221      	movs	r2, #33	; 0x21
 8006332:	2104      	movs	r1, #4
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fab5 	bl	80068a4 <_calloc_r>
 800633a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800633c:	60e8      	str	r0, [r5, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e4      	bne.n	800630e <_Balloc+0x20>
 8006344:	2000      	movs	r0, #0
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	6802      	ldr	r2, [r0, #0]
 800634a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800634e:	2300      	movs	r3, #0
 8006350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006354:	e7f7      	b.n	8006346 <_Balloc+0x58>

08006356 <_Bfree>:
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800635a:	4606      	mov	r6, r0
 800635c:	460d      	mov	r5, r1
 800635e:	b93c      	cbnz	r4, 8006370 <_Bfree+0x1a>
 8006360:	2010      	movs	r0, #16
 8006362:	f7ff ffb1 	bl	80062c8 <malloc>
 8006366:	6270      	str	r0, [r6, #36]	; 0x24
 8006368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800636c:	6004      	str	r4, [r0, #0]
 800636e:	60c4      	str	r4, [r0, #12]
 8006370:	b13d      	cbz	r5, 8006382 <_Bfree+0x2c>
 8006372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006374:	686a      	ldr	r2, [r5, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800637c:	6029      	str	r1, [r5, #0]
 800637e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006382:	bd70      	pop	{r4, r5, r6, pc}

08006384 <__multadd>:
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	690d      	ldr	r5, [r1, #16]
 800638a:	461f      	mov	r7, r3
 800638c:	4606      	mov	r6, r0
 800638e:	460c      	mov	r4, r1
 8006390:	f101 0c14 	add.w	ip, r1, #20
 8006394:	2300      	movs	r3, #0
 8006396:	f8dc 0000 	ldr.w	r0, [ip]
 800639a:	b281      	uxth	r1, r0
 800639c:	fb02 7101 	mla	r1, r2, r1, r7
 80063a0:	0c0f      	lsrs	r7, r1, #16
 80063a2:	0c00      	lsrs	r0, r0, #16
 80063a4:	fb02 7000 	mla	r0, r2, r0, r7
 80063a8:	b289      	uxth	r1, r1
 80063aa:	3301      	adds	r3, #1
 80063ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063b0:	429d      	cmp	r5, r3
 80063b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063b6:	f84c 1b04 	str.w	r1, [ip], #4
 80063ba:	dcec      	bgt.n	8006396 <__multadd+0x12>
 80063bc:	b1d7      	cbz	r7, 80063f4 <__multadd+0x70>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc12      	bgt.n	80063ea <__multadd+0x66>
 80063c4:	6861      	ldr	r1, [r4, #4]
 80063c6:	4630      	mov	r0, r6
 80063c8:	3101      	adds	r1, #1
 80063ca:	f7ff ff90 	bl	80062ee <_Balloc>
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	3202      	adds	r2, #2
 80063d2:	f104 010c 	add.w	r1, r4, #12
 80063d6:	4680      	mov	r8, r0
 80063d8:	0092      	lsls	r2, r2, #2
 80063da:	300c      	adds	r0, #12
 80063dc:	f7ff ff7c 	bl	80062d8 <memcpy>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff ffb7 	bl	8006356 <_Bfree>
 80063e8:	4644      	mov	r4, r8
 80063ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063ee:	3501      	adds	r5, #1
 80063f0:	615f      	str	r7, [r3, #20]
 80063f2:	6125      	str	r5, [r4, #16]
 80063f4:	4620      	mov	r0, r4
 80063f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063fa <__hi0bits>:
 80063fa:	0c02      	lsrs	r2, r0, #16
 80063fc:	0412      	lsls	r2, r2, #16
 80063fe:	4603      	mov	r3, r0
 8006400:	b9b2      	cbnz	r2, 8006430 <__hi0bits+0x36>
 8006402:	0403      	lsls	r3, r0, #16
 8006404:	2010      	movs	r0, #16
 8006406:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800640a:	bf04      	itt	eq
 800640c:	021b      	lsleq	r3, r3, #8
 800640e:	3008      	addeq	r0, #8
 8006410:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006414:	bf04      	itt	eq
 8006416:	011b      	lsleq	r3, r3, #4
 8006418:	3004      	addeq	r0, #4
 800641a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800641e:	bf04      	itt	eq
 8006420:	009b      	lsleq	r3, r3, #2
 8006422:	3002      	addeq	r0, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	db06      	blt.n	8006436 <__hi0bits+0x3c>
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	d503      	bpl.n	8006434 <__hi0bits+0x3a>
 800642c:	3001      	adds	r0, #1
 800642e:	4770      	bx	lr
 8006430:	2000      	movs	r0, #0
 8006432:	e7e8      	b.n	8006406 <__hi0bits+0xc>
 8006434:	2020      	movs	r0, #32
 8006436:	4770      	bx	lr

08006438 <__lo0bits>:
 8006438:	6803      	ldr	r3, [r0, #0]
 800643a:	f013 0207 	ands.w	r2, r3, #7
 800643e:	4601      	mov	r1, r0
 8006440:	d00b      	beq.n	800645a <__lo0bits+0x22>
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d423      	bmi.n	800648e <__lo0bits+0x56>
 8006446:	0798      	lsls	r0, r3, #30
 8006448:	bf49      	itett	mi
 800644a:	085b      	lsrmi	r3, r3, #1
 800644c:	089b      	lsrpl	r3, r3, #2
 800644e:	2001      	movmi	r0, #1
 8006450:	600b      	strmi	r3, [r1, #0]
 8006452:	bf5c      	itt	pl
 8006454:	600b      	strpl	r3, [r1, #0]
 8006456:	2002      	movpl	r0, #2
 8006458:	4770      	bx	lr
 800645a:	b298      	uxth	r0, r3
 800645c:	b9a8      	cbnz	r0, 800648a <__lo0bits+0x52>
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	2010      	movs	r0, #16
 8006462:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006466:	bf04      	itt	eq
 8006468:	0a1b      	lsreq	r3, r3, #8
 800646a:	3008      	addeq	r0, #8
 800646c:	071a      	lsls	r2, r3, #28
 800646e:	bf04      	itt	eq
 8006470:	091b      	lsreq	r3, r3, #4
 8006472:	3004      	addeq	r0, #4
 8006474:	079a      	lsls	r2, r3, #30
 8006476:	bf04      	itt	eq
 8006478:	089b      	lsreq	r3, r3, #2
 800647a:	3002      	addeq	r0, #2
 800647c:	07da      	lsls	r2, r3, #31
 800647e:	d402      	bmi.n	8006486 <__lo0bits+0x4e>
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	d006      	beq.n	8006492 <__lo0bits+0x5a>
 8006484:	3001      	adds	r0, #1
 8006486:	600b      	str	r3, [r1, #0]
 8006488:	4770      	bx	lr
 800648a:	4610      	mov	r0, r2
 800648c:	e7e9      	b.n	8006462 <__lo0bits+0x2a>
 800648e:	2000      	movs	r0, #0
 8006490:	4770      	bx	lr
 8006492:	2020      	movs	r0, #32
 8006494:	4770      	bx	lr

08006496 <__i2b>:
 8006496:	b510      	push	{r4, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	2101      	movs	r1, #1
 800649c:	f7ff ff27 	bl	80062ee <_Balloc>
 80064a0:	2201      	movs	r2, #1
 80064a2:	6144      	str	r4, [r0, #20]
 80064a4:	6102      	str	r2, [r0, #16]
 80064a6:	bd10      	pop	{r4, pc}

080064a8 <__multiply>:
 80064a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	4614      	mov	r4, r2
 80064ae:	690a      	ldr	r2, [r1, #16]
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	bfb8      	it	lt
 80064b6:	460b      	movlt	r3, r1
 80064b8:	4688      	mov	r8, r1
 80064ba:	bfbc      	itt	lt
 80064bc:	46a0      	movlt	r8, r4
 80064be:	461c      	movlt	r4, r3
 80064c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064d0:	eb07 0609 	add.w	r6, r7, r9
 80064d4:	42b3      	cmp	r3, r6
 80064d6:	bfb8      	it	lt
 80064d8:	3101      	addlt	r1, #1
 80064da:	f7ff ff08 	bl	80062ee <_Balloc>
 80064de:	f100 0514 	add.w	r5, r0, #20
 80064e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80064e6:	462b      	mov	r3, r5
 80064e8:	2200      	movs	r2, #0
 80064ea:	4573      	cmp	r3, lr
 80064ec:	d316      	bcc.n	800651c <__multiply+0x74>
 80064ee:	f104 0214 	add.w	r2, r4, #20
 80064f2:	f108 0114 	add.w	r1, r8, #20
 80064f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80064fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	9b00      	ldr	r3, [sp, #0]
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	4293      	cmp	r3, r2
 8006506:	d80c      	bhi.n	8006522 <__multiply+0x7a>
 8006508:	2e00      	cmp	r6, #0
 800650a:	dd03      	ble.n	8006514 <__multiply+0x6c>
 800650c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05d      	beq.n	80065d0 <__multiply+0x128>
 8006514:	6106      	str	r6, [r0, #16]
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651c:	f843 2b04 	str.w	r2, [r3], #4
 8006520:	e7e3      	b.n	80064ea <__multiply+0x42>
 8006522:	f8b2 b000 	ldrh.w	fp, [r2]
 8006526:	f1bb 0f00 	cmp.w	fp, #0
 800652a:	d023      	beq.n	8006574 <__multiply+0xcc>
 800652c:	4689      	mov	r9, r1
 800652e:	46ac      	mov	ip, r5
 8006530:	f04f 0800 	mov.w	r8, #0
 8006534:	f859 4b04 	ldr.w	r4, [r9], #4
 8006538:	f8dc a000 	ldr.w	sl, [ip]
 800653c:	b2a3      	uxth	r3, r4
 800653e:	fa1f fa8a 	uxth.w	sl, sl
 8006542:	fb0b a303 	mla	r3, fp, r3, sl
 8006546:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800654a:	f8dc 4000 	ldr.w	r4, [ip]
 800654e:	4443      	add	r3, r8
 8006550:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006554:	fb0b 840a 	mla	r4, fp, sl, r8
 8006558:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800655c:	46e2      	mov	sl, ip
 800655e:	b29b      	uxth	r3, r3
 8006560:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006564:	454f      	cmp	r7, r9
 8006566:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800656a:	f84a 3b04 	str.w	r3, [sl], #4
 800656e:	d82b      	bhi.n	80065c8 <__multiply+0x120>
 8006570:	f8cc 8004 	str.w	r8, [ip, #4]
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800657a:	3204      	adds	r2, #4
 800657c:	f1ba 0f00 	cmp.w	sl, #0
 8006580:	d020      	beq.n	80065c4 <__multiply+0x11c>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	4689      	mov	r9, r1
 8006586:	46a8      	mov	r8, r5
 8006588:	f04f 0b00 	mov.w	fp, #0
 800658c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006590:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006594:	fb0a 440c 	mla	r4, sl, ip, r4
 8006598:	445c      	add	r4, fp
 800659a:	46c4      	mov	ip, r8
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065a2:	f84c 3b04 	str.w	r3, [ip], #4
 80065a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80065aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	fb0a b303 	mla	r3, sl, r3, fp
 80065b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065b8:	454f      	cmp	r7, r9
 80065ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065be:	d805      	bhi.n	80065cc <__multiply+0x124>
 80065c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80065c4:	3504      	adds	r5, #4
 80065c6:	e79b      	b.n	8006500 <__multiply+0x58>
 80065c8:	46d4      	mov	ip, sl
 80065ca:	e7b3      	b.n	8006534 <__multiply+0x8c>
 80065cc:	46e0      	mov	r8, ip
 80065ce:	e7dd      	b.n	800658c <__multiply+0xe4>
 80065d0:	3e01      	subs	r6, #1
 80065d2:	e799      	b.n	8006508 <__multiply+0x60>

080065d4 <__pow5mult>:
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	4615      	mov	r5, r2
 80065da:	f012 0203 	ands.w	r2, r2, #3
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	d007      	beq.n	80065f4 <__pow5mult+0x20>
 80065e4:	3a01      	subs	r2, #1
 80065e6:	4c21      	ldr	r4, [pc, #132]	; (800666c <__pow5mult+0x98>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ee:	f7ff fec9 	bl	8006384 <__multadd>
 80065f2:	4607      	mov	r7, r0
 80065f4:	10ad      	asrs	r5, r5, #2
 80065f6:	d035      	beq.n	8006664 <__pow5mult+0x90>
 80065f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065fa:	b93c      	cbnz	r4, 800660c <__pow5mult+0x38>
 80065fc:	2010      	movs	r0, #16
 80065fe:	f7ff fe63 	bl	80062c8 <malloc>
 8006602:	6270      	str	r0, [r6, #36]	; 0x24
 8006604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006608:	6004      	str	r4, [r0, #0]
 800660a:	60c4      	str	r4, [r0, #12]
 800660c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006614:	b94c      	cbnz	r4, 800662a <__pow5mult+0x56>
 8006616:	f240 2171 	movw	r1, #625	; 0x271
 800661a:	4630      	mov	r0, r6
 800661c:	f7ff ff3b 	bl	8006496 <__i2b>
 8006620:	2300      	movs	r3, #0
 8006622:	f8c8 0008 	str.w	r0, [r8, #8]
 8006626:	4604      	mov	r4, r0
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	f04f 0800 	mov.w	r8, #0
 800662e:	07eb      	lsls	r3, r5, #31
 8006630:	d50a      	bpl.n	8006648 <__pow5mult+0x74>
 8006632:	4639      	mov	r1, r7
 8006634:	4622      	mov	r2, r4
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ff36 	bl	80064a8 <__multiply>
 800663c:	4639      	mov	r1, r7
 800663e:	4681      	mov	r9, r0
 8006640:	4630      	mov	r0, r6
 8006642:	f7ff fe88 	bl	8006356 <_Bfree>
 8006646:	464f      	mov	r7, r9
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	d00b      	beq.n	8006664 <__pow5mult+0x90>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	b938      	cbnz	r0, 8006660 <__pow5mult+0x8c>
 8006650:	4622      	mov	r2, r4
 8006652:	4621      	mov	r1, r4
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff ff27 	bl	80064a8 <__multiply>
 800665a:	6020      	str	r0, [r4, #0]
 800665c:	f8c0 8000 	str.w	r8, [r0]
 8006660:	4604      	mov	r4, r0
 8006662:	e7e4      	b.n	800662e <__pow5mult+0x5a>
 8006664:	4638      	mov	r0, r7
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	bf00      	nop
 800666c:	080074d0 	.word	0x080074d0

08006670 <__lshift>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6849      	ldr	r1, [r1, #4]
 800667e:	eb0a 0903 	add.w	r9, sl, r3
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	4607      	mov	r7, r0
 8006686:	4616      	mov	r6, r2
 8006688:	f109 0501 	add.w	r5, r9, #1
 800668c:	42ab      	cmp	r3, r5
 800668e:	db32      	blt.n	80066f6 <__lshift+0x86>
 8006690:	4638      	mov	r0, r7
 8006692:	f7ff fe2c 	bl	80062ee <_Balloc>
 8006696:	2300      	movs	r3, #0
 8006698:	4680      	mov	r8, r0
 800669a:	f100 0114 	add.w	r1, r0, #20
 800669e:	461a      	mov	r2, r3
 80066a0:	4553      	cmp	r3, sl
 80066a2:	db2b      	blt.n	80066fc <__lshift+0x8c>
 80066a4:	6920      	ldr	r0, [r4, #16]
 80066a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066aa:	f104 0314 	add.w	r3, r4, #20
 80066ae:	f016 021f 	ands.w	r2, r6, #31
 80066b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066ba:	d025      	beq.n	8006708 <__lshift+0x98>
 80066bc:	f1c2 0e20 	rsb	lr, r2, #32
 80066c0:	2000      	movs	r0, #0
 80066c2:	681e      	ldr	r6, [r3, #0]
 80066c4:	468a      	mov	sl, r1
 80066c6:	4096      	lsls	r6, r2
 80066c8:	4330      	orrs	r0, r6
 80066ca:	f84a 0b04 	str.w	r0, [sl], #4
 80066ce:	f853 0b04 	ldr.w	r0, [r3], #4
 80066d2:	459c      	cmp	ip, r3
 80066d4:	fa20 f00e 	lsr.w	r0, r0, lr
 80066d8:	d814      	bhi.n	8006704 <__lshift+0x94>
 80066da:	6048      	str	r0, [r1, #4]
 80066dc:	b108      	cbz	r0, 80066e2 <__lshift+0x72>
 80066de:	f109 0502 	add.w	r5, r9, #2
 80066e2:	3d01      	subs	r5, #1
 80066e4:	4638      	mov	r0, r7
 80066e6:	f8c8 5010 	str.w	r5, [r8, #16]
 80066ea:	4621      	mov	r1, r4
 80066ec:	f7ff fe33 	bl	8006356 <_Bfree>
 80066f0:	4640      	mov	r0, r8
 80066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f6:	3101      	adds	r1, #1
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	e7c7      	b.n	800668c <__lshift+0x1c>
 80066fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006700:	3301      	adds	r3, #1
 8006702:	e7cd      	b.n	80066a0 <__lshift+0x30>
 8006704:	4651      	mov	r1, sl
 8006706:	e7dc      	b.n	80066c2 <__lshift+0x52>
 8006708:	3904      	subs	r1, #4
 800670a:	f853 2b04 	ldr.w	r2, [r3], #4
 800670e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006712:	459c      	cmp	ip, r3
 8006714:	d8f9      	bhi.n	800670a <__lshift+0x9a>
 8006716:	e7e4      	b.n	80066e2 <__lshift+0x72>

08006718 <__mcmp>:
 8006718:	6903      	ldr	r3, [r0, #16]
 800671a:	690a      	ldr	r2, [r1, #16]
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	b530      	push	{r4, r5, lr}
 8006720:	d10c      	bne.n	800673c <__mcmp+0x24>
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	3014      	adds	r0, #20
 8006726:	3114      	adds	r1, #20
 8006728:	1884      	adds	r4, r0, r2
 800672a:	4411      	add	r1, r2
 800672c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006734:	4295      	cmp	r5, r2
 8006736:	d003      	beq.n	8006740 <__mcmp+0x28>
 8006738:	d305      	bcc.n	8006746 <__mcmp+0x2e>
 800673a:	2301      	movs	r3, #1
 800673c:	4618      	mov	r0, r3
 800673e:	bd30      	pop	{r4, r5, pc}
 8006740:	42a0      	cmp	r0, r4
 8006742:	d3f3      	bcc.n	800672c <__mcmp+0x14>
 8006744:	e7fa      	b.n	800673c <__mcmp+0x24>
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e7f7      	b.n	800673c <__mcmp+0x24>

0800674c <__mdiff>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	460d      	mov	r5, r1
 8006752:	4607      	mov	r7, r0
 8006754:	4611      	mov	r1, r2
 8006756:	4628      	mov	r0, r5
 8006758:	4614      	mov	r4, r2
 800675a:	f7ff ffdd 	bl	8006718 <__mcmp>
 800675e:	1e06      	subs	r6, r0, #0
 8006760:	d108      	bne.n	8006774 <__mdiff+0x28>
 8006762:	4631      	mov	r1, r6
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff fdc2 	bl	80062ee <_Balloc>
 800676a:	2301      	movs	r3, #1
 800676c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	bfa4      	itt	ge
 8006776:	4623      	movge	r3, r4
 8006778:	462c      	movge	r4, r5
 800677a:	4638      	mov	r0, r7
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	bfa6      	itte	ge
 8006780:	461d      	movge	r5, r3
 8006782:	2600      	movge	r6, #0
 8006784:	2601      	movlt	r6, #1
 8006786:	f7ff fdb2 	bl	80062ee <_Balloc>
 800678a:	692b      	ldr	r3, [r5, #16]
 800678c:	60c6      	str	r6, [r0, #12]
 800678e:	6926      	ldr	r6, [r4, #16]
 8006790:	f105 0914 	add.w	r9, r5, #20
 8006794:	f104 0214 	add.w	r2, r4, #20
 8006798:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800679c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067a0:	f100 0514 	add.w	r5, r0, #20
 80067a4:	f04f 0e00 	mov.w	lr, #0
 80067a8:	f852 ab04 	ldr.w	sl, [r2], #4
 80067ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80067b0:	fa1e f18a 	uxtah	r1, lr, sl
 80067b4:	b2a3      	uxth	r3, r4
 80067b6:	1ac9      	subs	r1, r1, r3
 80067b8:	0c23      	lsrs	r3, r4, #16
 80067ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067c2:	b289      	uxth	r1, r1
 80067c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067c8:	45c8      	cmp	r8, r9
 80067ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067ce:	4694      	mov	ip, r2
 80067d0:	f845 3b04 	str.w	r3, [r5], #4
 80067d4:	d8e8      	bhi.n	80067a8 <__mdiff+0x5c>
 80067d6:	45bc      	cmp	ip, r7
 80067d8:	d304      	bcc.n	80067e4 <__mdiff+0x98>
 80067da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80067de:	b183      	cbz	r3, 8006802 <__mdiff+0xb6>
 80067e0:	6106      	str	r6, [r0, #16]
 80067e2:	e7c5      	b.n	8006770 <__mdiff+0x24>
 80067e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067e8:	fa1e f381 	uxtah	r3, lr, r1
 80067ec:	141a      	asrs	r2, r3, #16
 80067ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80067fc:	f845 3b04 	str.w	r3, [r5], #4
 8006800:	e7e9      	b.n	80067d6 <__mdiff+0x8a>
 8006802:	3e01      	subs	r6, #1
 8006804:	e7e9      	b.n	80067da <__mdiff+0x8e>

08006806 <__d2b>:
 8006806:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800680a:	460e      	mov	r6, r1
 800680c:	2101      	movs	r1, #1
 800680e:	ec59 8b10 	vmov	r8, r9, d0
 8006812:	4615      	mov	r5, r2
 8006814:	f7ff fd6b 	bl	80062ee <_Balloc>
 8006818:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800681c:	4607      	mov	r7, r0
 800681e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006822:	bb34      	cbnz	r4, 8006872 <__d2b+0x6c>
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	f1b8 0300 	subs.w	r3, r8, #0
 800682a:	d027      	beq.n	800687c <__d2b+0x76>
 800682c:	a802      	add	r0, sp, #8
 800682e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006832:	f7ff fe01 	bl	8006438 <__lo0bits>
 8006836:	9900      	ldr	r1, [sp, #0]
 8006838:	b1f0      	cbz	r0, 8006878 <__d2b+0x72>
 800683a:	9a01      	ldr	r2, [sp, #4]
 800683c:	f1c0 0320 	rsb	r3, r0, #32
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	430b      	orrs	r3, r1
 8006846:	40c2      	lsrs	r2, r0
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	9201      	str	r2, [sp, #4]
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf14      	ite	ne
 8006854:	2102      	movne	r1, #2
 8006856:	2101      	moveq	r1, #1
 8006858:	6139      	str	r1, [r7, #16]
 800685a:	b1c4      	cbz	r4, 800688e <__d2b+0x88>
 800685c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006860:	4404      	add	r4, r0
 8006862:	6034      	str	r4, [r6, #0]
 8006864:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006868:	6028      	str	r0, [r5, #0]
 800686a:	4638      	mov	r0, r7
 800686c:	b003      	add	sp, #12
 800686e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006876:	e7d5      	b.n	8006824 <__d2b+0x1e>
 8006878:	6179      	str	r1, [r7, #20]
 800687a:	e7e7      	b.n	800684c <__d2b+0x46>
 800687c:	a801      	add	r0, sp, #4
 800687e:	f7ff fddb 	bl	8006438 <__lo0bits>
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	2101      	movs	r1, #1
 8006888:	6139      	str	r1, [r7, #16]
 800688a:	3020      	adds	r0, #32
 800688c:	e7e5      	b.n	800685a <__d2b+0x54>
 800688e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006892:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006896:	6030      	str	r0, [r6, #0]
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f7ff fdae 	bl	80063fa <__hi0bits>
 800689e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068a2:	e7e1      	b.n	8006868 <__d2b+0x62>

080068a4 <_calloc_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	fb02 f401 	mul.w	r4, r2, r1
 80068aa:	4621      	mov	r1, r4
 80068ac:	f000 f856 	bl	800695c <_malloc_r>
 80068b0:	4605      	mov	r5, r0
 80068b2:	b118      	cbz	r0, 80068bc <_calloc_r+0x18>
 80068b4:	4622      	mov	r2, r4
 80068b6:	2100      	movs	r1, #0
 80068b8:	f7fe f96c 	bl	8004b94 <memset>
 80068bc:	4628      	mov	r0, r5
 80068be:	bd38      	pop	{r3, r4, r5, pc}

080068c0 <_free_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4605      	mov	r5, r0
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d045      	beq.n	8006954 <_free_r+0x94>
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f0c      	subs	r4, r1, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	18e4      	addlt	r4, r4, r3
 80068d4:	f000 fc4a 	bl	800716c <__malloc_lock>
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <_free_r+0x98>)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	4610      	mov	r0, r2
 80068de:	b933      	cbnz	r3, 80068ee <_free_r+0x2e>
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6014      	str	r4, [r2, #0]
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ea:	f000 bc40 	b.w	800716e <__malloc_unlock>
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	d90c      	bls.n	800690c <_free_r+0x4c>
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	1862      	adds	r2, r4, r1
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bf04      	itt	eq
 80068fa:	681a      	ldreq	r2, [r3, #0]
 80068fc:	685b      	ldreq	r3, [r3, #4]
 80068fe:	6063      	str	r3, [r4, #4]
 8006900:	bf04      	itt	eq
 8006902:	1852      	addeq	r2, r2, r1
 8006904:	6022      	streq	r2, [r4, #0]
 8006906:	6004      	str	r4, [r0, #0]
 8006908:	e7ec      	b.n	80068e4 <_free_r+0x24>
 800690a:	4613      	mov	r3, r2
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	b10a      	cbz	r2, 8006914 <_free_r+0x54>
 8006910:	42a2      	cmp	r2, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x4a>
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	1858      	adds	r0, r3, r1
 8006918:	42a0      	cmp	r0, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x74>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	4401      	add	r1, r0
 8006920:	1858      	adds	r0, r3, r1
 8006922:	4282      	cmp	r2, r0
 8006924:	6019      	str	r1, [r3, #0]
 8006926:	d1dd      	bne.n	80068e4 <_free_r+0x24>
 8006928:	6810      	ldr	r0, [r2, #0]
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	4401      	add	r1, r0
 8006930:	6019      	str	r1, [r3, #0]
 8006932:	e7d7      	b.n	80068e4 <_free_r+0x24>
 8006934:	d902      	bls.n	800693c <_free_r+0x7c>
 8006936:	230c      	movs	r3, #12
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	e7d3      	b.n	80068e4 <_free_r+0x24>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	1821      	adds	r1, r4, r0
 8006940:	428a      	cmp	r2, r1
 8006942:	bf04      	itt	eq
 8006944:	6811      	ldreq	r1, [r2, #0]
 8006946:	6852      	ldreq	r2, [r2, #4]
 8006948:	6062      	str	r2, [r4, #4]
 800694a:	bf04      	itt	eq
 800694c:	1809      	addeq	r1, r1, r0
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	605c      	str	r4, [r3, #4]
 8006952:	e7c7      	b.n	80068e4 <_free_r+0x24>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	20000270 	.word	0x20000270

0800695c <_malloc_r>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	1ccd      	adds	r5, r1, #3
 8006960:	f025 0503 	bic.w	r5, r5, #3
 8006964:	3508      	adds	r5, #8
 8006966:	2d0c      	cmp	r5, #12
 8006968:	bf38      	it	cc
 800696a:	250c      	movcc	r5, #12
 800696c:	2d00      	cmp	r5, #0
 800696e:	4606      	mov	r6, r0
 8006970:	db01      	blt.n	8006976 <_malloc_r+0x1a>
 8006972:	42a9      	cmp	r1, r5
 8006974:	d903      	bls.n	800697e <_malloc_r+0x22>
 8006976:	230c      	movs	r3, #12
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	2000      	movs	r0, #0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	f000 fbf5 	bl	800716c <__malloc_lock>
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <_malloc_r+0xac>)
 8006984:	6814      	ldr	r4, [r2, #0]
 8006986:	4621      	mov	r1, r4
 8006988:	b991      	cbnz	r1, 80069b0 <_malloc_r+0x54>
 800698a:	4c20      	ldr	r4, [pc, #128]	; (8006a0c <_malloc_r+0xb0>)
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	b91b      	cbnz	r3, 8006998 <_malloc_r+0x3c>
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f97d 	bl	8006c90 <_sbrk_r>
 8006996:	6020      	str	r0, [r4, #0]
 8006998:	4629      	mov	r1, r5
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f978 	bl	8006c90 <_sbrk_r>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d124      	bne.n	80069ee <_malloc_r+0x92>
 80069a4:	230c      	movs	r3, #12
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	4630      	mov	r0, r6
 80069aa:	f000 fbe0 	bl	800716e <__malloc_unlock>
 80069ae:	e7e4      	b.n	800697a <_malloc_r+0x1e>
 80069b0:	680b      	ldr	r3, [r1, #0]
 80069b2:	1b5b      	subs	r3, r3, r5
 80069b4:	d418      	bmi.n	80069e8 <_malloc_r+0x8c>
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	d90f      	bls.n	80069da <_malloc_r+0x7e>
 80069ba:	600b      	str	r3, [r1, #0]
 80069bc:	50cd      	str	r5, [r1, r3]
 80069be:	18cc      	adds	r4, r1, r3
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 fbd4 	bl	800716e <__malloc_unlock>
 80069c6:	f104 000b 	add.w	r0, r4, #11
 80069ca:	1d23      	adds	r3, r4, #4
 80069cc:	f020 0007 	bic.w	r0, r0, #7
 80069d0:	1ac3      	subs	r3, r0, r3
 80069d2:	d0d3      	beq.n	800697c <_malloc_r+0x20>
 80069d4:	425a      	negs	r2, r3
 80069d6:	50e2      	str	r2, [r4, r3]
 80069d8:	e7d0      	b.n	800697c <_malloc_r+0x20>
 80069da:	428c      	cmp	r4, r1
 80069dc:	684b      	ldr	r3, [r1, #4]
 80069de:	bf16      	itet	ne
 80069e0:	6063      	strne	r3, [r4, #4]
 80069e2:	6013      	streq	r3, [r2, #0]
 80069e4:	460c      	movne	r4, r1
 80069e6:	e7eb      	b.n	80069c0 <_malloc_r+0x64>
 80069e8:	460c      	mov	r4, r1
 80069ea:	6849      	ldr	r1, [r1, #4]
 80069ec:	e7cc      	b.n	8006988 <_malloc_r+0x2c>
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	f024 0403 	bic.w	r4, r4, #3
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d005      	beq.n	8006a04 <_malloc_r+0xa8>
 80069f8:	1a21      	subs	r1, r4, r0
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f948 	bl	8006c90 <_sbrk_r>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d0cf      	beq.n	80069a4 <_malloc_r+0x48>
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	e7db      	b.n	80069c0 <_malloc_r+0x64>
 8006a08:	20000270 	.word	0x20000270
 8006a0c:	20000274 	.word	0x20000274

08006a10 <__sfputc_r>:
 8006a10:	6893      	ldr	r3, [r2, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	b410      	push	{r4}
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	da08      	bge.n	8006a2e <__sfputc_r+0x1e>
 8006a1c:	6994      	ldr	r4, [r2, #24]
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	db01      	blt.n	8006a26 <__sfputc_r+0x16>
 8006a22:	290a      	cmp	r1, #10
 8006a24:	d103      	bne.n	8006a2e <__sfputc_r+0x1e>
 8006a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a2a:	f000 b985 	b.w	8006d38 <__swbuf_r>
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	1c58      	adds	r0, r3, #1
 8006a32:	6010      	str	r0, [r2, #0]
 8006a34:	7019      	strb	r1, [r3, #0]
 8006a36:	4608      	mov	r0, r1
 8006a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <__sfputs_r>:
 8006a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	18d5      	adds	r5, r2, r3
 8006a48:	42ac      	cmp	r4, r5
 8006a4a:	d101      	bne.n	8006a50 <__sfputs_r+0x12>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e007      	b.n	8006a60 <__sfputs_r+0x22>
 8006a50:	463a      	mov	r2, r7
 8006a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7ff ffda 	bl	8006a10 <__sfputc_r>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d1f3      	bne.n	8006a48 <__sfputs_r+0xa>
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a64 <_vfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	460c      	mov	r4, r1
 8006a6a:	b09d      	sub	sp, #116	; 0x74
 8006a6c:	4617      	mov	r7, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	4606      	mov	r6, r0
 8006a72:	b118      	cbz	r0, 8006a7c <_vfiprintf_r+0x18>
 8006a74:	6983      	ldr	r3, [r0, #24]
 8006a76:	b90b      	cbnz	r3, 8006a7c <_vfiprintf_r+0x18>
 8006a78:	f7ff fb8e 	bl	8006198 <__sinit>
 8006a7c:	4b7c      	ldr	r3, [pc, #496]	; (8006c70 <_vfiprintf_r+0x20c>)
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d158      	bne.n	8006b34 <_vfiprintf_r+0xd0>
 8006a82:	6874      	ldr	r4, [r6, #4]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	0718      	lsls	r0, r3, #28
 8006a88:	d55e      	bpl.n	8006b48 <_vfiprintf_r+0xe4>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05b      	beq.n	8006b48 <_vfiprintf_r+0xe4>
 8006a90:	2300      	movs	r3, #0
 8006a92:	9309      	str	r3, [sp, #36]	; 0x24
 8006a94:	2320      	movs	r3, #32
 8006a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a9a:	2330      	movs	r3, #48	; 0x30
 8006a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa0:	9503      	str	r5, [sp, #12]
 8006aa2:	f04f 0b01 	mov.w	fp, #1
 8006aa6:	46b8      	mov	r8, r7
 8006aa8:	4645      	mov	r5, r8
 8006aaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006aae:	b10b      	cbz	r3, 8006ab4 <_vfiprintf_r+0x50>
 8006ab0:	2b25      	cmp	r3, #37	; 0x25
 8006ab2:	d154      	bne.n	8006b5e <_vfiprintf_r+0xfa>
 8006ab4:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ab8:	d00b      	beq.n	8006ad2 <_vfiprintf_r+0x6e>
 8006aba:	4653      	mov	r3, sl
 8006abc:	463a      	mov	r2, r7
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff ffbc 	bl	8006a3e <__sfputs_r>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f000 80c2 	beq.w	8006c50 <_vfiprintf_r+0x1ec>
 8006acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ace:	4453      	add	r3, sl
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	f898 3000 	ldrb.w	r3, [r8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80ba 	beq.w	8006c50 <_vfiprintf_r+0x1ec>
 8006adc:	2300      	movs	r3, #0
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	9307      	str	r3, [sp, #28]
 8006aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aee:	931a      	str	r3, [sp, #104]	; 0x68
 8006af0:	46a8      	mov	r8, r5
 8006af2:	2205      	movs	r2, #5
 8006af4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006af8:	485e      	ldr	r0, [pc, #376]	; (8006c74 <_vfiprintf_r+0x210>)
 8006afa:	f7f9 fb79 	bl	80001f0 <memchr>
 8006afe:	9b04      	ldr	r3, [sp, #16]
 8006b00:	bb78      	cbnz	r0, 8006b62 <_vfiprintf_r+0xfe>
 8006b02:	06d9      	lsls	r1, r3, #27
 8006b04:	bf44      	itt	mi
 8006b06:	2220      	movmi	r2, #32
 8006b08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b0c:	071a      	lsls	r2, r3, #28
 8006b0e:	bf44      	itt	mi
 8006b10:	222b      	movmi	r2, #43	; 0x2b
 8006b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b16:	782a      	ldrb	r2, [r5, #0]
 8006b18:	2a2a      	cmp	r2, #42	; 0x2a
 8006b1a:	d02a      	beq.n	8006b72 <_vfiprintf_r+0x10e>
 8006b1c:	9a07      	ldr	r2, [sp, #28]
 8006b1e:	46a8      	mov	r8, r5
 8006b20:	2000      	movs	r0, #0
 8006b22:	250a      	movs	r5, #10
 8006b24:	4641      	mov	r1, r8
 8006b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b2a:	3b30      	subs	r3, #48	; 0x30
 8006b2c:	2b09      	cmp	r3, #9
 8006b2e:	d969      	bls.n	8006c04 <_vfiprintf_r+0x1a0>
 8006b30:	b360      	cbz	r0, 8006b8c <_vfiprintf_r+0x128>
 8006b32:	e024      	b.n	8006b7e <_vfiprintf_r+0x11a>
 8006b34:	4b50      	ldr	r3, [pc, #320]	; (8006c78 <_vfiprintf_r+0x214>)
 8006b36:	429c      	cmp	r4, r3
 8006b38:	d101      	bne.n	8006b3e <_vfiprintf_r+0xda>
 8006b3a:	68b4      	ldr	r4, [r6, #8]
 8006b3c:	e7a2      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006b3e:	4b4f      	ldr	r3, [pc, #316]	; (8006c7c <_vfiprintf_r+0x218>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	bf08      	it	eq
 8006b44:	68f4      	ldreq	r4, [r6, #12]
 8006b46:	e79d      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f958 	bl	8006e00 <__swsetup_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d09d      	beq.n	8006a90 <_vfiprintf_r+0x2c>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b01d      	add	sp, #116	; 0x74
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	46a8      	mov	r8, r5
 8006b60:	e7a2      	b.n	8006aa8 <_vfiprintf_r+0x44>
 8006b62:	4a44      	ldr	r2, [pc, #272]	; (8006c74 <_vfiprintf_r+0x210>)
 8006b64:	1a80      	subs	r0, r0, r2
 8006b66:	fa0b f000 	lsl.w	r0, fp, r0
 8006b6a:	4318      	orrs	r0, r3
 8006b6c:	9004      	str	r0, [sp, #16]
 8006b6e:	4645      	mov	r5, r8
 8006b70:	e7be      	b.n	8006af0 <_vfiprintf_r+0x8c>
 8006b72:	9a03      	ldr	r2, [sp, #12]
 8006b74:	1d11      	adds	r1, r2, #4
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	9103      	str	r1, [sp, #12]
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	db01      	blt.n	8006b82 <_vfiprintf_r+0x11e>
 8006b7e:	9207      	str	r2, [sp, #28]
 8006b80:	e004      	b.n	8006b8c <_vfiprintf_r+0x128>
 8006b82:	4252      	negs	r2, r2
 8006b84:	f043 0302 	orr.w	r3, r3, #2
 8006b88:	9207      	str	r2, [sp, #28]
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	f898 3000 	ldrb.w	r3, [r8]
 8006b90:	2b2e      	cmp	r3, #46	; 0x2e
 8006b92:	d10e      	bne.n	8006bb2 <_vfiprintf_r+0x14e>
 8006b94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b98:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9a:	d138      	bne.n	8006c0e <_vfiprintf_r+0x1aa>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	1d1a      	adds	r2, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	9203      	str	r2, [sp, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bfb8      	it	lt
 8006ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bac:	f108 0802 	add.w	r8, r8, #2
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	4d33      	ldr	r5, [pc, #204]	; (8006c80 <_vfiprintf_r+0x21c>)
 8006bb4:	f898 1000 	ldrb.w	r1, [r8]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f7f9 fb18 	bl	80001f0 <memchr>
 8006bc0:	b140      	cbz	r0, 8006bd4 <_vfiprintf_r+0x170>
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	1b40      	subs	r0, r0, r5
 8006bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	4303      	orrs	r3, r0
 8006bce:	f108 0801 	add.w	r8, r8, #1
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	f898 1000 	ldrb.w	r1, [r8]
 8006bd8:	482a      	ldr	r0, [pc, #168]	; (8006c84 <_vfiprintf_r+0x220>)
 8006bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bde:	2206      	movs	r2, #6
 8006be0:	f108 0701 	add.w	r7, r8, #1
 8006be4:	f7f9 fb04 	bl	80001f0 <memchr>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d037      	beq.n	8006c5c <_vfiprintf_r+0x1f8>
 8006bec:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <_vfiprintf_r+0x224>)
 8006bee:	bb1b      	cbnz	r3, 8006c38 <_vfiprintf_r+0x1d4>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	3307      	adds	r3, #7
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfe:	444b      	add	r3, r9
 8006c00:	9309      	str	r3, [sp, #36]	; 0x24
 8006c02:	e750      	b.n	8006aa6 <_vfiprintf_r+0x42>
 8006c04:	fb05 3202 	mla	r2, r5, r2, r3
 8006c08:	2001      	movs	r0, #1
 8006c0a:	4688      	mov	r8, r1
 8006c0c:	e78a      	b.n	8006b24 <_vfiprintf_r+0xc0>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f108 0801 	add.w	r8, r8, #1
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	4619      	mov	r1, r3
 8006c18:	250a      	movs	r5, #10
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c20:	3a30      	subs	r2, #48	; 0x30
 8006c22:	2a09      	cmp	r2, #9
 8006c24:	d903      	bls.n	8006c2e <_vfiprintf_r+0x1ca>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0c3      	beq.n	8006bb2 <_vfiprintf_r+0x14e>
 8006c2a:	9105      	str	r1, [sp, #20]
 8006c2c:	e7c1      	b.n	8006bb2 <_vfiprintf_r+0x14e>
 8006c2e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c32:	2301      	movs	r3, #1
 8006c34:	4680      	mov	r8, r0
 8006c36:	e7f0      	b.n	8006c1a <_vfiprintf_r+0x1b6>
 8006c38:	ab03      	add	r3, sp, #12
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <_vfiprintf_r+0x228>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7fe f842 	bl	8004ccc <_printf_float>
 8006c48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c4c:	4681      	mov	r9, r0
 8006c4e:	d1d5      	bne.n	8006bfc <_vfiprintf_r+0x198>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	065b      	lsls	r3, r3, #25
 8006c54:	f53f af7e 	bmi.w	8006b54 <_vfiprintf_r+0xf0>
 8006c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c5a:	e77d      	b.n	8006b58 <_vfiprintf_r+0xf4>
 8006c5c:	ab03      	add	r3, sp, #12
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4622      	mov	r2, r4
 8006c62:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <_vfiprintf_r+0x228>)
 8006c64:	a904      	add	r1, sp, #16
 8006c66:	4630      	mov	r0, r6
 8006c68:	f7fe fae6 	bl	8005238 <_printf_i>
 8006c6c:	e7ec      	b.n	8006c48 <_vfiprintf_r+0x1e4>
 8006c6e:	bf00      	nop
 8006c70:	0800739c 	.word	0x0800739c
 8006c74:	080074dc 	.word	0x080074dc
 8006c78:	080073bc 	.word	0x080073bc
 8006c7c:	0800737c 	.word	0x0800737c
 8006c80:	080074e2 	.word	0x080074e2
 8006c84:	080074e6 	.word	0x080074e6
 8006c88:	08004ccd 	.word	0x08004ccd
 8006c8c:	08006a3f 	.word	0x08006a3f

08006c90 <_sbrk_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4c06      	ldr	r4, [pc, #24]	; (8006cac <_sbrk_r+0x1c>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	4605      	mov	r5, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	f7fa fe80 	bl	80019a0 <_sbrk>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_sbrk_r+0x1a>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_sbrk_r+0x1a>
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200004b4 	.word	0x200004b4

08006cb0 <__sread>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	f000 fa5a 	bl	8007170 <_read_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	bfab      	itete	ge
 8006cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc4:	181b      	addge	r3, r3, r0
 8006cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cca:	bfac      	ite	ge
 8006ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cce:	81a3      	strhlt	r3, [r4, #12]
 8006cd0:	bd10      	pop	{r4, pc}

08006cd2 <__swrite>:
 8006cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	898b      	ldrh	r3, [r1, #12]
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	d505      	bpl.n	8006cf0 <__swrite+0x1e>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	f000 f9b6 	bl	800705c <_lseek_r>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	4628      	mov	r0, r5
 8006d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	f000 b869 	b.w	8006ddc <_write_r>

08006d0a <__sseek>:
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d12:	f000 f9a3 	bl	800705c <_lseek_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	bf15      	itete	ne
 8006d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d26:	81a3      	strheq	r3, [r4, #12]
 8006d28:	bf18      	it	ne
 8006d2a:	81a3      	strhne	r3, [r4, #12]
 8006d2c:	bd10      	pop	{r4, pc}

08006d2e <__sclose>:
 8006d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d32:	f000 b8d3 	b.w	8006edc <_close_r>
	...

08006d38 <__swbuf_r>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	460e      	mov	r6, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	4605      	mov	r5, r0
 8006d40:	b118      	cbz	r0, 8006d4a <__swbuf_r+0x12>
 8006d42:	6983      	ldr	r3, [r0, #24]
 8006d44:	b90b      	cbnz	r3, 8006d4a <__swbuf_r+0x12>
 8006d46:	f7ff fa27 	bl	8006198 <__sinit>
 8006d4a:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <__swbuf_r+0x98>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	d12a      	bne.n	8006da6 <__swbuf_r+0x6e>
 8006d50:	686c      	ldr	r4, [r5, #4]
 8006d52:	69a3      	ldr	r3, [r4, #24]
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	071a      	lsls	r2, r3, #28
 8006d5a:	d52e      	bpl.n	8006dba <__swbuf_r+0x82>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	b363      	cbz	r3, 8006dba <__swbuf_r+0x82>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1ac0      	subs	r0, r0, r3
 8006d66:	6963      	ldr	r3, [r4, #20]
 8006d68:	b2f6      	uxtb	r6, r6
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	dc04      	bgt.n	8006d7a <__swbuf_r+0x42>
 8006d70:	4621      	mov	r1, r4
 8006d72:	4628      	mov	r0, r5
 8006d74:	f000 f948 	bl	8007008 <_fflush_r>
 8006d78:	bb28      	cbnz	r0, 8006dc6 <__swbuf_r+0x8e>
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	60a3      	str	r3, [r4, #8]
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	701e      	strb	r6, [r3, #0]
 8006d88:	6963      	ldr	r3, [r4, #20]
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	d004      	beq.n	8006d9a <__swbuf_r+0x62>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d519      	bpl.n	8006dca <__swbuf_r+0x92>
 8006d96:	2e0a      	cmp	r6, #10
 8006d98:	d117      	bne.n	8006dca <__swbuf_r+0x92>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 f933 	bl	8007008 <_fflush_r>
 8006da2:	b190      	cbz	r0, 8006dca <__swbuf_r+0x92>
 8006da4:	e00f      	b.n	8006dc6 <__swbuf_r+0x8e>
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <__swbuf_r+0x9c>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d101      	bne.n	8006db0 <__swbuf_r+0x78>
 8006dac:	68ac      	ldr	r4, [r5, #8]
 8006dae:	e7d0      	b.n	8006d52 <__swbuf_r+0x1a>
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <__swbuf_r+0xa0>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	bf08      	it	eq
 8006db6:	68ec      	ldreq	r4, [r5, #12]
 8006db8:	e7cb      	b.n	8006d52 <__swbuf_r+0x1a>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 f81f 	bl	8006e00 <__swsetup_r>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d0cc      	beq.n	8006d60 <__swbuf_r+0x28>
 8006dc6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dca:	4638      	mov	r0, r7
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	0800739c 	.word	0x0800739c
 8006dd4:	080073bc 	.word	0x080073bc
 8006dd8:	0800737c 	.word	0x0800737c

08006ddc <_write_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4c07      	ldr	r4, [pc, #28]	; (8006dfc <_write_r+0x20>)
 8006de0:	4605      	mov	r5, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7fa fd87 	bl	80018fe <_write>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_write_r+0x1e>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_write_r+0x1e>
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	200004b4 	.word	0x200004b4

08006e00 <__swsetup_r>:
 8006e00:	4b32      	ldr	r3, [pc, #200]	; (8006ecc <__swsetup_r+0xcc>)
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	681d      	ldr	r5, [r3, #0]
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	b125      	cbz	r5, 8006e16 <__swsetup_r+0x16>
 8006e0c:	69ab      	ldr	r3, [r5, #24]
 8006e0e:	b913      	cbnz	r3, 8006e16 <__swsetup_r+0x16>
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff f9c1 	bl	8006198 <__sinit>
 8006e16:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <__swsetup_r+0xd0>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d10f      	bne.n	8006e3c <__swsetup_r+0x3c>
 8006e1c:	686c      	ldr	r4, [r5, #4]
 8006e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	0715      	lsls	r5, r2, #28
 8006e26:	d42c      	bmi.n	8006e82 <__swsetup_r+0x82>
 8006e28:	06d0      	lsls	r0, r2, #27
 8006e2a:	d411      	bmi.n	8006e50 <__swsetup_r+0x50>
 8006e2c:	2209      	movs	r2, #9
 8006e2e:	6032      	str	r2, [r6, #0]
 8006e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3a:	e03e      	b.n	8006eba <__swsetup_r+0xba>
 8006e3c:	4b25      	ldr	r3, [pc, #148]	; (8006ed4 <__swsetup_r+0xd4>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d101      	bne.n	8006e46 <__swsetup_r+0x46>
 8006e42:	68ac      	ldr	r4, [r5, #8]
 8006e44:	e7eb      	b.n	8006e1e <__swsetup_r+0x1e>
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <__swsetup_r+0xd8>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	bf08      	it	eq
 8006e4c:	68ec      	ldreq	r4, [r5, #12]
 8006e4e:	e7e6      	b.n	8006e1e <__swsetup_r+0x1e>
 8006e50:	0751      	lsls	r1, r2, #29
 8006e52:	d512      	bpl.n	8006e7a <__swsetup_r+0x7a>
 8006e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e56:	b141      	cbz	r1, 8006e6a <__swsetup_r+0x6a>
 8006e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d002      	beq.n	8006e66 <__swsetup_r+0x66>
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff fd2d 	bl	80068c0 <_free_r>
 8006e66:	2300      	movs	r3, #0
 8006e68:	6363      	str	r3, [r4, #52]	; 0x34
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b94b      	cbnz	r3, 8006e9a <__swsetup_r+0x9a>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e90:	d003      	beq.n	8006e9a <__swsetup_r+0x9a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4630      	mov	r0, r6
 8006e96:	f000 f917 	bl	80070c8 <__smakebuf_r>
 8006e9a:	89a2      	ldrh	r2, [r4, #12]
 8006e9c:	f012 0301 	ands.w	r3, r2, #1
 8006ea0:	d00c      	beq.n	8006ebc <__swsetup_r+0xbc>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60a3      	str	r3, [r4, #8]
 8006ea6:	6963      	ldr	r3, [r4, #20]
 8006ea8:	425b      	negs	r3, r3
 8006eaa:	61a3      	str	r3, [r4, #24]
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	b953      	cbnz	r3, 8006ec6 <__swsetup_r+0xc6>
 8006eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006eb8:	d1ba      	bne.n	8006e30 <__swsetup_r+0x30>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	0792      	lsls	r2, r2, #30
 8006ebe:	bf58      	it	pl
 8006ec0:	6963      	ldrpl	r3, [r4, #20]
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	e7f2      	b.n	8006eac <__swsetup_r+0xac>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7f7      	b.n	8006eba <__swsetup_r+0xba>
 8006eca:	bf00      	nop
 8006ecc:	20000080 	.word	0x20000080
 8006ed0:	0800739c 	.word	0x0800739c
 8006ed4:	080073bc 	.word	0x080073bc
 8006ed8:	0800737c 	.word	0x0800737c

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4c06      	ldr	r4, [pc, #24]	; (8006ef8 <_close_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	f7fa fd25 	bl	8001936 <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	200004b4 	.word	0x200004b4

08006efc <__sflush_r>:
 8006efc:	898a      	ldrh	r2, [r1, #12]
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4605      	mov	r5, r0
 8006f04:	0710      	lsls	r0, r2, #28
 8006f06:	460c      	mov	r4, r1
 8006f08:	d458      	bmi.n	8006fbc <__sflush_r+0xc0>
 8006f0a:	684b      	ldr	r3, [r1, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc05      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc02      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	d0f9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f28:	682f      	ldr	r7, [r5, #0]
 8006f2a:	6a21      	ldr	r1, [r4, #32]
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	d032      	beq.n	8006f96 <__sflush_r+0x9a>
 8006f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	075a      	lsls	r2, r3, #29
 8006f36:	d505      	bpl.n	8006f44 <__sflush_r+0x48>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	1ac0      	subs	r0, r0, r3
 8006f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f3e:	b10b      	cbz	r3, 8006f44 <__sflush_r+0x48>
 8006f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f42:	1ac0      	subs	r0, r0, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f4a:	6a21      	ldr	r1, [r4, #32]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	d106      	bne.n	8006f64 <__sflush_r+0x68>
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	291d      	cmp	r1, #29
 8006f5a:	d848      	bhi.n	8006fee <__sflush_r+0xf2>
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <__sflush_r+0x108>)
 8006f5e:	40ca      	lsrs	r2, r1
 8006f60:	07d6      	lsls	r6, r2, #31
 8006f62:	d544      	bpl.n	8006fee <__sflush_r+0xf2>
 8006f64:	2200      	movs	r2, #0
 8006f66:	6062      	str	r2, [r4, #4]
 8006f68:	04d9      	lsls	r1, r3, #19
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	d504      	bpl.n	8006f7a <__sflush_r+0x7e>
 8006f70:	1c42      	adds	r2, r0, #1
 8006f72:	d101      	bne.n	8006f78 <__sflush_r+0x7c>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b903      	cbnz	r3, 8006f7a <__sflush_r+0x7e>
 8006f78:	6560      	str	r0, [r4, #84]	; 0x54
 8006f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7c:	602f      	str	r7, [r5, #0]
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d0c9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d002      	beq.n	8006f90 <__sflush_r+0x94>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff fc98 	bl	80068c0 <_free_r>
 8006f90:	2000      	movs	r0, #0
 8006f92:	6360      	str	r0, [r4, #52]	; 0x34
 8006f94:	e7c0      	b.n	8006f18 <__sflush_r+0x1c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b0      	blx	r6
 8006f9c:	1c41      	adds	r1, r0, #1
 8006f9e:	d1c8      	bne.n	8006f32 <__sflush_r+0x36>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0c5      	beq.n	8006f32 <__sflush_r+0x36>
 8006fa6:	2b1d      	cmp	r3, #29
 8006fa8:	d001      	beq.n	8006fae <__sflush_r+0xb2>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	d101      	bne.n	8006fb2 <__sflush_r+0xb6>
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	e7b1      	b.n	8006f16 <__sflush_r+0x1a>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7ad      	b.n	8006f18 <__sflush_r+0x1c>
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0a9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006fc2:	0793      	lsls	r3, r2, #30
 8006fc4:	680e      	ldr	r6, [r1, #0]
 8006fc6:	bf08      	it	eq
 8006fc8:	694b      	ldreq	r3, [r1, #20]
 8006fca:	600f      	str	r7, [r1, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2300      	movne	r3, #0
 8006fd0:	eba6 0807 	sub.w	r8, r6, r7
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	f1b8 0f00 	cmp.w	r8, #0
 8006fda:	dd9c      	ble.n	8006f16 <__sflush_r+0x1a>
 8006fdc:	4643      	mov	r3, r8
 8006fde:	463a      	mov	r2, r7
 8006fe0:	6a21      	ldr	r1, [r4, #32]
 8006fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b0      	blx	r6
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dc06      	bgt.n	8006ffa <__sflush_r+0xfe>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e78e      	b.n	8006f18 <__sflush_r+0x1c>
 8006ffa:	4407      	add	r7, r0
 8006ffc:	eba8 0800 	sub.w	r8, r8, r0
 8007000:	e7e9      	b.n	8006fd6 <__sflush_r+0xda>
 8007002:	bf00      	nop
 8007004:	20400001 	.word	0x20400001

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b1db      	cbz	r3, 800704a <_fflush_r+0x42>
 8007012:	b118      	cbz	r0, 800701c <_fflush_r+0x14>
 8007014:	6983      	ldr	r3, [r0, #24]
 8007016:	b90b      	cbnz	r3, 800701c <_fflush_r+0x14>
 8007018:	f7ff f8be 	bl	8006198 <__sinit>
 800701c:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <_fflush_r+0x48>)
 800701e:	429c      	cmp	r4, r3
 8007020:	d109      	bne.n	8007036 <_fflush_r+0x2e>
 8007022:	686c      	ldr	r4, [r5, #4]
 8007024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007028:	b17b      	cbz	r3, 800704a <_fflush_r+0x42>
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007032:	f7ff bf63 	b.w	8006efc <__sflush_r>
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <_fflush_r+0x4c>)
 8007038:	429c      	cmp	r4, r3
 800703a:	d101      	bne.n	8007040 <_fflush_r+0x38>
 800703c:	68ac      	ldr	r4, [r5, #8]
 800703e:	e7f1      	b.n	8007024 <_fflush_r+0x1c>
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <_fflush_r+0x50>)
 8007042:	429c      	cmp	r4, r3
 8007044:	bf08      	it	eq
 8007046:	68ec      	ldreq	r4, [r5, #12]
 8007048:	e7ec      	b.n	8007024 <_fflush_r+0x1c>
 800704a:	2000      	movs	r0, #0
 800704c:	bd38      	pop	{r3, r4, r5, pc}
 800704e:	bf00      	nop
 8007050:	0800739c 	.word	0x0800739c
 8007054:	080073bc 	.word	0x080073bc
 8007058:	0800737c 	.word	0x0800737c

0800705c <_lseek_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4c07      	ldr	r4, [pc, #28]	; (800707c <_lseek_r+0x20>)
 8007060:	4605      	mov	r5, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	6022      	str	r2, [r4, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7fa fc8a 	bl	8001984 <_lseek>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_lseek_r+0x1e>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	b103      	cbz	r3, 800707a <_lseek_r+0x1e>
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	200004b4 	.word	0x200004b4

08007080 <__swhatbuf_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	460e      	mov	r6, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2900      	cmp	r1, #0
 800708a:	b096      	sub	sp, #88	; 0x58
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	da07      	bge.n	80070a2 <__swhatbuf_r+0x22>
 8007092:	2300      	movs	r3, #0
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	89b3      	ldrh	r3, [r6, #12]
 8007098:	061a      	lsls	r2, r3, #24
 800709a:	d410      	bmi.n	80070be <__swhatbuf_r+0x3e>
 800709c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a0:	e00e      	b.n	80070c0 <__swhatbuf_r+0x40>
 80070a2:	466a      	mov	r2, sp
 80070a4:	f000 f884 	bl	80071b0 <_fstat_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	dbf2      	blt.n	8007092 <__swhatbuf_r+0x12>
 80070ac:	9a01      	ldr	r2, [sp, #4]
 80070ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b6:	425a      	negs	r2, r3
 80070b8:	415a      	adcs	r2, r3
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	e7ee      	b.n	800709c <__swhatbuf_r+0x1c>
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	2000      	movs	r0, #0
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	b016      	add	sp, #88	; 0x58
 80070c6:	bd70      	pop	{r4, r5, r6, pc}

080070c8 <__smakebuf_r>:
 80070c8:	898b      	ldrh	r3, [r1, #12]
 80070ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070cc:	079d      	lsls	r5, r3, #30
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	d507      	bpl.n	80070e4 <__smakebuf_r+0x1c>
 80070d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	2301      	movs	r3, #1
 80070de:	6163      	str	r3, [r4, #20]
 80070e0:	b002      	add	sp, #8
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	ab01      	add	r3, sp, #4
 80070e6:	466a      	mov	r2, sp
 80070e8:	f7ff ffca 	bl	8007080 <__swhatbuf_r>
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7ff fc33 	bl	800695c <_malloc_r>
 80070f6:	b948      	cbnz	r0, 800710c <__smakebuf_r+0x44>
 80070f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fc:	059a      	lsls	r2, r3, #22
 80070fe:	d4ef      	bmi.n	80070e0 <__smakebuf_r+0x18>
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7e3      	b.n	80070d4 <__smakebuf_r+0xc>
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <__smakebuf_r+0x7c>)
 800710e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	6020      	str	r0, [r4, #0]
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	9b00      	ldr	r3, [sp, #0]
 800711c:	6163      	str	r3, [r4, #20]
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	6120      	str	r0, [r4, #16]
 8007122:	b15b      	cbz	r3, 800713c <__smakebuf_r+0x74>
 8007124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007128:	4630      	mov	r0, r6
 800712a:	f000 f853 	bl	80071d4 <_isatty_r>
 800712e:	b128      	cbz	r0, 800713c <__smakebuf_r+0x74>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	431d      	orrs	r5, r3
 8007140:	81a5      	strh	r5, [r4, #12]
 8007142:	e7cd      	b.n	80070e0 <__smakebuf_r+0x18>
 8007144:	08006161 	.word	0x08006161

08007148 <__ascii_mbtowc>:
 8007148:	b082      	sub	sp, #8
 800714a:	b901      	cbnz	r1, 800714e <__ascii_mbtowc+0x6>
 800714c:	a901      	add	r1, sp, #4
 800714e:	b142      	cbz	r2, 8007162 <__ascii_mbtowc+0x1a>
 8007150:	b14b      	cbz	r3, 8007166 <__ascii_mbtowc+0x1e>
 8007152:	7813      	ldrb	r3, [r2, #0]
 8007154:	600b      	str	r3, [r1, #0]
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	1c10      	adds	r0, r2, #0
 800715a:	bf18      	it	ne
 800715c:	2001      	movne	r0, #1
 800715e:	b002      	add	sp, #8
 8007160:	4770      	bx	lr
 8007162:	4610      	mov	r0, r2
 8007164:	e7fb      	b.n	800715e <__ascii_mbtowc+0x16>
 8007166:	f06f 0001 	mvn.w	r0, #1
 800716a:	e7f8      	b.n	800715e <__ascii_mbtowc+0x16>

0800716c <__malloc_lock>:
 800716c:	4770      	bx	lr

0800716e <__malloc_unlock>:
 800716e:	4770      	bx	lr

08007170 <_read_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4c07      	ldr	r4, [pc, #28]	; (8007190 <_read_r+0x20>)
 8007174:	4605      	mov	r5, r0
 8007176:	4608      	mov	r0, r1
 8007178:	4611      	mov	r1, r2
 800717a:	2200      	movs	r2, #0
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f7fa fba0 	bl	80018c4 <_read>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_read_r+0x1e>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	b103      	cbz	r3, 800718e <_read_r+0x1e>
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	200004b4 	.word	0x200004b4

08007194 <__ascii_wctomb>:
 8007194:	b149      	cbz	r1, 80071aa <__ascii_wctomb+0x16>
 8007196:	2aff      	cmp	r2, #255	; 0xff
 8007198:	bf85      	ittet	hi
 800719a:	238a      	movhi	r3, #138	; 0x8a
 800719c:	6003      	strhi	r3, [r0, #0]
 800719e:	700a      	strbls	r2, [r1, #0]
 80071a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80071a4:	bf98      	it	ls
 80071a6:	2001      	movls	r0, #1
 80071a8:	4770      	bx	lr
 80071aa:	4608      	mov	r0, r1
 80071ac:	4770      	bx	lr
	...

080071b0 <_fstat_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4c07      	ldr	r4, [pc, #28]	; (80071d0 <_fstat_r+0x20>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4605      	mov	r5, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	f7fa fbc6 	bl	800194e <_fstat>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d102      	bne.n	80071cc <_fstat_r+0x1c>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	b103      	cbz	r3, 80071cc <_fstat_r+0x1c>
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	200004b4 	.word	0x200004b4

080071d4 <_isatty_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c06      	ldr	r4, [pc, #24]	; (80071f0 <_isatty_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4605      	mov	r5, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	f7fa fbc5 	bl	800196e <_isatty>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_isatty_r+0x1a>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_isatty_r+0x1a>
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	200004b4 	.word	0x200004b4

080071f4 <_init>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <_fini>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr
